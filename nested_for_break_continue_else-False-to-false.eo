+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > nested_for_break_continue_else
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.length))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xnested_for_break_continue_else
      seq > @
        stdout "nested_for_break_continue_else\n"
        write.
          xnested_for_break_continue_else
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e23
                cage > xit2
                cage > lhs10
                cage > xres
                cage > e21
                cage > e10
                cage > e25
                cage > lhs12
                cage > e9
                cage > xl1
                cage > e22
                cage > e19
                cage > e6
                cage > e18
                cage > lhs0
                cage > e29
                cage > e12
                cage > xj
                cage > e1
                cage > xl2
                cage > lhs4
                cage > e5
                cage > e28
                cage > e7
                cage > e17
                cage > xk
                cage > e0
                cage > e20
                cage > e4
                cage > e24
                cage > e13
                cage > lhs13
                cage > xit1
                cage > xl3
                cage > e8
                cage > e16
                cage > lhs2
                cage > lhs8
                cage > e27
                cage > e3
                cage > lhs6
                cage > e14
                cage > xit0
                cage > e15
                cage > xi
                cage > e2
                cage > e26
                cage > e11
                seq > @
                  stdout "xnested_for_break_continue_else\n"
                  mkCopy (xfalse) > tmp1
                  (xres).write (tmp1.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* 1 2 3))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp2
                  (xl1).write (tmp2.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* 10 20 30))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp3
                  (xl2).write (tmp3.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* 100 200 300))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e2).write (tmp.result)
                  ((e2).<)
                  mkCopy (e2) > tmp4
                  (xl3).write (tmp4.copy)
                  mkCopy (xl1.x__iter__) > tmp5
                  (e3).write (tmp5.copy)
                  ((e3).<)
                  mkCopy (xl1) > tmp6
                  (lhs0).write (tmp6.copy)
                  tmp.write (goto ((((e3)).apply ((lhs0))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e4).write (tmp.result)
                  ((e4).<)
                  mkCopy (e4) > tmp7
                  (xit0).write (tmp7.copy)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          write.
                            xcurrent-exception
                            goto
                              [stackUp]
                                seq > @
                                  TRUE.while
                                    [unused]
                                      seq > @
                                        mkCopy (xit0.x__next__) > tmp8
                                        (e5).write (tmp8.copy)
                                        ((e5).<)
                                        mkCopy (xit0) > tmp9
                                        (lhs2).write (tmp9.copy)
                                        tmp.write (goto ((((e5)).apply ((lhs2))).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e6).write (tmp.result)
                                        ((e6).<)
                                        mkCopy (e6) > tmp10
                                        (xi).write (tmp10.copy)
                                        mkCopy (xl2.x__iter__) > tmp11
                                        (e7).write (tmp11.copy)
                                        ((e7).<)
                                        mkCopy (xl2) > tmp12
                                        (lhs4).write (tmp12.copy)
                                        tmp.write (goto ((((e7)).apply ((lhs4))).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e8).write (tmp.result)
                                        ((e8).<)
                                        mkCopy (e8) > tmp13
                                        (xit1).write (tmp13.copy)
                                        write.
                                          xcurrent-exception
                                          goto
                                            [stackUp]
                                              seq > @
                                                write.
                                                  xcurrent-exception
                                                  goto
                                                    [stackUp]
                                                      seq > @
                                                        TRUE.while
                                                          [unused]
                                                            seq > @
                                                              mkCopy (xit1.x__next__) > tmp14
                                                              (e9).write (tmp14.copy)
                                                              ((e9).<)
                                                              mkCopy (xit1) > tmp15
                                                              (lhs6).write (tmp15.copy)
                                                              tmp.write (goto ((((e9)).apply ((lhs6))).@))
                                                              (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                                              (e10).write (tmp.result)
                                                              ((e10).<)
                                                              mkCopy (e10) > tmp16
                                                              (xj).write (tmp16.copy)
                                                              mkCopy (xl3.x__iter__) > tmp17
                                                              (e11).write (tmp17.copy)
                                                              ((e11).<)
                                                              mkCopy (xl3) > tmp18
                                                              (lhs8).write (tmp18.copy)
                                                              tmp.write (goto ((((e11)).apply ((lhs8))).@))
                                                              (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                                              (e12).write (tmp.result)
                                                              ((e12).<)
                                                              mkCopy (e12) > tmp19
                                                              (xit2).write (tmp19.copy)
                                                              write.
                                                                xcurrent-exception
                                                                goto
                                                                  [stackUp]
                                                                    seq > @
                                                                      write.
                                                                        xcurrent-exception
                                                                        goto
                                                                          [stackUp]
                                                                            seq > @
                                                                              TRUE.while
                                                                                [unused]
                                                                                  seq > @
                                                                                    mkCopy (xit2.x__next__) > tmp20
                                                                                    (e13).write (tmp20.copy)
                                                                                    ((e13).<)
                                                                                    mkCopy (xit2) > tmp21
                                                                                    (lhs10).write (tmp21.copy)
                                                                                    tmp.write (goto ((((e13)).apply ((lhs10))).@))
                                                                                    (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                                                                    (e14).write (tmp.result)
                                                                                    ((e14).<)
                                                                                    mkCopy (e14) > tmp22
                                                                                    (xk).write (tmp22.copy)
                                                                                    [] > tmp23
                                                                                      memory > dddata
                                                                                      dddata.write (((xi).eq 2)) > @
                                                                                    (e15).write (tmp23.dddata)
                                                                                    ((e15).<)
                                                                                    (e15).if
                                                                                      seq
                                                                                        [] > tmp24
                                                                                          memory > dddata
                                                                                          dddata.write (((xj).eq 20)) > @
                                                                                        (e16).write (tmp24.dddata)
                                                                                        ((e16).<)
                                                                                        TRUE
                                                                                      seq
                                                                                        (lhs12).write (FALSE)
                                                                                        mkCopy (lhs12) > tmp25
                                                                                        (e16).write (tmp25.copy)
                                                                                        TRUE
                                                                                    (e16).if
                                                                                      seq
                                                                                        [] > tmp26
                                                                                          memory > dddata
                                                                                          dddata.write (((xk).eq 200)) > @
                                                                                        (e17).write (tmp26.dddata)
                                                                                        ((e17).<)
                                                                                        TRUE
                                                                                      seq
                                                                                        (lhs13).write (FALSE)
                                                                                        mkCopy (lhs13) > tmp27
                                                                                        (e17).write (tmp27.copy)
                                                                                        TRUE
                                                                                    (e17).if
                                                                                      seq
                                                                                        (xres).write (TRUE)
                                                                                        stackUp.forward break
                                                                                        TRUE
                                                                                      seq
                                                                                        TRUE
                                                                                    TRUE
                                                                              stackUp.forward raiseNothing
                                                                      if.
                                                                        xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                                                                        stackUp.forward xcurrent-exception
                                                                        0
                                                                      stackUp.forward raiseNothing
                                                              seq
                                                                mkCopy (xcurrent-exception.xclass) > tmp28
                                                                (e18).write (tmp28.copy)
                                                                ((e18).<)
                                                                mkCopy (e18.xid) > tmp29
                                                                (e19).write (tmp29.copy)
                                                                ((e19).<)
                                                                mkCopy (xStopIteration.xid) > tmp30
                                                                (e20).write (tmp30.copy)
                                                                ((e20).<)
                                                                [] > tmp31
                                                                  memory > dddata
                                                                  dddata.write (((e19).eq (e20))) > @
                                                                (e21).write (tmp31.dddata)
                                                                ((e21).<)
                                                                (e21).if
                                                                  seq
                                                                    TRUE
                                                                  seq
                                                                    TRUE
                                                                if.
                                                                  xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                                                                  seq
                                                                  0
                                                                (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                                                              stackUp.forward break
                                                              TRUE
                                                        stackUp.forward raiseNothing
                                                if.
                                                  xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                                                  stackUp.forward xcurrent-exception
                                                  0
                                                stackUp.forward raiseNothing
                                        seq
                                          mkCopy (xcurrent-exception.xclass) > tmp32
                                          (e22).write (tmp32.copy)
                                          ((e22).<)
                                          mkCopy (e22.xid) > tmp33
                                          (e23).write (tmp33.copy)
                                          ((e23).<)
                                          mkCopy (xStopIteration.xid) > tmp34
                                          (e24).write (tmp34.copy)
                                          ((e24).<)
                                          [] > tmp35
                                            memory > dddata
                                            dddata.write (((e23).eq (e24))) > @
                                          (e25).write (tmp35.dddata)
                                          ((e25).<)
                                          (e25).if
                                            seq
                                              TRUE
                                            seq
                                              TRUE
                                          if.
                                            xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                                            seq
                                            0
                                          (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                                        stackUp.forward break
                                        TRUE
                                  stackUp.forward raiseNothing
                          if.
                            xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                            stackUp.forward xcurrent-exception
                            0
                          stackUp.forward raiseNothing
                  seq
                    mkCopy (xcurrent-exception.xclass) > tmp36
                    (e26).write (tmp36.copy)
                    ((e26).<)
                    mkCopy (e26.xid) > tmp37
                    (e27).write (tmp37.copy)
                    ((e27).<)
                    mkCopy (xStopIteration.xid) > tmp38
                    (e28).write (tmp38.copy)
                    ((e28).<)
                    [] > tmp39
                      memory > dddata
                      dddata.write (((e27).eq (e28))) > @
                    (e29).write (tmp39.dddata)
                    ((e29).<)
                    (e29).if
                      seq
                        TRUE
                      seq
                        TRUE
                    if.
                      xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                      seq
                      0
                    (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                  toReturn.write ((xres))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xnested_for_break_continue_else)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @