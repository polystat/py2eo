+package org.eolang
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit
pyint 0 > dummy-int-usage
pystring 0 > dummy-string-usage
pyfloat 0 > dummy-float-usage
pybool TRUE > dummy-bool-usage
memory 0 > hasattr
memory 0 > Child
memory 0 > Parent
memory 0 > Friend3
memory 0 > Friend
memory 0 > Citizens
memory 0 > Friend2
[] > yinheritancetest
  [args...] > unsupported
  [args...] > xunsupported
  memory 0 > bogusForceDataize
  memory 0 > xbogusForceDataize
  memory 0 > xhack
  seq > @
    xhack.write
      []
        memory 0 > inheritanceTesting
        seq > @
          inheritanceTesting.write
            []
              memory 0 > chName
              memory 0 > checkPeople
              memory 0 > getPeople
              memory 0 > count
              memory 0 > getParent
              memory 0 > pName
              memory 0 > testCheck
              memory 0 > name
              seq > @
                seq
                  (((unsupported)).ap)
                    pName.write (pystring "Bob")
                  (((unsupported)).ap)
                    seq
                      chName.write (pystring "Steve")
                      getParent.write
                        []
                          seq > @
                            (((unsupported)).ap (((((Parent)).ap).pName)))
                  (((unsupported)).ap ((Parent)) ((Child)))
                    seq
                      name.write (pystring "Dan")
                      getPeople.write
                        [self]
                          seq > @
                            seq
                              bogusForceDataize.write ((((self).__setattr__)).ap ((pystring "age")) ((pyint 100)))
                              (((unsupported)).ap (((((((((self).pName).__len__)).ap).greater (pyint 0)).and ((((((self).chName).__len__)).ap).greater (pyint 0))).and (((hasattr)).ap ((self)) ((pystring "age"))))))
                  (((unsupported)).ap ((Parent)) ((Child)) ((Friend)))
                    seq
                      name.write (pystring "Dan")
                      getPeople.write
                        [self]
                          seq > @
                            seq
                              bogusForceDataize.write ((((self).__setattr__)).ap ((pystring "age")) ((pyint 100)))
                              (((unsupported)).ap (((self).getPeople)))
                  (((unsupported)).ap ((Friend)) ((Child)) ((Friend2)))
                    seq
                      name.write (pystring "Dan")
                      getPeople.write
                        [self]
                          seq > @
                            seq
                              bogusForceDataize.write ((((self).__setattr__)).ap ((pystring "age")) ((pyint 100)))
                              (((unsupported)).ap (((self).getPeople)))
                  (((unsupported)).ap ((Friend)) ((Friend3)) ((Friend2)))
                    seq
                      name.write (pystring "Dan")
                      getPeople.write
                        [self]
                          seq > @
                            seq
                              bogusForceDataize.write ((((self).__setattr__)).ap ((pystring "age")) ((pyint 100)))
                              (((unsupported)).ap (((self).getPeople)))
                  (((unsupported)).ap ((Friend)))
                    seq
                      count.write (pyint 100000)
                      checkPeople.write
                        [self]
                          seq > @
                            (((unsupported)).ap (((((self).count).greater (pyint 0)).and ((((self).getPeople)).ap))))
                  testCheck.write
                    []
                      memory 0 > c
                      seq > @
                        seq
                          c.write (((Citizens)).ap)
                          bogusForceDataize.write ((((c).__setattr__)).ap ((pystring "mid_age")) ((pyint 45)))
                          bogusForceDataize.write ((((c).__delattr__)).ap ((pystring "mid_age")))
                          (((unsupported)).ap ((((((c).getPeople)).ap).and (((hasattr)).ap ((c)) ((pystring "mid_age"))))))
                  (((unsupported)).ap ((((testCheck)).ap)))