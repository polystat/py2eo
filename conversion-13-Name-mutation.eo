+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xlen preface.xlen
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xint preface.xint
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > conversion-13
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xint > dummy-xint
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xtest
      seq > @
        stdout "conversion-13\n"
        write.
          xtest
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e5
                cage 0 > e7
                cage 0 > e0
                cage 0 > e4
                cage 0 > e3
                cage 0 > xz
                cage 0 > xy2
                cage 0 > e6
                cage 0 > lhs0
                cage 0 > xx
                cage 0 > e1
                cage 0 > e8
                cage 0 > lhs2
                cage 0 > e2
                cage 0 > lhs7
                seq > @
                  stdout "xtest\n"
                  (xx).write ((pyfloat 5.15))
                  (xx).force
                  (xy2).write ((pyfloat 3.14))
                  (xy2).force
                  mkCopy (xx) > tmp1
                  (lhs0).write (tmp1.copy)
                  (e0).write (pycomplex (((xx)).as-float) (((xy)).as-float))
                  ((e0).<)
                  (e1).write (((lhs0).pow (e0)))
                  (e1).force
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xz).write (tmp2.copy)
                  mkCopy (xz.x__class__) > tmp3
                  (e2).write (tmp3.copy)
                  ((e2).<)
                  mkCopy (xcomplex) > tmp4
                  (lhs2).write (tmp4.copy)
                  (e3).write (((e2).eq (lhs2)))
                  (e3).force
                  ((e3).<)
                  (e3).as-bool.if
                    seq
                      mkCopy (xz.ximag) > tmp5
                      (e4).write (tmp5.copy)
                      ((e4).<)
                      mkCopy (e4.x__class__) > tmp6
                      (e5).write (tmp6.copy)
                      ((e5).<)
                      mkCopy (xz.xreal) > tmp7
                      (e6).write (tmp7.copy)
                      ((e6).<)
                      mkCopy (e6.x__class__) > tmp8
                      (e7).write (tmp8.copy)
                      ((e7).<)
                      (e8).write (((e5).eq (e7)))
                      (e8).force
                      ((e8).<)
                      (pybool TRUE)
                    seq
                      (lhs7).write ((pybool FALSE))
                      (lhs7).force
                      mkCopy (lhs7) > tmp9
                      (e8).write (tmp9.copy)
                      (pybool TRUE)
                  toReturn.write ((e8))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xtest)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  (goto (apply.@)).result > @