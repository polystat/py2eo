+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xlen preface.xlen
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xint preface.xint
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > assert-2
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xint > dummy-xint
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xcheck
      seq > @
        stdout "assert-2\n"
        write.
          xcheck
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e12
                cage 0 > xe
                cage 0 > lhs4
                cage 0 > e7
                cage 0 > e10
                cage 0 > xcaught
                cage 0 > e15
                cage 0 > e11
                cage 0 > xresult
                cage 0 > e13
                cage 0 > e8
                cage 0 > e16
                cage 0 > xmark2
                cage 0 > e14
                cage 0 > e9
                cage 0 > xmark1
                cage 0 > xavg
                seq > @
                  stdout "xcheck\n"
                  write.
                    xavg
                    []
                      [xmarksNotCopied] > apply
                        [stackUp] > @
                          cage 0 > tmp
                          cage 0 > toReturn
                          xmarksNotCopied' > xmarks
                          cage 0 > e1
                          cage 0 > e5
                          cage 0 > e0
                          cage 0 > e4
                          cage 0 > e3
                          cage 0 > e2
                          cage 0 > e6
                          cage 0 > lhs0
                          seq > @
                            stdout "xavg\n"
                            xmarks.<
                            tmp.write (goto ((((xlen)).apply ((xmarks))).@))
                            (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                            (e1).write (tmp.result)
                            ((e1).<)
                            (lhs0).write ((pyint 0))
                            (lhs0).force
                            (e2).write (((e1).neq (lhs0)))
                            (e2).force
                            ((e2).<)
                            (e3).write (((e2).not))
                            (e3).force
                            ((e3).<)
                            (e3).if
                              seq
                                tmp.write (goto ((((xAssertionError)).apply ((pystring "List is empty."))).@))
                                (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                (e0).write (tmp.result)
                                ((e0).<)
                                stackUp.forward (e0)
                                (pybool TRUE)
                              seq
                                (pybool TRUE)
                            tmp.write (goto ((((xsum)).apply ((xmarks))).@))
                            (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                            (e4).write (tmp.result)
                            ((e4).<)
                            tmp.write (goto ((((xlen)).apply ((xmarks))).@))
                            (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                            (e5).write (tmp.result)
                            ((e5).<)
                            tmp.write (((e4).float-div (e5)))
                            (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                            (e6).write (tmp.result)
                            ((e6).<)
                            toReturn.write ((e6))
                            stackUp.forward (return toReturn)
                            123
                  mkCopy (xfalse) > tmp1
                  (xresult).write (tmp1.copy)
                  xcaught.write (pybool TRUE)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        cage 0 > xcurrent-exception
                        cage 0 > xexcinexc
                        cage 0 > tmp
                        seq > @
                          tmp.write (goto ((((xmyArray)).apply ((* (pyint 55) (pyint 88) (pyint 78) (pyint 90) (pyint 79)))).@))
                          (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                          (e7).write (tmp.result)
                          ((e7).<)
                          mkCopy (e7) > tmp2
                          (xmark2).write (tmp2.copy)
                          tmp.write (goto ((((xavg)).apply ((xmark2))).@))
                          (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                          (e8).write (tmp.result)
                          ((e8).<)
                          tmp.write (goto ((((xmyArray)).apply ((*))).@))
                          (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                          (e9).write (tmp.result)
                          ((e9).<)
                          mkCopy (e9) > tmp3
                          (xmark1).write (tmp3.copy)
                          tmp.write (goto ((((xavg)).apply ((xmark1))).@))
                          (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                          (e10).write (tmp.result)
                          ((e10).<)
                          stackUp.forward raiseNothing
                  seq
                    write.
                      xexcinexc
                      goto
                        [stackUp]
                          if. > @
                            is-exception (xcurrent-exception.x__class__.x__id__)
                            seq
                              mkCopy (xcurrent-exception.x__class__) > tmp4
                              (e13).write (tmp4.copy)
                              ((e13).<)
                              mkCopy (e13.x__id__) > tmp5
                              (e14).write (tmp5.copy)
                              ((e14).<)
                              mkCopy (xAssertionError.x__id__) > tmp6
                              (e15).write (tmp6.copy)
                              ((e15).<)
                              (e16).write (((e14).eq (e15)))
                              (e16).force
                              ((e16).<)
                              (e16).if
                                seq
                                  mkCopy (xcurrent-exception) > tmp7
                                  (xe).write (tmp7.copy)
                                  tmp.write (goto ((((xstr)).apply ((xe))).@))
                                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                  (e11).write (tmp.result)
                                  ((e11).<)
                                  (lhs4).write ((pystring "List is empty."))
                                  (lhs4).force
                                  (e12).write (((e11).eq (lhs4)))
                                  (e12).force
                                  ((e12).<)
                                  mkCopy (e12) > tmp8
                                  (xresult).write (tmp8.copy)
                                  (xcaught).write ((pybool TRUE))
                                  (xcaught).force
                                  (pybool TRUE)
                                seq
                                  (pybool TRUE)
                              xcaught.if (stackUp.forward raiseNothing) (stackUp.forward xcurrent-exception)
                              0
                            seq
                              (stackUp.forward xcurrent-exception)
                              0
                    xexcinexc.x__class__.x__id__
                    if.
                      xcurrent-exception.x__class__.x__id__.eq (raiseNothing.x__class__.x__id__)
                      seq
                        0
                      0
                    ((is-break-continue-return (xcurrent-exception.x__class__.x__id__)).or ((is-exception (xcurrent-exception.x__class__.x__id__)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                    ((is-break-continue-return (xexcinexc.x__class__.x__id__)).or ((is-exception (xexcinexc.x__class__.x__id__)))).if (stackUp.forward xexcinexc) 0
                  toReturn.write ((xresult))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xcheck)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @