+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xint preface.xint
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > comparison-1
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xint > dummy-xint
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xcomp1
      seq > @
        stdout "comparison-1\n"
        write.
          xcomp1
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > lhs18
                cage 0 > xlhs9
                cage 0 > xlhs1
                cage 0 > e1
                cage 0 > e5
                cage 0 > e7
                cage 0 > lhs17
                cage 0 > xlhs12
                cage 0 > lhs21
                cage 0 > e0
                cage 0 > xlhs0
                cage 0 > e4
                cage 0 > e8
                cage 0 > e3
                cage 0 > xlhs11
                cage 0 > lhs16
                cage 0 > xlhs7
                cage 0 > e2
                cage 0 > lhs15
                cage 0 > xlhs6
                cage 0 > xlhs10
                cage 0 > e6
                cage 0 > lhs20
                cage 0 > lhs25
                cage 0 > lhs14
                cage 0 > xlhs5
                cage 0 > lhs13
                cage 0 > xlhs4
                cage 0 > lhs24
                cage 0 > lhs22
                cage 0 > xlhs3
                cage 0 > lhs23
                cage 0 > xlhs2
                cage 0 > lhs19
                cage 0 > lhs26
                cage 0 > xlhs8
                seq > @
                  stdout "xcomp1\n"
                  (xlhs0).write ((pyint 1))
                  (xlhs0).force
                  (xlhs1).write ((pybool TRUE))
                  (xlhs1).force
                  (xlhs1).as-bool.if
                    seq
                      (xlhs2).write ((pyint 4))
                      (xlhs2).force
                      mkCopy (xlhs1) > tmp1
                      (lhs13).write (tmp1.copy)
                      (lhs13).as-bool.if
                        seq
                          (e0).write (((xlhs0).leq (xlhs2)))
                          (e0).force
                          ((e0).<)
                          (pybool TRUE)
                        seq
                          (lhs14).write ((pybool FALSE))
                          (lhs14).force
                          mkCopy (lhs14) > tmp2
                          (e0).write (tmp2.copy)
                          (pybool TRUE)
                      mkCopy (e0) > tmp3
                      (xlhs1).write (tmp3.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (xlhs1).as-bool.if
                    seq
                      (xlhs3).write ((pyint 4))
                      (xlhs3).force
                      mkCopy (xlhs1) > tmp4
                      (lhs15).write (tmp4.copy)
                      (lhs15).as-bool.if
                        seq
                          (e1).write (((xlhs2).eq (xlhs3)))
                          (e1).force
                          ((e1).<)
                          (pybool TRUE)
                        seq
                          (lhs16).write ((pybool FALSE))
                          (lhs16).force
                          mkCopy (lhs16) > tmp5
                          (e1).write (tmp5.copy)
                          (pybool TRUE)
                      mkCopy (e1) > tmp6
                      (xlhs1).write (tmp6.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (xlhs1).as-bool.if
                    seq
                      (xlhs4).write ((pyint 3))
                      (xlhs4).force
                      mkCopy (xlhs1) > tmp7
                      (lhs17).write (tmp7.copy)
                      (lhs17).as-bool.if
                        seq
                          (e2).write (((xlhs3).greater (xlhs4)))
                          (e2).force
                          ((e2).<)
                          (pybool TRUE)
                        seq
                          (lhs18).write ((pybool FALSE))
                          (lhs18).force
                          mkCopy (lhs18) > tmp8
                          (e2).write (tmp8.copy)
                          (pybool TRUE)
                      mkCopy (e2) > tmp9
                      (xlhs1).write (tmp9.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (xlhs1).as-bool.if
                    seq
                      (xlhs5).write ((pyint 4))
                      (xlhs5).force
                      mkCopy (xlhs1) > tmp10
                      (lhs19).write (tmp10.copy)
                      (lhs19).as-bool.if
                        seq
                          (e3).write (((xlhs4).less (xlhs5)))
                          (e3).force
                          ((e3).<)
                          (pybool TRUE)
                        seq
                          (lhs20).write ((pybool FALSE))
                          (lhs20).force
                          mkCopy (lhs20) > tmp11
                          (e3).write (tmp11.copy)
                          (pybool TRUE)
                      mkCopy (e3) > tmp12
                      (xlhs1).write (tmp12.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (xlhs1).as-bool.if
                    seq
                      (e4).write (((pyint 1).neg))
                      (e4).force
                      ((e4).<)
                      mkCopy (e4) > tmp13
                      (xlhs6).write (tmp13.copy)
                      mkCopy (xlhs1) > tmp14
                      (lhs21).write (tmp14.copy)
                      (lhs21).as-bool.if
                        seq
                          (e5).write (((xlhs5).neq (xlhs6)))
                          (e5).force
                          ((e5).<)
                          (pybool TRUE)
                        seq
                          (lhs22).write ((pybool FALSE))
                          (lhs22).force
                          mkCopy (lhs22) > tmp15
                          (e5).write (tmp15.copy)
                          (pybool TRUE)
                      mkCopy (e5) > tmp16
                      (xlhs1).write (tmp16.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (xlhs1).as-bool.if
                    seq
                      (xlhs7).write ((pyint 1))
                      (xlhs7).force
                      (xlhs8).write ((pybool TRUE))
                      (xlhs8).force
                      (xlhs8).as-bool.if
                        seq
                          (xlhs9).write ((pyint 4))
                          (xlhs9).force
                          mkCopy (xlhs8) > tmp17
                          (lhs23).write (tmp17.copy)
                          (lhs23).as-bool.if
                            seq
                              (e6).write (((xlhs7).leq (xlhs9)))
                              (e6).force
                              ((e6).<)
                              (pybool TRUE)
                            seq
                              (lhs24).write ((pybool FALSE))
                              (lhs24).force
                              mkCopy (lhs24) > tmp18
                              (e6).write (tmp18.copy)
                              (pybool TRUE)
                          mkCopy (e6) > tmp19
                          (xlhs8).write (tmp19.copy)
                          (pybool TRUE)
                        seq
                          (pybool TRUE)
                      (xlhs8).as-bool.if
                        seq
                          (xlhs10).write ((pyint 1))
                          (xlhs10).force
                          mkCopy (xlhs8) > tmp20
                          (lhs25).write (tmp20.copy)
                          (lhs25).as-bool.if
                            seq
                              (e7).write (((xlhs9).less (xlhs10)))
                              (e7).force
                              ((e7).<)
                              (pybool TRUE)
                            seq
                              (lhs26).write ((pybool FALSE))
                              (lhs26).force
                              mkCopy (lhs26) > tmp21
                              (e7).write (tmp21.copy)
                              (pybool TRUE)
                          mkCopy (e7) > tmp22
                          (xlhs8).write (tmp22.copy)
                          (pybool TRUE)
                        seq
                          (pybool TRUE)
                      (e8).write (((xlhs8).not))
                      (e8).force
                      ((e8).<)
                      mkCopy (e8) > tmp23
                      (xlhs11).write (tmp23.copy)
                      (pybool TRUE)
                    seq
                      (xlhs12).write ((pybool FALSE))
                      (xlhs12).force
                      mkCopy (xlhs12) > tmp24
                      (xlhs11).write (tmp24.copy)
                      (pybool TRUE)
                  toReturn.write ((xlhs11))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xcomp1)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  (goto (apply.@)).result > @