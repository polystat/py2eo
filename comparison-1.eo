+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.gray.cage
+alias pyint preface.pyint
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit

[unused] > comparison-1
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        [unused] > apply
          seq > @
            cur.write (cur.is-empty.if (5) (cur.add (1)))
            (pyint cur)
      [] > raiseEmpty
        [] > xclass
          (pyint 4) > xid
      [res] > return
        res > result
        [] > xclass
          (pyint 3) > xid
      [] > break
        [] > xclass
          (pyint 2) > xid
      [] > continue
        [] > xclass
          (pyint 1) > xid
      [] > raiseNothing
        [] > xclass
          (pyint 0) > xid
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      cage > xcurrent-exception
      cage > xcaught
      pyint 0 > dummy-int-usage
      pybool TRUE > dummy-bool-usage
      pystring (sprintf "") > dummy-bool-string
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (pyint (self.value.length)))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xcomp1
      seq > @
        stdout "comparison-1\n"
        write.
          xcomp1
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > lhs18
                cage > e1
                cage > lhs14
                cage > lhs17
                cage > lhs21
                cage > e0
                cage > lhs10
                cage > lhs22
                cage > lhs9
                cage > lhs16
                cage > lhs11
                cage > lhs3
                cage > lhs15
                cage > e6
                cage > lhs20
                cage > lhs0
                cage > lhs25
                cage > lhs4
                cage > e5
                cage > lhs1
                cage > e7
                cage > lhs5
                cage > e4
                cage > lhs13
                cage > lhs24
                cage > e8
                cage > lhs2
                cage > lhs8
                cage > e3
                cage > lhs6
                cage > lhs23
                cage > lhs12
                cage > lhs19
                cage > lhs26
                cage > e2
                cage > lhs7
                seq > @
                  stdout "xcomp1\n"
                  (lhs0).write ((pyint 1))
                  (lhs0).force
                  (lhs1).write ((pybool TRUE))
                  (lhs1).force
                  (lhs1).if
                    seq
                      (lhs2).write ((pyint 4))
                      (lhs2).force
                      mkCopy (lhs1) > tmp1
                      (lhs13).write (tmp1.copy)
                      (lhs13).if
                        seq
                          (e0).write (((lhs0).leq (lhs2)))
                          (e0).force
                          ((e0).<)
                          (pybool TRUE)
                        seq
                          (lhs14).write ((pybool FALSE))
                          (lhs14).force
                          mkCopy (lhs14) > tmp2
                          (e0).write (tmp2.copy)
                          (pybool TRUE)
                      mkCopy (e0) > tmp3
                      (lhs1).write (tmp3.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs3).write ((pyint 4))
                      (lhs3).force
                      mkCopy (lhs1) > tmp4
                      (lhs15).write (tmp4.copy)
                      (lhs15).if
                        seq
                          (e1).write (((lhs2).eq (lhs3)))
                          (e1).force
                          ((e1).<)
                          (pybool TRUE)
                        seq
                          (lhs16).write ((pybool FALSE))
                          (lhs16).force
                          mkCopy (lhs16) > tmp5
                          (e1).write (tmp5.copy)
                          (pybool TRUE)
                      mkCopy (e1) > tmp6
                      (lhs1).write (tmp6.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs4).write ((pyint 3))
                      (lhs4).force
                      mkCopy (lhs1) > tmp7
                      (lhs17).write (tmp7.copy)
                      (lhs17).if
                        seq
                          (e2).write (((lhs3).greater (lhs4)))
                          (e2).force
                          ((e2).<)
                          (pybool TRUE)
                        seq
                          (lhs18).write ((pybool FALSE))
                          (lhs18).force
                          mkCopy (lhs18) > tmp8
                          (e2).write (tmp8.copy)
                          (pybool TRUE)
                      mkCopy (e2) > tmp9
                      (lhs1).write (tmp9.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs5).write ((pyint 4))
                      (lhs5).force
                      mkCopy (lhs1) > tmp10
                      (lhs19).write (tmp10.copy)
                      (lhs19).if
                        seq
                          (e3).write (((lhs4).less (lhs5)))
                          (e3).force
                          ((e3).<)
                          (pybool TRUE)
                        seq
                          (lhs20).write ((pybool FALSE))
                          (lhs20).force
                          mkCopy (lhs20) > tmp11
                          (e3).write (tmp11.copy)
                          (pybool TRUE)
                      mkCopy (e3) > tmp12
                      (lhs1).write (tmp12.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (e4).write (((pyint 1).neg))
                      (e4).force
                      ((e4).<)
                      mkCopy (e4) > tmp13
                      (lhs6).write (tmp13.copy)
                      mkCopy (lhs1) > tmp14
                      (lhs21).write (tmp14.copy)
                      (lhs21).if
                        seq
                          (e5).write (((lhs5).neq (lhs6)))
                          (e5).force
                          ((e5).<)
                          (pybool TRUE)
                        seq
                          (lhs22).write ((pybool FALSE))
                          (lhs22).force
                          mkCopy (lhs22) > tmp15
                          (e5).write (tmp15.copy)
                          (pybool TRUE)
                      mkCopy (e5) > tmp16
                      (lhs1).write (tmp16.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs7).write ((pyint 1))
                      (lhs7).force
                      (lhs8).write ((pybool TRUE))
                      (lhs8).force
                      (lhs8).if
                        seq
                          (lhs9).write ((pyint 4))
                          (lhs9).force
                          mkCopy (lhs8) > tmp17
                          (lhs23).write (tmp17.copy)
                          (lhs23).if
                            seq
                              (e6).write (((lhs7).leq (lhs9)))
                              (e6).force
                              ((e6).<)
                              (pybool TRUE)
                            seq
                              (lhs24).write ((pybool FALSE))
                              (lhs24).force
                              mkCopy (lhs24) > tmp18
                              (e6).write (tmp18.copy)
                              (pybool TRUE)
                          mkCopy (e6) > tmp19
                          (lhs8).write (tmp19.copy)
                          (pybool TRUE)
                        seq
                          (pybool TRUE)
                      (lhs8).if
                        seq
                          (lhs10).write ((pyint 1))
                          (lhs10).force
                          mkCopy (lhs8) > tmp20
                          (lhs25).write (tmp20.copy)
                          (lhs25).if
                            seq
                              (e7).write (((lhs9).less (lhs10)))
                              (e7).force
                              ((e7).<)
                              (pybool TRUE)
                            seq
                              (lhs26).write ((pybool FALSE))
                              (lhs26).force
                              mkCopy (lhs26) > tmp21
                              (e7).write (tmp21.copy)
                              (pybool TRUE)
                          mkCopy (e7) > tmp22
                          (lhs8).write (tmp22.copy)
                          (pybool TRUE)
                        seq
                          (pybool TRUE)
                      (e8).write (((lhs8).not))
                      (e8).force
                      ((e8).<)
                      mkCopy (e8) > tmp23
                      (lhs11).write (tmp23.copy)
                      (pybool TRUE)
                    seq
                      (lhs12).write ((pybool FALSE))
                      (lhs12).force
                      mkCopy (lhs12) > tmp24
                      (lhs11).write (tmp24.copy)
                      (pybool TRUE)
                  toReturn.write ((lhs11))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xcomp1)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @