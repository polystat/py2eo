+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > comparison-1
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.length))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xcomp1
      seq > @
        stdout "comparison-1\n"
        write.
          xcomp1
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > lhs18
                cage > e1
                cage > lhs14
                cage > lhs17
                cage > lhs21
                cage > e0
                cage > lhs10
                cage > lhs22
                cage > lhs9
                cage > lhs16
                cage > lhs11
                cage > lhs3
                cage > lhs15
                cage > e6
                cage > lhs20
                cage > lhs0
                cage > lhs25
                cage > lhs4
                cage > e5
                cage > lhs1
                cage > e7
                cage > lhs5
                cage > e4
                cage > lhs13
                cage > lhs24
                cage > e8
                cage > lhs2
                cage > lhs8
                cage > e3
                cage > lhs6
                cage > lhs23
                cage > lhs12
                cage > lhs19
                cage > lhs26
                cage > e2
                cage > lhs7
                seq > @
                  stdout "xcomp1\n"
                  (lhs0).write (1)
                  (lhs1).write (TRUE)
                  (lhs1).if
                    seq
                      (lhs2).write (4)
                      mkCopy (lhs1) > tmp1
                      (lhs13).write (tmp1.copy)
                      (lhs13).if
                        seq
                          [] > tmp2
                            memory > dddata
                            dddata.write (((lhs0).leq (lhs2))) > @
                          (e0).write (tmp2.dddata)
                          ((e0).<)
                          TRUE
                        seq
                          (lhs14).write (FALSE)
                          mkCopy (lhs14) > tmp3
                          (e0).write (tmp3.copy)
                          TRUE
                      mkCopy (e0) > tmp4
                      (lhs1).write (tmp4.copy)
                      TRUE
                    seq
                      TRUE
                  (lhs1).if
                    seq
                      (lhs3).write (4)
                      mkCopy (lhs1) > tmp5
                      (lhs15).write (tmp5.copy)
                      (lhs15).if
                        seq
                          [] > tmp6
                            memory > dddata
                            dddata.write (((lhs2).eq (lhs3))) > @
                          (e1).write (tmp6.dddata)
                          ((e1).<)
                          TRUE
                        seq
                          (lhs16).write (FALSE)
                          mkCopy (lhs16) > tmp7
                          (e1).write (tmp7.copy)
                          TRUE
                      mkCopy (e1) > tmp8
                      (lhs1).write (tmp8.copy)
                      TRUE
                    seq
                      TRUE
                  (lhs1).if
                    seq
                      (lhs4).write (3)
                      mkCopy (lhs1) > tmp9
                      (lhs17).write (tmp9.copy)
                      (lhs17).if
                        seq
                          [] > tmp10
                            memory > dddata
                            dddata.write (((lhs3).greater (lhs4))) > @
                          (e2).write (tmp10.dddata)
                          ((e2).<)
                          TRUE
                        seq
                          (lhs18).write (FALSE)
                          mkCopy (lhs18) > tmp11
                          (e2).write (tmp11.copy)
                          TRUE
                      mkCopy (e2) > tmp12
                      (lhs1).write (tmp12.copy)
                      TRUE
                    seq
                      TRUE
                  (lhs1).if
                    seq
                      (lhs5).write (4)
                      mkCopy (lhs1) > tmp13
                      (lhs19).write (tmp13.copy)
                      (lhs19).if
                        seq
                          [] > tmp14
                            memory > dddata
                            dddata.write (((lhs4).less (lhs5))) > @
                          (e3).write (tmp14.dddata)
                          ((e3).<)
                          TRUE
                        seq
                          (lhs20).write (FALSE)
                          mkCopy (lhs20) > tmp15
                          (e3).write (tmp15.copy)
                          TRUE
                      mkCopy (e3) > tmp16
                      (lhs1).write (tmp16.copy)
                      TRUE
                    seq
                      TRUE
                  (lhs1).if
                    seq
                      [] > tmp17
                        memory > dddata
                        dddata.write ((1.neg)) > @
                      (e4).write (tmp17.dddata)
                      ((e4).<)
                      mkCopy (e4) > tmp18
                      (lhs6).write (tmp18.copy)
                      mkCopy (lhs1) > tmp19
                      (lhs21).write (tmp19.copy)
                      (lhs21).if
                        seq
                          [] > tmp20
                            memory > dddata
                            dddata.write (((lhs5).neq (lhs6))) > @
                          (e5).write (tmp20.dddata)
                          ((e5).<)
                          TRUE
                        seq
                          (lhs22).write (FALSE)
                          mkCopy (lhs22) > tmp21
                          (e5).write (tmp21.copy)
                          TRUE
                      mkCopy (e5) > tmp22
                      (lhs1).write (tmp22.copy)
                      TRUE
                    seq
                      TRUE
                  (lhs1).if
                    seq
                      (lhs7).write (1)
                      (lhs8).write (TRUE)
                      (lhs8).if
                        seq
                          (lhs9).write (4)
                          mkCopy (lhs8) > tmp23
                          (lhs23).write (tmp23.copy)
                          (lhs23).if
                            seq
                              [] > tmp24
                                memory > dddata
                                dddata.write (((lhs7).leq (lhs9))) > @
                              (e6).write (tmp24.dddata)
                              ((e6).<)
                              TRUE
                            seq
                              (lhs24).write (FALSE)
                              mkCopy (lhs24) > tmp25
                              (e6).write (tmp25.copy)
                              TRUE
                          mkCopy (e6) > tmp26
                          (lhs8).write (tmp26.copy)
                          TRUE
                        seq
                          TRUE
                      (lhs8).if
                        seq
                          (lhs10).write (1)
                          mkCopy (lhs8) > tmp27
                          (lhs25).write (tmp27.copy)
                          (lhs25).if
                            seq
                              [] > tmp28
                                memory > dddata
                                dddata.write (((lhs9).less (lhs10))) > @
                              (e7).write (tmp28.dddata)
                              ((e7).<)
                              TRUE
                            seq
                              (lhs26).write (FALSE)
                              mkCopy (lhs26) > tmp29
                              (e7).write (tmp29.copy)
                              TRUE
                          mkCopy (e7) > tmp30
                          (lhs8).write (tmp30.copy)
                          TRUE
                        seq
                          TRUE
                      [] > tmp31
                        memory > dddata
                        dddata.write (((lhs8).not)) > @
                      (e8).write (tmp31.dddata)
                      ((e8).<)
                      mkCopy (e8) > tmp32
                      (lhs11).write (tmp32.copy)
                      TRUE
                    seq
                      (lhs12).write (FALSE)
                      mkCopy (lhs12) > tmp33
                      (lhs11).write (tmp33.copy)
                      TRUE
                  toReturn.write ((lhs11))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xcomp1)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @