+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xlen preface.xlen
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xrange preface.xrange
+junit

[unused] > comparison-1
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyIntClass > xint
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xcomp1
      seq > @
        stdout "comparison-1\n"
        write.
          xcomp1
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > lhs18
                cage 0 > e1
                cage 0 > lhs14
                cage 0 > lhs17
                cage 0 > lhs21
                cage 0 > e0
                cage 0 > lhs10
                cage 0 > lhs22
                cage 0 > lhs9
                cage 0 > lhs16
                cage 0 > lhs11
                cage 0 > lhs3
                cage 0 > lhs15
                cage 0 > e6
                cage 0 > lhs20
                cage 0 > lhs0
                cage 0 > lhs25
                cage 0 > lhs4
                cage 0 > e5
                cage 0 > lhs1
                cage 0 > e7
                cage 0 > lhs5
                cage 0 > e4
                cage 0 > lhs13
                cage 0 > lhs24
                cage 0 > e8
                cage 0 > lhs2
                cage 0 > lhs8
                cage 0 > e3
                cage 0 > lhs6
                cage 0 > lhs23
                cage 0 > lhs12
                cage 0 > lhs19
                cage 0 > lhs26
                cage 0 > e2
                cage 0 > lhs7
                seq > @
                  stdout "xcomp1\n"
                  (lhs0).write ((pyint 1))
                  (lhs0).force
                  (lhs1).write ((pybool TRUE))
                  (lhs1).force
                  (lhs1).if
                    seq
                      (lhs2).write ((pyint 4))
                      (lhs2).force
                      mkCopy (lhs1) > tmp29
                      (lhs13).write (tmp29.copy)
                      (lhs13).if
                        seq
                          (e0).write (((lhs0).leq (lhs2)))
                          (e0).force
                          ((e0).<)
                          (pybool TRUE)
                        seq
                          (lhs14).write ((pybool FALSE))
                          (lhs14).force
                          mkCopy (lhs14) > tmp30
                          (e0).write (tmp30.copy)
                          (pybool TRUE)
                      mkCopy (e0) > tmp31
                      (lhs1).write (tmp31.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs3).write ((pyint 4))
                      (lhs3).force
                      mkCopy (lhs1) > tmp32
                      (lhs15).write (tmp32.copy)
                      (lhs15).if
                        seq
                          (e1).write (((lhs2).eq (lhs3)))
                          (e1).force
                          ((e1).<)
                          (pybool TRUE)
                        seq
                          (lhs16).write ((pybool FALSE))
                          (lhs16).force
                          mkCopy (lhs16) > tmp33
                          (e1).write (tmp33.copy)
                          (pybool TRUE)
                      mkCopy (e1) > tmp34
                      (lhs1).write (tmp34.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs4).write ((pyint 3))
                      (lhs4).force
                      mkCopy (lhs1) > tmp35
                      (lhs17).write (tmp35.copy)
                      (lhs17).if
                        seq
                          (e2).write (((lhs3).greater (lhs4)))
                          (e2).force
                          ((e2).<)
                          (pybool TRUE)
                        seq
                          (lhs18).write ((pybool FALSE))
                          (lhs18).force
                          mkCopy (lhs18) > tmp36
                          (e2).write (tmp36.copy)
                          (pybool TRUE)
                      mkCopy (e2) > tmp37
                      (lhs1).write (tmp37.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs5).write ((pyint 4))
                      (lhs5).force
                      mkCopy (lhs1) > tmp38
                      (lhs19).write (tmp38.copy)
                      (lhs19).if
                        seq
                          (e3).write (((lhs4).less (lhs5)))
                          (e3).force
                          ((e3).<)
                          (pybool TRUE)
                        seq
                          (lhs20).write ((pybool FALSE))
                          (lhs20).force
                          mkCopy (lhs20) > tmp39
                          (e3).write (tmp39.copy)
                          (pybool TRUE)
                      mkCopy (e3) > tmp40
                      (lhs1).write (tmp40.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (e4).write (((pyint 1).neg))
                      (e4).force
                      ((e4).<)
                      mkCopy (e4) > tmp41
                      (lhs6).write (tmp41.copy)
                      mkCopy (lhs1) > tmp42
                      (lhs21).write (tmp42.copy)
                      (lhs21).if
                        seq
                          (e5).write (((lhs5).neq (lhs6)))
                          (e5).force
                          ((e5).<)
                          (pybool TRUE)
                        seq
                          (lhs22).write ((pybool FALSE))
                          (lhs22).force
                          mkCopy (lhs22) > tmp43
                          (e5).write (tmp43.copy)
                          (pybool TRUE)
                      mkCopy (e5) > tmp44
                      (lhs1).write (tmp44.copy)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  (lhs1).if
                    seq
                      (lhs7).write ((pyint 1))
                      (lhs7).force
                      (lhs8).write ((pybool TRUE))
                      (lhs8).force
                      (lhs8).if
                        seq
                          (lhs9).write ((pyint 4))
                          (lhs9).force
                          mkCopy (lhs8) > tmp45
                          (lhs23).write (tmp45.copy)
                          (lhs23).if
                            seq
                              (e6).write (((lhs7).leq (lhs9)))
                              (e6).force
                              ((e6).<)
                              (pybool TRUE)
                            seq
                              (lhs24).write ((pybool FALSE))
                              (lhs24).force
                              mkCopy (lhs24) > tmp46
                              (e6).write (tmp46.copy)
                              (pybool TRUE)
                          mkCopy (e6) > tmp47
                          (lhs8).write (tmp47.copy)
                          (pybool TRUE)
                        seq
                          (pybool TRUE)
                      (lhs8).if
                        seq
                          (lhs10).write ((pyint 1))
                          (lhs10).force
                          mkCopy (lhs8) > tmp48
                          (lhs25).write (tmp48.copy)
                          (lhs25).if
                            seq
                              (e7).write (((lhs9).less (lhs10)))
                              (e7).force
                              ((e7).<)
                              (pybool TRUE)
                            seq
                              (lhs26).write ((pybool FALSE))
                              (lhs26).force
                              mkCopy (lhs26) > tmp49
                              (e7).write (tmp49.copy)
                              (pybool TRUE)
                          mkCopy (e7) > tmp50
                          (lhs8).write (tmp50.copy)
                          (pybool TRUE)
                        seq
                          (pybool TRUE)
                      (e8).write (((lhs8).not))
                      (e8).force
                      ((e8).<)
                      mkCopy (e8) > tmp51
                      (lhs11).write (tmp51.copy)
                      (pybool TRUE)
                    seq
                      (lhs12).write ((pybool FALSE))
                      (lhs12).force
                      mkCopy (lhs12) > tmp52
                      (lhs11).write (tmp52.copy)
                      (pybool TRUE)
                  toReturn.write ((lhs11))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xcomp1)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @