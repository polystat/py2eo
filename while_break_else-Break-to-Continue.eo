+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyslice preface.pyslice
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias xfakeclasses preface.xfakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xtuple preface.xtuple
+alias xint preface.xint
+alias xfloat preface.xfloat
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xBaseException preface.xBaseException
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > while_break_else
  (pystring "while_break_else") > x__name__
  [] > ap
    (pystring "while_break_else") > x__name__
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > ap
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyslice 0 0 0 > dummy-pyslice-usage
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      xfakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xtuple > dummy-xtuple
      xint > dummy-xint
      xfloat > dummy-xfloat
      xStopIteration > dummy-stop-iteration
      xBaseException > dummy-base-exception
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xwhile_continue_else
      seq > @
        stdout "while_break_else\n"
        write.
          xwhile_continue_else
          []
            (pystring "xwhile_continue_else") > x__name__
            [] > ap
              (pystring "xwhile_continue_else") > x__name__
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > xn
                cage 0 > e12
                cage 0 > e1
                cage 0 > lhs14
                cage 0 > lhs17
                cage 0 > e0
                cage 0 > lhs10
                cage 0 > lhs13
                cage 0 > e8
                cage 0 > xres
                cage 0 > e14
                cage 0 > lhs12
                cage 0 > e15
                cage 0 > e6
                cage 0 > lhs0
                cage 0 > lhs4
                cage 0 > e5
                cage 0 > lhs1
                cage 0 > e7
                cage 0 > e4
                cage 0 > e13
                cage 0 > e3
                cage 0 > lhs6
                cage 0 > e10
                cage 0 > doElse0
                cage 0 > lhs3
                cage 0 > e9
                cage 0 > e2
                cage 0 > lhs7
                cage 0 > e11
                seq > @
                  stdout "xwhile_continue_else\n"
                  (xn).write ((pyint 5))
                  (xn).force
                  tmp.write (goto ((((xmyArray)).ap ((pybool TRUE)) ((*))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xres).write (tmp1.copy)
                  (doElse0).write ((pybool FALSE))
                  (doElse0).force
                  write.
                    tmp
                    goto
                      [stackUp]
                        seq > @
                          (pybool TRUE).as-bool.while
                            [unused]
                              cage 0 > tmp
                              seq > @
                                write.
                                  tmp
                                  goto
                                    [stackUp]
                                      cage 0 > tmp
                                      seq > @
                                        (e7).write (((xn).greater (pyint 0)))
                                        (e7).force
                                        ((e7).<)
                                        ((e7).not).as-bool.if
                                          seq
                                            (doElse0).write ((pybool TRUE))
                                            (doElse0).force
                                            stackUp.forward break
                                            (pybool TRUE)
                                          seq
                                            (pybool TRUE)
                                        (e1).write (((xn).sub (pyint 1)))
                                        (e1).force
                                        ((e1).<)
                                        mkCopy (e1) > tmp2
                                        (xn).write (tmp2.copy)
                                        (e2).write (((xn).eq (pyint 2)))
                                        (e2).force
                                        ((e2).<)
                                        (e2).as-bool.if
                                          seq
                                            stackUp.forward continue
                                            (pybool TRUE)
                                          seq
                                            (pybool TRUE)
                                        mkCopy (xres.xappend) > tmp3
                                        (e3).write (tmp3.copy)
                                        ((e3).<)
                                        mkCopy (xres) > tmp4
                                        (lhs0).write (tmp4.copy)
                                        mkCopy (xn) > tmp5
                                        (lhs1).write (tmp5.copy)
                                        tmp.write (goto ((((e3)).ap ((lhs0)) ((lhs1))).@))
                                        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                        (e4).write (tmp.result)
                                        ((e4).<)
                                        stackUp.forward continue
                                        123
                                (tmp.x__class__.x__id__.neq (continue.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                0
                          stackUp.forward raiseNothing
                  if.
                    tmp.x__class__.x__id__.neq (break.x__class__.x__id__)
                    stackUp.forward tmp
                    0
                  (doElse0).as-bool.if
                    seq
                      mkCopy (xres.xappend) > tmp6
                      (e5).write (tmp6.copy)
                      ((e5).<)
                      mkCopy (xres) > tmp7
                      (lhs3).write (tmp7.copy)
                      (lhs4).write ((pyint 6))
                      (lhs4).force
                      tmp.write (goto ((((e5)).ap ((lhs3)) ((lhs4))).@))
                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                      (e6).write (tmp.result)
                      ((e6).<)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  mkCopy (xres.x__contains__) > tmp8
                  (e8).write (tmp8.copy)
                  ((e8).<)
                  mkCopy (xres) > tmp9
                  (lhs6).write (tmp9.copy)
                  (lhs7).write ((pyint 6))
                  (lhs7).force
                  tmp.write (goto ((((e8)).ap ((lhs6)) ((lhs7))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e9).write (tmp.result)
                  ((e9).<)
                  (e10).write (((e9).not))
                  (e10).force
                  ((e10).<)
                  (e10).as-bool.if
                    seq
                      mkCopy (xres) > tmp10
                      (lhs10).write (tmp10.copy)
                      tmp.write (goto ((((xmyArray)).ap ((pybool TRUE)) ((* (pyint 4) (pyint 3)))).@))
                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                      (e11).write (tmp.result)
                      ((e11).<)
                      (e12).write (((lhs10).eq (e11)))
                      (e12).force
                      ((e12).<)
                      (pybool TRUE)
                    seq
                      (lhs12).write ((pybool FALSE))
                      (lhs12).force
                      mkCopy (lhs12) > tmp11
                      (e12).write (tmp11.copy)
                      (pybool TRUE)
                  (e12).as-bool.if
                    seq
                      mkCopy (xres.x__contains__) > tmp12
                      (e13).write (tmp12.copy)
                      ((e13).<)
                      mkCopy (xres) > tmp13
                      (lhs13).write (tmp13.copy)
                      (lhs14).write ((pyint 2))
                      (lhs14).force
                      tmp.write (goto ((((e13)).ap ((lhs13)) ((lhs14))).@))
                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                      (e14).write (tmp.result)
                      ((e14).<)
                      (e15).write (((e14).not))
                      (e15).force
                      ((e15).<)
                      (pybool TRUE)
                    seq
                      (lhs17).write ((pybool FALSE))
                      (lhs17).force
                      mkCopy (lhs17) > tmp14
                      (e15).write (tmp14.copy)
                      (pybool TRUE)
                  toReturn.write ((e15))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xwhile_continue_else)).ap).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  seq > @
    (goto (ap.@)).result