+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > conditional-1
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.length))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xcond1
      seq > @
        stdout "conditional-1\n"
        write.
          xcond1
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > lhs0
                cage > lhs1
                cage > e0
                seq > @
                  stdout "xcond1\n"
                  (lhs0).write (FALSE)
                  (lhs0).if
                    seq
                      [] > tmp1
                        memory > dddata
                        dddata.write ((1.eq 0)) > @
                      (e0).write (tmp1.dddata)
                      ((e0).<)
                      TRUE
                    seq
                      (lhs1).write (1)
                      mkCopy (lhs1) > tmp2
                      (e0).write (tmp2.copy)
                      TRUE
                  toReturn.write ((e0))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xcond1)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @