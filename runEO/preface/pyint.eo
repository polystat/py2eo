+package preface
+alias pybool preface.pybool
+alias pyfloat preface.pyfloat
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias fakeclasses preface.fakeclasses

[value] > pyint

  fakeclasses.pyIntClass > x__class__

  [x] > eq
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pybool (value.eq (x.value))
        p.fst.eq (p.snd)

  [x] > neq
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pybool (value.neq (x.value))
        p.fst.neq (p.snd)

  [x] > less
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pybool (value.less (x.value))
        p.fst.less (p.snd)

  [x] > leq
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pybool (value.leq (x.value))
        p.fst.leq (p.snd)

  [x] > greater
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pybool (value.greater (x.value))
        p.fst.greater (p.snd)

  [x] > geq
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pybool (value.geq (x.value))
        p.fst.geq (p.snd)

  [x] > pow
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.pow (x.value))
        p.fst.pow (p.snd)

  [x] > and
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.and (x.value))
        p.fst.and (p.snd)

  [x] > or
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.or (x.value))
        p.fst.or (p.snd)

  [x] > xor
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.xor (x.value))
        p.fst.xor (p.snd)

  [x] > add
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.add (x.value))
        p.fst.add (p.snd)

  [x] > mul
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.mul (x.value))
        p.fst.mul (p.snd)

  [x] > div
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.div (x.value))
        p.fst.div (p.snd)

  [x] > mod
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.mod (x.value))
        p.fst.mod (p.snd)

  [x] > sub
    fakeclasses.convert (pyint value) x > p
    seq > @
      if.
        (fakeclasses.has-type x (fakeclasses.pyIntClass))
        pyint (value.sub (x.value))
        p.fst.sub (p.snd)

  [x] > left
    pyint (value.left (x.value)) > @

  [x] > right
    pyint (value.right (x.value)) > @

  # Negation of $
  [] > neg
    pyint (value.neg) > @

  [] > as-string
    value.as-string > @

  [] > as-float
    pyfloat (value.as-float) > @

  [] > force
    value > @

  seq > @
    stdout (sprintf "dataizing value %d\n" value)
    value

