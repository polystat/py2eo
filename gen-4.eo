+package org.eolang
+junit
memory > xrange
memory > xStopIteration
memory > xy
memory > xmyArray
memory > xsum
memory > xx
[] > gen-4
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xtest
        seq > @
          xtest.write
            []
              memory > xsquare
              memory > xfibonacci_numbers
              seq > @
                seq
                  xfibonacci_numbers.write
                    [xnums]
                      memory > x_
                      memory > xit0
                      seq > @
                        seq
                          (((unsupported)).apply ((((xmyArray)).apply ((((unsupported)).apply ((xx)) ((xy)))))) ((((xmyArray)).apply ((((unsupported)).apply (0) (1))))))
                          seq
                            xit0.write ((((((xrange)).apply ((xnums))).x__iter__)).apply)
                            (((unsupported)).apply ((xStopIteration)))
                              while.
                                TRUE
                                [unused]
                                  seq > @
                                    seq
                                      x_.write ((((xit0).x__next__)).apply)
                                      seq
                                        (((unsupported)).apply ((((xmyArray)).apply ((((unsupported)).apply ((xx)) ((xy)))))) ((((xmyArray)).apply ((((unsupported)).apply ((xy)) (((xx).add (xy))))))))
                                        (((unsupported)).apply ((xx)))
                  xsquare.write
                    [xnums]
                      memory > xnum
                      memory > xit1
                      seq > @
                        seq
                          xit1.write ((((xnums).x__iter__)).apply)
                          (((unsupported)).apply ((xStopIteration)))
                            while.
                              TRUE
                              [unused]
                                seq > @
                                  seq
                                    xnum.write ((((xit1).x__next__)).apply)
                                    (((unsupported)).apply (((xnum).pow 2)))
                  (((unsupported)).apply (((((xsum)).apply ((((xsquare)).apply ((((xfibonacci_numbers)).apply (10)))))).eq 4895)))