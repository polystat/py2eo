+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xlen preface.xlen
+alias xlist preface.xlist
+alias xint preface.xint
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xrange preface.xrange
+junit

[unused] > nested_for_break_continue
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xlist > dummy-xlist
      xint > dummy-xint
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xnested_for_break_continue
      seq > @
        stdout "nested_for_break_continue\n"
        write.
          xnested_for_break_continue
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e1
                cage 0 > e5
                cage 0 > e17
                cage 0 > xinn0
                cage 0 > xinn1
                cage 0 > xit1
                cage 0 > xres
                cage 0 > e21
                cage 0 > e10
                cage 0 > xcaught
                cage 0 > e15
                cage 0 > e22
                cage 0 > xflag
                cage 0 > e19
                cage 0 > e6
                cage 0 > e18
                cage 0 > lhs0
                cage 0 > xnum2
                cage 0 > xnums2
                cage 0 > e12
                cage 0 > lhs1
                cage 0 > e7
                cage 0 > xnum
                cage 0 > e0
                cage 0 > e20
                cage 0 > e4
                cage 0 > e13
                cage 0 > e8
                cage 0 > e16
                cage 0 > lhs8
                cage 0 > e3
                cage 0 > e14
                cage 0 > xit0
                cage 0 > lhs3
                cage 0 > e9
                cage 0 > e2
                cage 0 > e11
                seq > @
                  stdout "xnested_for_break_continue\n"
                  (xflag).write ((pybool FALSE))
                  (xflag).force
                  tmp.write (goto ((((xmyArray)).apply ((* (pyint 1) (pyint 2) (pyint 3) (pyint 4)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xnums2).write (tmp1.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* (pyint 1) (pyint 4) (pyint 9) (pyint 16)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xnums2).write (tmp2.copy)
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e2).write (tmp.result)
                  ((e2).<)
                  mkCopy (e2) > tmp3
                  (xres).write (tmp3.copy)
                  mkCopy (xnums) > tmp4
                  (xinn0).write (tmp4.copy)
                  tmp.write (goto (((((xinn0).x__iter__)).apply ((xinn0))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  mkCopy (e3) > tmp5
                  (xit0).write (tmp5.copy)
                  xcaught.write (pybool TRUE)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        cage 0 > xcurrent-exception
                        cage 0 > xexcinexc
                        cage 0 > tmp
                        seq > @
                          write.
                            tmp
                            goto
                              [stackUp]
                                seq > @
                                  (pybool TRUE).while
                                    [unused]
                                      cage 0 > tmp
                                      seq > @
                                        write.
                                          tmp
                                          goto
                                            [stackUp]
                                              cage 0 > tmp
                                              seq > @
                                                tmp.write (goto (((((xit0).x__next__)).apply ((xit0))).@))
                                                (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                (e4).write (tmp.result)
                                                ((e4).<)
                                                mkCopy (e4) > tmp6
                                                (xnum).write (tmp6.copy)
                                                mkCopy (xnums2) > tmp7
                                                (xinn1).write (tmp7.copy)
                                                tmp.write (goto (((((xinn1).x__iter__)).apply ((xinn1))).@))
                                                (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                (e5).write (tmp.result)
                                                ((e5).<)
                                                mkCopy (e5) > tmp8
                                                (xit1).write (tmp8.copy)
                                                xcaught.write (pybool TRUE)
                                                write.
                                                  xcurrent-exception
                                                  goto
                                                    [stackUp]
                                                      cage 0 > xcurrent-exception
                                                      cage 0 > xexcinexc
                                                      cage 0 > tmp
                                                      seq > @
                                                        write.
                                                          tmp
                                                          goto
                                                            [stackUp]
                                                              seq > @
                                                                (pybool TRUE).while
                                                                  [unused]
                                                                    cage 0 > tmp
                                                                    seq > @
                                                                      write.
                                                                        tmp
                                                                        goto
                                                                          [stackUp]
                                                                            cage 0 > tmp
                                                                            seq > @
                                                                              tmp.write (goto (((((xit1).x__next__)).apply ((xit1))).@))
                                                                              (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                                              (e6).write (tmp.result)
                                                                              ((e6).<)
                                                                              mkCopy (e6) > tmp9
                                                                              (xnum2).write (tmp9.copy)
                                                                              (e7).write (((xnum).eq (pyint 3)))
                                                                              (e7).force
                                                                              ((e7).<)
                                                                              (e7).if
                                                                                seq
                                                                                  (e8).write (((xnum2).eq (pyint 9)))
                                                                                  (e8).force
                                                                                  ((e8).<)
                                                                                  (pybool TRUE)
                                                                                seq
                                                                                  (lhs0).write ((pybool FALSE))
                                                                                  (lhs0).force
                                                                                  mkCopy (lhs0) > tmp10
                                                                                  (e8).write (tmp10.copy)
                                                                                  (pybool TRUE)
                                                                              (e8).if
                                                                                seq
                                                                                  stackUp.forward continue
                                                                                  (pybool TRUE)
                                                                                seq
                                                                                  (pybool TRUE)
                                                                              mkCopy (xres) > tmp11
                                                                              (lhs1).write (tmp11.copy)
                                                                              (e9).write (((xnum2).add (xnum)))
                                                                              (e9).force
                                                                              ((e9).<)
                                                                              tmp.write (goto (((((xres).xappend)).apply ((lhs1)) ((e9))).@))
                                                                              (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                                              (e10).write (tmp.result)
                                                                              ((e10).<)
                                                                              (e11).write (((xnum).eq (pyint 7)))
                                                                              (e11).force
                                                                              ((e11).<)
                                                                              (e11).if
                                                                                seq
                                                                                  (e12).write (((xnum2).eq (pyint 49)))
                                                                                  (e12).force
                                                                                  ((e12).<)
                                                                                  (pybool TRUE)
                                                                                seq
                                                                                  (lhs3).write ((pybool FALSE))
                                                                                  (lhs3).force
                                                                                  mkCopy (lhs3) > tmp12
                                                                                  (e12).write (tmp12.copy)
                                                                                  (pybool TRUE)
                                                                              (e12).if
                                                                                seq
                                                                                  (xflag).write ((pybool TRUE))
                                                                                  (xflag).force
                                                                                  stackUp.forward break
                                                                                  (pybool TRUE)
                                                                                seq
                                                                                  (pybool TRUE)
                                                                              stackUp.forward continue
                                                                              123
                                                                      (tmp.x__class__.x__id__.neq (continue.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                                      0
                                                                stackUp.forward raiseNothing
                                                        if.
                                                          tmp.x__class__.x__id__.neq (break.x__class__.x__id__)
                                                          stackUp.forward tmp
                                                          0
                                                        stackUp.forward raiseNothing
                                                seq
                                                  write.
                                                    xexcinexc
                                                    goto
                                                      [stackUp]
                                                        if. > @
                                                          is-exception (xcurrent-exception.x__class__.x__id__)
                                                          seq
                                                            mkCopy (xcurrent-exception.x__class__) > tmp13
                                                            (e13).write (tmp13.copy)
                                                            ((e13).<)
                                                            mkCopy (e13.x__id__) > tmp14
                                                            (e14).write (tmp14.copy)
                                                            ((e14).<)
                                                            mkCopy (xStopIteration.x__id__) > tmp15
                                                            (e15).write (tmp15.copy)
                                                            ((e15).<)
                                                            (e16).write (((e14).eq (e15)))
                                                            (e16).force
                                                            ((e16).<)
                                                            (e16).if
                                                              seq
                                                                (xcaught).write ((pybool TRUE))
                                                                (xcaught).force
                                                                (pybool TRUE)
                                                              seq
                                                                (pybool TRUE)
                                                            xcaught.if (stackUp.forward raiseNothing) (stackUp.forward xcurrent-exception)
                                                            0
                                                          seq
                                                            (stackUp.forward xcurrent-exception)
                                                            0
                                                  xexcinexc.x__class__.x__id__
                                                  if.
                                                    xcurrent-exception.x__class__.x__id__.eq (raiseNothing.x__class__.x__id__)
                                                    seq
                                                      0
                                                    0
                                                  ((is-break-continue-return (xcurrent-exception.x__class__.x__id__)).or ((is-exception (xcurrent-exception.x__class__.x__id__)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                                                  ((is-break-continue-return (xexcinexc.x__class__.x__id__)).or ((is-exception (xexcinexc.x__class__.x__id__)))).if (stackUp.forward xexcinexc) 0
                                                (xflag).if
                                                  seq
                                                    stackUp.forward break
                                                    (pybool TRUE)
                                                  seq
                                                    (pybool TRUE)
                                                stackUp.forward continue
                                                123
                                        (tmp.x__class__.x__id__.neq (continue.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                        0
                                  stackUp.forward raiseNothing
                          if.
                            tmp.x__class__.x__id__.neq (break.x__class__.x__id__)
                            stackUp.forward tmp
                            0
                          stackUp.forward raiseNothing
                  seq
                    write.
                      xexcinexc
                      goto
                        [stackUp]
                          if. > @
                            is-exception (xcurrent-exception.x__class__.x__id__)
                            seq
                              mkCopy (xcurrent-exception.x__class__) > tmp16
                              (e17).write (tmp16.copy)
                              ((e17).<)
                              mkCopy (e17.x__id__) > tmp17
                              (e18).write (tmp17.copy)
                              ((e18).<)
                              mkCopy (xStopIteration.x__id__) > tmp18
                              (e19).write (tmp18.copy)
                              ((e19).<)
                              (e20).write (((e18).eq (e19)))
                              (e20).force
                              ((e20).<)
                              (e20).if
                                seq
                                  (xcaught).write ((pybool TRUE))
                                  (xcaught).force
                                  (pybool TRUE)
                                seq
                                  (pybool TRUE)
                              xcaught.if (stackUp.forward raiseNothing) (stackUp.forward xcurrent-exception)
                              0
                            seq
                              (stackUp.forward xcurrent-exception)
                              0
                    xexcinexc.x__class__.x__id__
                    if.
                      xcurrent-exception.x__class__.x__id__.eq (raiseNothing.x__class__.x__id__)
                      seq
                        0
                      0
                    ((is-break-continue-return (xcurrent-exception.x__class__.x__id__)).or ((is-exception (xcurrent-exception.x__class__.x__id__)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                    ((is-break-continue-return (xexcinexc.x__class__.x__id__)).or ((is-exception (xexcinexc.x__class__.x__id__)))).if (stackUp.forward xexcinexc) 0
                  mkCopy (xres) > tmp19
                  (lhs8).write (tmp19.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* (pyint 2) (pyint 5) (pyint 10) (pyint 17) (pyint 3) (pyint 6) (pyint 11) (pyint 18) (pyint 4) (pyint 7) (pyint 19) (pyint 5) (pyint 8) (pyint 13) (pyint 20)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e21).write (tmp.result)
                  ((e21).<)
                  (e22).write (((lhs8).eq (e21)))
                  (e22).force
                  ((e22).<)
                  toReturn.write ((e22))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xnested_for_break_continue)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @