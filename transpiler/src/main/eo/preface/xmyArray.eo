+package preface
+alias cage org.eolang.cage
+alias goto org.eolang.goto
+alias xStopIteration preface.xStopIteration
+alias mkCopy preface.mkCopy
+alias pyint preface.pyint
+alias pybool preface.pybool
+alias return preface.return
+alias xfakeclasses preface.xfakeclasses
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf

[] > xmyArray
  [initValue] > apply
    [stackUp] > @
      cage result > pResult
      [] > result
        cage initValue > value
        xfakeclasses.pyListClass > x__class__
        [] > to-my-array
          pResult > @
        [x] > with-value
          (goto ((xmyArray.apply x).@)).result > @
        [] > xlength
          [self] > apply
            [stackUp] > @
              seq > @
                stackUp.forward (return (pyint (self.value.length)))
                123
        [i] > get
          (value.get (i.value)) > @
        [] > sum
          memory 0 > i
          memory 0 > acc
          while.
            i.lt (value.length)
            [unused]
              acc.plus acc ((value.get i).value) > @
          (pyint acc) > @
        [] > xappend
          [self x] > apply
            [stackUp] > @
              seq > @
                x
                mkCopy (x.value) > tmpx
                mkCopy (self.value) > tmp
                self.value.write (tmp.copy.with (x.with-value (tmpx.copy)))
                stackUp.forward (return 0)
                123
        [] > xremove
          [self what] > apply
            [stackUp] > @
              memory FALSE > removed
              (goto ((xmyArray.apply (*)).@)).result > accum
              memory 0 > i
              seq > @
                (i.lt (self.value.length)).while
                  [unused]
                    self.value.get i > x
                    seq > @
                      ((x.eq what).value.and (removed.not)).if
                        removed.write TRUE
                        (goto ((accum.xappend.apply accum x).@)).result
                      i.write (i.plus 1)
                self.value.write (accum.value)
                stackUp.forward (return 0)
                123
        [] > xclear
          [self] > apply
            [stackUp] > @
              seq > @
                self.value.write (*)
                stackUp.forward (return 0)
                123
        [x] > eq
          memory TRUE > acc
          memory 0 > pos
          if. > res
            ((x.x__class__.eq (xfakeclasses.pyListClass)).value.and (value.length.eq (x.value.length)))
            seq
              (acc.and (pos.lt (value.length))).while
                [unused]
                  seq > @
                    acc.write (acc.and (((value.get pos).eq (x.value.get pos)).value))
                    pos.write (pos.plus 1)
                    123
              pybool acc
            pybool FALSE
          seq > @
            res
            stdout "after\n"
            res
        [self elt] > contains-common
          seq > result
            stdout (sprintf "len = %d\n" (self.value.length))
            self.value.reduce
              FALSE
              [acc item]
                seq > @
                  acc.or ((elt.eq item).value)
          seq > @
            stdout (sprintf "len = %d\n" (self.value.length))
            pybool result
        [] > x__contains__
          [self elt] > apply
            [stackUp] > @
              stackUp.forward (return (contains-common self elt)) > @
        [elt] > contains-hack
          seq > result
            stdout (sprintf "len = %d\n" (value.length))
            value.reduce
              FALSE
              [acc item]
                seq > @
                  acc.or ((elt.eq item).value)
          seq > @
            stdout (sprintf "len = %d\n" (value.length))
            pybool result
        [] > iter
          memory 0 > curPos
          [] > x__next__
            [self] > apply
              [stackUp] > @
                memory (self.curPos) > pos
                seq > @
                  pos.write (self.curPos)
                  self.curPos.write (pos.plus 1)
                  if.
                    pos.eq (value.length)
                    stackUp.forward ((goto (xStopIteration.apply.@)).result)
                    stackUp.forward (return (value.get (pos)))
                  123
        [] > x__iter__
          [self] > apply
            [stackUp] > @
              stackUp.forward (return iter) > @

      seq > @
        pResult.write result
        stackUp.forward (return pResult)
