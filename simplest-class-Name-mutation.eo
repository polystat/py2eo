+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > simplest-class
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.length))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xmyC
      seq > @
        stdout "simplest-class\n"
        write.
          xmyC
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > lhs0
                cage > e1
                cage > xc
                cage > e4
                cage > lhs2
                cage > e3
                cage > xo2
                cage > e2
                seq > @
                  stdout "xmyC\n"
                  write.
                    xc
                    []
                      newUID.apply 0 > xid
                      [] > apply
                        [stackUp] > @
                          cage > pResult
                          [] > result
                            cage > xvalue
                            cage > xgetValue
                            xc > xclass
                            seq > initFields
                              xvalue.write "None: is there a None literal in the EO language?"
                              write.
                                xgetValue
                                []
                                  [xselfNotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      cage > toReturn
                                      xselfNotCopied' > xself
                                      cage > e0
                                      seq > @
                                        stdout "xgetValue\n"
                                        xself.<
                                        mkCopy (xself.xvalue) > tmp1
                                        (e0).write (tmp1.copy)
                                        ((e0).<)
                                        toReturn.write ((e0))
                                        stackUp.forward (return toReturn)
                                        123
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xc)).apply).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xo2).write (tmp2.copy)
                  ((xo).xvalue).write (11)
                  mkCopy (xo.xgetValue) > tmp3
                  (e2).write (tmp3.copy)
                  ((e2).<)
                  mkCopy (xo) > tmp4
                  (lhs0).write (tmp4.copy)
                  tmp.write (goto ((((e2)).apply ((lhs0))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  (lhs2).write (11)
                  [] > tmp5
                    memory > dddata
                    dddata.write (((e3).eq (lhs2))) > @
                  (e4).write (tmp5.dddata)
                  ((e4).<)
                  toReturn.write ((e4))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xmyC)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @