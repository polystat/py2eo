+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.gray.cage
+alias pyint preface.pyint
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit

[unused] > my_range
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        [unused] > apply
          seq > @
            cur.write (cur.is-empty.if (5) (cur.add (1)))
            (pyint cur)
      [] > raiseEmpty
        [] > xclass
          (pyint 4) > xid
      [res] > return
        res > result
        [] > xclass
          (pyint 3) > xid
      [] > break
        [] > xclass
          (pyint 2) > xid
      [] > continue
        [] > xclass
          (pyint 1) > xid
      [] > raiseNothing
        [] > xclass
          (pyint 0) > xid
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      cage > xcurrent-exception
      cage > xcaught
      pyint 0 > dummy-int-usage
      pybool TRUE > dummy-bool-usage
      pystring (sprintf "") > dummy-bool-string
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (pyint (self.value.length)))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xmyRange
      seq > @
        stdout "my_range\n"
        write.
          xmyRange
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e18
                cage > e12
                cage > e7
                cage > e17
                cage > xMyRange
                cage > e20
                cage > xStopIteration
                cage > lhs13
                cage > e10
                cage > e14
                cage > xcaught
                cage > e15
                cage > e19
                cage > lhs5
                cage > xr
                cage > e13
                cage > e8
                cage > e16
                cage > e21
                cage > lhs9
                cage > xz
                cage > lhs11
                cage > lhs3
                cage > e9
                cage > lhs7
                cage > e11
                seq > @
                  stdout "xmyRange\n"
                  write.
                    xStopIteration
                    []
                      newUID.apply 0 > xid
                      [] > apply
                        [stackUp] > @
                          cage > pResult
                          [] > result
                            xStopIteration > xclass
                            seq > initFields
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  write.
                    xMyRange
                    []
                      newUID.apply 0 > xid
                      [xa xb] > apply
                        [stackUp] > @
                          cage > pResult
                          [] > result
                            cage > xi
                            cage > xlast
                            cage > x__init__
                            cage > x__iter__
                            cage > x__next__
                            xMyRange > xclass
                            seq > initFields
                              xi.write (pyint 0)
                              xlast.write (pyint 1)
                              write.
                                x__init__
                                []
                                  [xselfNotCopied xaNotCopied xbNotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      cage > toReturn
                                      xselfNotCopied' > xself
                                      xaNotCopied' > xa
                                      xbNotCopied' > xb
                                      seq > @
                                        stdout "x__init__\n"
                                        xself.<
                                        xa.<
                                        xb.<
                                        mkCopy (xa) > tmp1
                                        ((xself).xi).write (tmp1.copy)
                                        mkCopy (xb) > tmp2
                                        ((xself).xlast).write (tmp2.copy)
                                        123
                              write.
                                x__iter__
                                []
                                  [xselfNotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      cage > toReturn
                                      xselfNotCopied' > xself
                                      seq > @
                                        stdout "x__iter__\n"
                                        xself.<
                                        toReturn.write ((xself))
                                        stackUp.forward (return toReturn)
                                        123
                              write.
                                x__next__
                                []
                                  [xselfNotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      cage > toReturn
                                      xselfNotCopied' > xself
                                      cage > e1
                                      cage > xret
                                      cage > e5
                                      cage > e0
                                      cage > e4
                                      cage > e3
                                      cage > e2
                                      cage > e6
                                      cage > lhs0
                                      seq > @
                                        stdout "x__next__\n"
                                        xself.<
                                        mkCopy (xself.xi) > tmp3
                                        (e4).write (tmp3.copy)
                                        ((e4).<)
                                        mkCopy (xself.xlast) > tmp4
                                        (e5).write (tmp4.copy)
                                        ((e5).<)
                                        (e6).write (((e4).eq (e5)))
                                        (e6).force
                                        ((e6).<)
                                        (e6).if
                                          seq
                                            tmp.write (goto ((((xStopIteration)).apply).@))
                                            (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                            (e0).write (tmp.result)
                                            ((e0).<)
                                            stackUp.forward (e0)
                                            (pybool TRUE)
                                          seq
                                            mkCopy (xself.xi) > tmp5
                                            (e1).write (tmp5.copy)
                                            ((e1).<)
                                            mkCopy (e1) > tmp6
                                            (xret).write (tmp6.copy)
                                            mkCopy (xself.xi) > tmp7
                                            (e2).write (tmp7.copy)
                                            ((e2).<)
                                            (lhs0).write ((pyint 1))
                                            (lhs0).force
                                            (e3).write (((e2).add (lhs0)))
                                            (e3).force
                                            ((e3).<)
                                            mkCopy (e3) > tmp8
                                            ((xself).xi).write (tmp8.copy)
                                            toReturn.write ((xret))
                                            stackUp.forward (return toReturn)
                                            (pybool TRUE)
                                        123
                          seq (result.initFields) (pResult.write result) (goto ((result.x__init__.apply pResult xa xb).@)) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xMyRange)).apply ((pyint 0)) ((pyint 2))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e7).write (tmp.result)
                  ((e7).<)
                  mkCopy (e7) > tmp9
                  (xr).write (tmp9.copy)
                  (xz).write ((pyint 1))
                  (xz).force
                  (xcaught).write ((pybool FALSE))
                  (xcaught).force
                  xcaught.write (pybool TRUE)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          mkCopy (xz) > tmp10
                          (lhs5).write (tmp10.copy)
                          mkCopy (xr.x__next__) > tmp11
                          (e8).write (tmp11.copy)
                          ((e8).<)
                          mkCopy (xr) > tmp12
                          (lhs3).write (tmp12.copy)
                          tmp.write (goto ((((e8)).apply ((lhs3))).@))
                          (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                          (e9).write (tmp.result)
                          ((e9).<)
                          (e10).write (((lhs5).add (e9)))
                          (e10).force
                          ((e10).<)
                          mkCopy (e10) > tmp13
                          (xz).write (tmp13.copy)
                          mkCopy (xz) > tmp14
                          (lhs9).write (tmp14.copy)
                          mkCopy (xr.x__next__) > tmp15
                          (e11).write (tmp15.copy)
                          ((e11).<)
                          mkCopy (xr) > tmp16
                          (lhs7).write (tmp16.copy)
                          tmp.write (goto ((((e11)).apply ((lhs7))).@))
                          (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                          (e12).write (tmp.result)
                          ((e12).<)
                          (e13).write (((lhs9).add (e12)))
                          (e13).force
                          ((e13).<)
                          mkCopy (e13) > tmp17
                          (xz).write (tmp17.copy)
                          mkCopy (xz) > tmp18
                          (lhs13).write (tmp18.copy)
                          mkCopy (xr.x__next__) > tmp19
                          (e14).write (tmp19.copy)
                          ((e14).<)
                          mkCopy (xr) > tmp20
                          (lhs11).write (tmp20.copy)
                          tmp.write (goto ((((e14)).apply ((lhs11))).@))
                          (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                          (e15).write (tmp.result)
                          ((e15).<)
                          (e16).write (((lhs13).add (e15)))
                          (e16).force
                          ((e16).<)
                          mkCopy (e16) > tmp21
                          (xz).write (tmp21.copy)
                          stackUp.forward raiseNothing
                  seq
                    if.
                      is-exception (xcurrent-exception.xclass.xid)
                      seq
                        mkCopy (xcurrent-exception.xclass) > tmp22
                        (e17).write (tmp22.copy)
                        ((e17).<)
                        mkCopy (e17.xid) > tmp23
                        (e18).write (tmp23.copy)
                        ((e18).<)
                        mkCopy (xStopIteration.xid) > tmp24
                        (e19).write (tmp24.copy)
                        ((e19).<)
                        (e20).write (((e18).eq (e19)))
                        (e20).force
                        ((e20).<)
                        (e20).if
                          seq
                            (xcaught).write ((pybool TRUE))
                            (xcaught).force
                            (pybool TRUE)
                          seq
                            (pybool TRUE)
                        0
                      0
                    if.
                      xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                      seq
                        0
                      0
                    ((is-break-continue-return (xcurrent-exception.xclass.xid)).or ((is-exception (xcurrent-exception.xclass.xid)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                  (e21).write (((xz).eq (pyint 1)))
                  (e21).force
                  ((e21).<)
                  toReturn.write ((e21))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xmyRange)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @