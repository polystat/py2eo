Diff between original (left) and mutated (right) python files
1c1
< def nested_for_break_continue_else(): # 1:0-20:26
---
> def nested_for_continue_continue_else(): # 1:0-20:26
11c11
<                     break # 11:20-11:24
---
>                     continue # 11:20-11:24
15c15
<             break # 15:12-15:16
---
>             continue # 15:12-15:16
18c18
<         break # 18:8-18:12
---
>         continue # 18:8-18:12

Diff between original (left) and mutated (right) eo files
2,4d1
< +alias goto org.eolang.gray.goto
< +alias stdout org.eolang.io.stdout
< +alias cage org.eolang.gray.cage
6,361c3,33
< 
< [unused] > nested_for_break_continue_else
<   [] > apply
<     [stackUp] > @
<       [x] > mkCopy
<         x' > copy
<         copy.< > @
<       [] > newUID
<         memory > cur
<         seq > apply
<           cur.write (cur.is-empty.if 5 (cur.add 1))
<           cur
<       [] > raiseEmpty
<         [] > xclass
<           4 > xid
<       [res] > return
<         res > result
<         [] > xclass
<           3 > xid
<       [] > break
<         [] > xclass
<           2 > xid
<       [] > continue
<         [] > xclass
<           1 > xid
<       [] > raiseNothing
<         [] > xclass
<           0 > xid
<       cage > xcurrent-exception
<       [] > xmyArray
<         [initValue] > apply
<           [stackUp] > @
<             cage > pResult
<             [] > result
<               cage > value
<               [] > xlength
<                 [self] > apply
<                   [stackUp] > @
<                     seq > @
<                       stackUp.forward (return (self.value.length))
<                       123
<               [] > xget
<                 [self i] > apply
<                   [stackUp] > @
<                     seq > @
<                       stackUp.forward (return (self.value.get i))
<                       123
<               [] > xappend
<                 [self x] > apply
<                   [stackUp] > @
<                     seq > @
<                       mkCopy (self.value) > tmp
<                       self.value.write (tmp.copy.append x)
<                       stackUp.forward (return 0)
<             seq > @
<               result.value.write initValue
<               pResult.write result
<               stackUp.forward (return pResult)
<       cage > tmp
<       cage > toReturn
<       cage > assertMe
<       cage > xnested_for_break_continue_else
<       seq > @
<         stdout "nested_for_break_continue_else\n"
<         write.
<           xnested_for_break_continue_else
<           []
<             [] > apply
<               [stackUp] > @
<                 cage > tmp
<                 cage > toReturn
<                 cage > e23
<                 cage > xit2
<                 cage > lhs10
<                 cage > xres
<                 cage > e21
<                 cage > e10
<                 cage > e25
<                 cage > lhs12
<                 cage > e9
<                 cage > xl1
<                 cage > e22
<                 cage > e19
<                 cage > e6
<                 cage > e18
<                 cage > lhs0
<                 cage > e29
<                 cage > e12
<                 cage > xj
<                 cage > e1
<                 cage > xl2
<                 cage > lhs4
<                 cage > e5
<                 cage > e28
<                 cage > e7
<                 cage > e17
<                 cage > xk
<                 cage > e0
<                 cage > e20
<                 cage > e4
<                 cage > e24
<                 cage > e13
<                 cage > lhs13
<                 cage > xit1
<                 cage > xl3
<                 cage > e8
<                 cage > e16
<                 cage > lhs2
<                 cage > lhs8
<                 cage > e27
<                 cage > e3
<                 cage > lhs6
<                 cage > e14
<                 cage > xit0
<                 cage > e15
<                 cage > xi
<                 cage > e2
<                 cage > e26
<                 cage > e11
<                 seq > @
<                   stdout "xnested_for_break_continue_else\n"
<                   (xres).write (FALSE)
<                   tmp.write (goto ((((xmyArray)).apply ((* 1 2 3))).@))
<                   (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                   (e0).write (tmp.result)
<                   ((e0).<)
<                   mkCopy (e0) > tmp1
<                   (xl1).write (tmp1.copy)
<                   tmp.write (goto ((((xmyArray)).apply ((* 10 20 30))).@))
<                   (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                   (e1).write (tmp.result)
<                   ((e1).<)
<                   mkCopy (e1) > tmp2
<                   (xl2).write (tmp2.copy)
<                   tmp.write (goto ((((xmyArray)).apply ((* 100 200 300))).@))
<                   (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                   (e2).write (tmp.result)
<                   ((e2).<)
<                   mkCopy (e2) > tmp3
<                   (xl3).write (tmp3.copy)
<                   mkCopy (xl1.x__iter__) > tmp4
<                   (e3).write (tmp4.copy)
<                   ((e3).<)
<                   mkCopy (xl1) > tmp5
<                   (lhs0).write (tmp5.copy)
<                   tmp.write (goto ((((e3)).apply ((lhs0))).@))
<                   (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                   (e4).write (tmp.result)
<                   ((e4).<)
<                   mkCopy (e4) > tmp6
<                   (xit0).write (tmp6.copy)
<                   write.
<                     xcurrent-exception
<                     goto
<                       [stackUp]
<                         seq > @
<                           write.
<                             xcurrent-exception
<                             goto
<                               [stackUp]
<                                 seq > @
<                                   TRUE.while
<                                     [unused]
<                                       seq > @
<                                         mkCopy (xit0.x__next__) > tmp7
<                                         (e5).write (tmp7.copy)
<                                         ((e5).<)
<                                         mkCopy (xit0) > tmp8
<                                         (lhs2).write (tmp8.copy)
<                                         tmp.write (goto ((((e5)).apply ((lhs2))).@))
<                                         (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                                         (e6).write (tmp.result)
<                                         ((e6).<)
<                                         mkCopy (e6) > tmp9
<                                         (xi).write (tmp9.copy)
<                                         mkCopy (xl2.x__iter__) > tmp10
<                                         (e7).write (tmp10.copy)
<                                         ((e7).<)
<                                         mkCopy (xl2) > tmp11
<                                         (lhs4).write (tmp11.copy)
<                                         tmp.write (goto ((((e7)).apply ((lhs4))).@))
<                                         (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                                         (e8).write (tmp.result)
<                                         ((e8).<)
<                                         mkCopy (e8) > tmp12
<                                         (xit1).write (tmp12.copy)
<                                         write.
<                                           xcurrent-exception
<                                           goto
<                                             [stackUp]
<                                               seq > @
<                                                 write.
<                                                   xcurrent-exception
<                                                   goto
<                                                     [stackUp]
<                                                       seq > @
<                                                         TRUE.while
<                                                           [unused]
<                                                             seq > @
<                                                               mkCopy (xit1.x__next__) > tmp13
<                                                               (e9).write (tmp13.copy)
<                                                               ((e9).<)
<                                                               mkCopy (xit1) > tmp14
<                                                               (lhs6).write (tmp14.copy)
<                                                               tmp.write (goto ((((e9)).apply ((lhs6))).@))
<                                                               (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                                                               (e10).write (tmp.result)
<                                                               ((e10).<)
<                                                               mkCopy (e10) > tmp15
<                                                               (xj).write (tmp15.copy)
<                                                               mkCopy (xl3.x__iter__) > tmp16
<                                                               (e11).write (tmp16.copy)
<                                                               ((e11).<)
<                                                               mkCopy (xl3) > tmp17
<                                                               (lhs8).write (tmp17.copy)
<                                                               tmp.write (goto ((((e11)).apply ((lhs8))).@))
<                                                               (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                                                               (e12).write (tmp.result)
<                                                               ((e12).<)
<                                                               mkCopy (e12) > tmp18
<                                                               (xit2).write (tmp18.copy)
<                                                               write.
<                                                                 xcurrent-exception
<                                                                 goto
<                                                                   [stackUp]
<                                                                     seq > @
<                                                                       write.
<                                                                         xcurrent-exception
<                                                                         goto
<                                                                           [stackUp]
<                                                                             seq > @
<                                                                               TRUE.while
<                                                                                 [unused]
<                                                                                   seq > @
<                                                                                     mkCopy (xit2.x__next__) > tmp19
<                                                                                     (e13).write (tmp19.copy)
<                                                                                     ((e13).<)
<                                                                                     mkCopy (xit2) > tmp20
<                                                                                     (lhs10).write (tmp20.copy)
<                                                                                     tmp.write (goto ((((e13)).apply ((lhs10))).@))
<                                                                                     (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<                                                                                     (e14).write (tmp.result)
<                                                                                     ((e14).<)
<                                                                                     mkCopy (e14) > tmp21
<                                                                                     (xk).write (tmp21.copy)
<                                                                                     [] > tmp22
<                                                                                       memory > dddata
<                                                                                       dddata.write (((xi).eq 2)) > @
<                                                                                     (e15).write (tmp22.dddata)
<                                                                                     ((e15).<)
<                                                                                     (e15).if
<                                                                                       seq
<                                                                                         [] > tmp23
<                                                                                           memory > dddata
<                                                                                           dddata.write (((xj).eq 20)) > @
<                                                                                         (e16).write (tmp23.dddata)
<                                                                                         ((e16).<)
<                                                                                         TRUE
<                                                                                       seq
<                                                                                         (lhs12).write (FALSE)
<                                                                                         mkCopy (lhs12) > tmp24
<                                                                                         (e16).write (tmp24.copy)
<                                                                                         TRUE
<                                                                                     (e16).if
<                                                                                       seq
<                                                                                         [] > tmp25
<                                                                                           memory > dddata
<                                                                                           dddata.write (((xk).eq 200)) > @
<                                                                                         (e17).write (tmp25.dddata)
<                                                                                         ((e17).<)
<                                                                                         TRUE
<                                                                                       seq
<                                                                                         (lhs13).write (FALSE)
<                                                                                         mkCopy (lhs13) > tmp26
<                                                                                         (e17).write (tmp26.copy)
<                                                                                         TRUE
<                                                                                     (e17).if
<                                                                                       seq
<                                                                                         (xres).write (TRUE)
<                                                                                         stackUp.forward break
<                                                                                         TRUE
<                                                                                       seq
<                                                                                         TRUE
<                                                                                     TRUE
<                                                                               stackUp.forward raiseNothing
<                                                                       if.
<                                                                         xcurrent-exception.xclass.xid.neq (break.xclass.xid)
<                                                                         stackUp.forward xcurrent-exception
<                                                                         0
<                                                                       stackUp.forward raiseNothing
<                                                               seq
<                                                                 mkCopy (xcurrent-exception.xclass) > tmp27
<                                                                 (e18).write (tmp27.copy)
<                                                                 ((e18).<)
<                                                                 mkCopy (e18.xid) > tmp28
<                                                                 (e19).write (tmp28.copy)
<                                                                 ((e19).<)
<                                                                 mkCopy (xStopIteration.xid) > tmp29
<                                                                 (e20).write (tmp29.copy)
<                                                                 ((e20).<)
<                                                                 [] > tmp30
<                                                                   memory > dddata
<                                                                   dddata.write (((e19).eq (e20))) > @
<                                                                 (e21).write (tmp30.dddata)
<                                                                 ((e21).<)
<                                                                 (e21).if
<                                                                   seq
<                                                                     TRUE
<                                                                   seq
<                                                                     TRUE
<                                                                 if.
<                                                                   xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
<                                                                   seq
<                                                                   0
<                                                                 (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
<                                                               stackUp.forward break
<                                                               TRUE
<                                                         stackUp.forward raiseNothing
<                                                 if.
<                                                   xcurrent-exception.xclass.xid.neq (break.xclass.xid)
<                                                   stackUp.forward xcurrent-exception
<                                                   0
<                                                 stackUp.forward raiseNothing
<                                         seq
<                                           mkCopy (xcurrent-exception.xclass) > tmp31
<                                           (e22).write (tmp31.copy)
<                                           ((e22).<)
<                                           mkCopy (e22.xid) > tmp32
<                                           (e23).write (tmp32.copy)
<                                           ((e23).<)
<                                           mkCopy (xStopIteration.xid) > tmp33
<                                           (e24).write (tmp33.copy)
<                                           ((e24).<)
<                                           [] > tmp34
<                                             memory > dddata
<                                             dddata.write (((e23).eq (e24))) > @
<                                           (e25).write (tmp34.dddata)
<                                           ((e25).<)
<                                           (e25).if
<                                             seq
<                                               TRUE
<                                             seq
<                                               TRUE
<                                           if.
<                                             xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
<                                             seq
<                                             0
<                                           (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
<                                         stackUp.forward break
<                                         TRUE
<                                   stackUp.forward raiseNothing
<                           if.
<                             xcurrent-exception.xclass.xid.neq (break.xclass.xid)
<                             stackUp.forward xcurrent-exception
<                             0
<                           stackUp.forward raiseNothing
---
> memory > xStopIteration
> memory > xmyArray
> [] > nested_for_break_continue_else
>   [args...] > unsupported
>   [args...] > xunsupported
>   memory > bogusForceDataize
>   memory > xbogusForceDataize
>   memory > xhack
>   seq > @
>     xhack.write
>       []
>         memory > xnested_for_continue_continue_else
>         seq > @
>           xnested_for_continue_continue_else.write
>             []
>               memory > xk
>               memory > xl2
>               memory > xl1
>               memory > xit0
>               memory > xl3
>               memory > xit1
>               memory > xi
>               memory > xres
>               memory > xit2
>               memory > xj
>               seq > @
>                 seq
>                   xres.write FALSE
>                   xl1.write (((xmyArray)).apply ((((unsupported)).apply (1) (2) (3))))
>                   xl2.write (((xmyArray)).apply ((((unsupported)).apply (10) (20) (30))))
>                   xl3.write (((xmyArray)).apply ((((unsupported)).apply (100) (200) (300))))
363,378c35,37
<                     mkCopy (xcurrent-exception.xclass) > tmp35
<                     (e26).write (tmp35.copy)
<                     ((e26).<)
<                     mkCopy (e26.xid) > tmp36
<                     (e27).write (tmp36.copy)
<                     ((e27).<)
<                     mkCopy (xStopIteration.xid) > tmp37
<                     (e28).write (tmp37.copy)
<                     ((e28).<)
<                     [] > tmp38
<                       memory > dddata
<                       dddata.write (((e27).eq (e28))) > @
<                     (e29).write (tmp38.dddata)
<                     ((e29).<)
<                     (e29).if
<                       seq
---
>                     xit0.write ((((xl1).x__iter__)).apply)
>                     (((unsupported)).apply ((xStopIteration)))
>                       while.
380,395c39,69
<                       seq
<                         TRUE
<                     if.
<                       xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
<                       seq
<                       0
<                     (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
<                   toReturn.write ((xres))
<                   stackUp.forward (return toReturn)
<                   123
<         tmp.write (goto ((((xnested_for_break_continue_else)).apply).@))
<         (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
<         (assertMe).write (tmp.result)
<         toReturn.write ((assertMe))
<         stackUp.forward (return toReturn)
<   (goto (apply.@)).result > @
\ No newline at end of file
---
>                         [unused]
>                           seq > @
>                             seq
>                               xi.write ((((xit0).x__next__)).apply)
>                               seq
>                                 seq
>                                   xit1.write ((((xl2).x__iter__)).apply)
>                                   (((unsupported)).apply ((xStopIteration)))
>                                     while.
>                                       TRUE
>                                       [unused]
>                                         seq > @
>                                           seq
>                                             xj.write ((((xit1).x__next__)).apply)
>                                             seq
>                                               seq
>                                                 xit2.write ((((xl3).x__iter__)).apply)
>                                                 (((unsupported)).apply ((xStopIteration)))
>                                                   while.
>                                                     TRUE
>                                                     [unused]
>                                                       seq > @
>                                                         seq
>                                                           xk.write ((((xit2).x__next__)).apply)
>                                                           ((((xi).eq 2).and ((xj).eq 20)).and ((xk).eq 200)).if
>                                                             seq
>                                                               xres.write TRUE
>                                                               (((unsupported)).apply)
>                                               (((unsupported)).apply)
>                                 (((unsupported)).apply)
>                   (((unsupported)).apply ((xres)))
\ No newline at end of file