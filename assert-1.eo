+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyslice preface.pyslice
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias xfakeclasses preface.xfakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xtuple preface.xtuple
+alias xint preface.xint
+alias xfloat preface.xfloat
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xBaseException preface.xBaseException
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > assert-1
  (pystring "assert-1") > x__name__
  [] > ap
    (pystring "assert-1") > x__name__
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > ap
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyslice 0 0 0 > dummy-pyslice-usage
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      xfakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xtuple > dummy-xtuple
      xint > dummy-xint
      xfloat > dummy-xfloat
      xStopIteration > dummy-stop-iteration
      xBaseException > dummy-base-exception
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xcheck
      seq > @
        stdout "assert-1\n"
        write.
          xcheck
          []
            (pystring "xcheck") > x__name__
            [] > ap
              (pystring "xcheck") > x__name__
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e6
                cage 0 > e12
                cage 0 > xe
                cage 0 > e5
                cage 0 > e7
                cage 0 > xres
                cage 0 > lhs8
                cage 0 > e10
                cage 0 > e14
                cage 0 > xcaught
                cage 0 > e9
                cage 0 > e15
                cage 0 > e17
                cage 0 > xk
                cage 0 > e4
                cage 0 > e13
                cage 0 > e8
                cage 0 > e16
                cage 0 > lhs7
                cage 0 > e11
                cage 0 > xdivide
                seq > @
                  stdout "xcheck\n"
                  write.
                    xdivide
                    []
                      (pystring "xdivide") > x__name__
                      [xxNotCopied xyNotCopied] > ap
                        (pystring "xdivide") > x__name__
                        [stackUp] > @
                          cage 0 > tmp
                          cage 0 > toReturn
                          xxNotCopied' > xx
                          xyNotCopied' > xy
                          cage 0 > e1
                          cage 0 > e0
                          cage 0 > e3
                          cage 0 > e2
                          seq > @
                            stdout "xdivide\n"
                            xx.<
                            xy.<
                            (e1).write (((xy).neq (pyint 0)))
                            (e1).force
                            ((e1).<)
                            (e2).write (((e1).not))
                            (e2).force
                            ((e2).<)
                            (e2).as-bool.if
                              seq
                                tmp.write (goto ((((xAssertionError)).ap ((pystring "Zero division"))).@))
                                (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                (e0).write (tmp.result)
                                ((e0).<)
                                stackUp.forward (e0)
                                (pybool TRUE)
                              seq
                                (pybool TRUE)
                            tmp.write (((xx).float-div (xy)))
                            (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                            (e3).write (tmp.result)
                            ((e3).<)
                            toReturn.write ((e3))
                            stackUp.forward (return toReturn)
                            stackUp.forward (return 0)
                            123
                  (xres).write ((pybool FALSE))
                  (xres).force
                  tmp.write (goto ((((xdivide)).ap ((pyint 21)) ((pyint 3))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e4).write (tmp.result)
                  ((e4).<)
                  mkCopy (e4) > tmp1
                  (xk).write (tmp1.copy)
                  xcaught.write (pybool FALSE)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        cage 0 > xcurrent-exception
                        cage 0 > xexcinexc
                        cage 0 > tmp
                        seq > @
                          tmp.write (goto ((((xdivide)).ap ((pyint 21)) ((pyint 0))).@))
                          (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                          (e5).write (tmp.result)
                          ((e5).<)
                          stackUp.forward raiseNothing
                  seq
                    write.
                      xexcinexc
                      goto
                        [stackUp]
                          if. > @
                            is-exception (xcurrent-exception.x__class__.x__id__)
                            seq
                              mkCopy (xcurrent-exception.x__class__) > tmp2
                              (e6).write (tmp2.copy)
                              ((e6).<)
                              mkCopy (e6.x__id__) > tmp3
                              (e7).write (tmp3.copy)
                              ((e7).<)
                              mkCopy (xAssertionError.x__id__) > tmp4
                              (e8).write (tmp4.copy)
                              ((e8).<)
                              (e9).write (((e7).eq (e8)))
                              (e9).force
                              ((e9).<)
                              (e9).as-bool.if
                                seq
                                  (lhs8).write ((pybool TRUE))
                                  (lhs8).force
                                  (pybool TRUE)
                                seq
                                  mkCopy (xcurrent-exception.x__class__) > tmp5
                                  (e10).write (tmp5.copy)
                                  ((e10).<)
                                  mkCopy (e10.x__id__) > tmp6
                                  (e11).write (tmp6.copy)
                                  ((e11).<)
                                  mkCopy (xfakeclasses.xpyTypeClass) > tmp7
                                  (e12).write (tmp7.copy)
                                  ((e12).<)
                                  mkCopy (e12.x__id__) > tmp8
                                  (e13).write (tmp8.copy)
                                  ((e13).<)
                                  (e14).write (((e11).eq (e13)))
                                  (e14).force
                                  ((e14).<)
                                  (e14).as-bool.if
                                    seq
                                      mkCopy (xcurrent-exception.x__id__) > tmp9
                                      (e15).write (tmp9.copy)
                                      ((e15).<)
                                      mkCopy (xAssertionError.x__id__) > tmp10
                                      (e16).write (tmp10.copy)
                                      ((e16).<)
                                      (e17).write (((e15).eq (e16)))
                                      (e17).force
                                      ((e17).<)
                                      (pybool TRUE)
                                    seq
                                      (lhs7).write ((pybool FALSE))
                                      (lhs7).force
                                      mkCopy (lhs7) > tmp11
                                      (e17).write (tmp11.copy)
                                      (pybool TRUE)
                                  mkCopy (e17) > tmp12
                                  (lhs8).write (tmp12.copy)
                                  (pybool TRUE)
                              (lhs8).as-bool.if
                                seq
                                  mkCopy (xcurrent-exception) > tmp13
                                  (xe).write (tmp13.copy)
                                  (xcaught).write ((pybool TRUE))
                                  (xcaught).force
                                  (xres).write ((pybool TRUE))
                                  (xres).force
                                  (pybool TRUE)
                                seq
                                  (pybool TRUE)
                              xcaught.if (stackUp.forward raiseNothing) (stackUp.forward xcurrent-exception)
                              0
                            seq
                              (stackUp.forward xcurrent-exception)
                              0
                    xexcinexc.x__class__.x__id__
                    if.
                      xcurrent-exception.x__class__.x__id__.eq (raiseNothing.x__class__.x__id__)
                      seq
                        0
                      0
                    ((is-break-continue-return (xcurrent-exception.x__class__.x__id__)).or ((is-exception (xcurrent-exception.x__class__.x__id__)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                    ((is-break-continue-return (xexcinexc.x__class__.x__id__)).or ((is-exception (xexcinexc.x__class__.x__id__)))).if (stackUp.forward xexcinexc) 0
                  toReturn.write ((xres))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xcheck)).ap).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  seq > @
    (goto (ap.@)).result