+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.gray.cage
+alias pyint preface.pyint
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit

[unused] > else_while
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        [unused] > apply
          seq > @
            cur.write (cur.is-empty.if (5) (cur.add (1)))
            (pyint cur)
      [] > raiseEmpty
        [] > xclass
          (pyint 4) > xid
      [res] > return
        res > result
        [] > xclass
          (pyint 3) > xid
      [] > break
        [] > xclass
          (pyint 2) > xid
      [] > continue
        [] > xclass
          (pyint 1) > xid
      [] > raiseNothing
        [] > xclass
          (pyint 0) > xid
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      cage > xcurrent-exception
      cage > xcaught
      pyint 0 > dummy-int-usage
      pybool TRUE > dummy-bool-usage
      pystring (sprintf "") > dummy-bool-string
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (pyint (self.value.length)))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xelse_while
      seq > @
        stdout "else_while\n"
        write.
          xelse_while
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > xn
                cage > e12
                cage > e1
                cage > lhs14
                cage > e0
                cage > e8
                cage > lhs9
                cage > lhs11
                cage > lhs12
                cage > e6
                cage > lhs0
                cage > lhs4
                cage > e5
                cage > lhs1
                cage > e7
                cage > e4
                cage > xres2
                cage > e3
                cage > lhs6
                cage > e10
                cage > doElse0
                cage > lhs3
                cage > e9
                cage > e2
                cage > lhs7
                cage > e11
                seq > @
                  stdout "xelse_while\n"
                  (xn).write ((pyint 5))
                  (xn).force
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xres2).write (tmp1.copy)
                  (doElse0).write ((pybool FALSE))
                  (doElse0).force
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          (pybool TRUE).while
                            [unused]
                              seq > @
                                (e6).write (((xn).greater (pyint 0)))
                                (e6).force
                                ((e6).<)
                                ((e6).not).if
                                  seq
                                    (doElse0).write ((pybool TRUE))
                                    (doElse0).force
                                    stackUp.forward break
                                    (pybool TRUE)
                                  seq
                                    (pybool TRUE)
                                (e1).write (((xn).sub (pyint 1)))
                                (e1).force
                                ((e1).<)
                                mkCopy (e1) > tmp2
                                (xn).write (tmp2.copy)
                                mkCopy (xres.xappend) > tmp3
                                (e2).write (tmp3.copy)
                                ((e2).<)
                                mkCopy (xres) > tmp4
                                (lhs0).write (tmp4.copy)
                                mkCopy (xn) > tmp5
                                (lhs1).write (tmp5.copy)
                                tmp.write (goto ((((e2)).apply ((lhs0)) ((lhs1))).@))
                                (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                (e3).write (tmp.result)
                                ((e3).<)
                                (pybool TRUE)
                          stackUp.forward raiseNothing
                  if.
                    xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                    stackUp.forward xcurrent-exception
                    0
                  (doElse0).if
                    seq
                      mkCopy (xres.xappend) > tmp6
                      (e4).write (tmp6.copy)
                      ((e4).<)
                      mkCopy (xres) > tmp7
                      (lhs3).write (tmp7.copy)
                      (lhs4).write ((pyint 6))
                      (lhs4).force
                      tmp.write (goto ((((e4)).apply ((lhs3)) ((lhs4))).@))
                      (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                      (e5).write (tmp.result)
                      ((e5).<)
                      (pybool TRUE)
                    seq
                      (pybool TRUE)
                  mkCopy (xres.x__contains__) > tmp8
                  (e7).write (tmp8.copy)
                  ((e7).<)
                  mkCopy (xres) > tmp9
                  (lhs6).write (tmp9.copy)
                  (lhs7).write ((pyint 6))
                  (lhs7).force
                  tmp.write (goto ((((e7)).apply ((lhs6)) ((lhs7))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e8).write (tmp.result)
                  ((e8).<)
                  (e8).if
                    seq
                      mkCopy (xres) > tmp10
                      (lhs9).write (tmp10.copy)
                      tmp.write (goto ((((xmyArray)).apply ((* (pyint 4) (pyint 3) (pyint 2) (pyint 1) (pyint 0) (pyint 6)))).@))
                      (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                      (e9).write (tmp.result)
                      ((e9).<)
                      (e10).write (((lhs9).eq (e9)))
                      (e10).force
                      ((e10).<)
                      (pybool TRUE)
                    seq
                      (lhs11).write ((pybool FALSE))
                      (lhs11).force
                      mkCopy (lhs11) > tmp11
                      (e10).write (tmp11.copy)
                      (pybool TRUE)
                  (e10).if
                    seq
                      tmp.write (goto ((((xlen)).apply ((xres))).@))
                      (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                      (e11).write (tmp.result)
                      ((e11).<)
                      (lhs12).write ((pyint 6))
                      (lhs12).force
                      (e12).write (((e11).eq (lhs12)))
                      (e12).force
                      ((e12).<)
                      (pybool TRUE)
                    seq
                      (lhs14).write ((pybool FALSE))
                      (lhs14).force
                      mkCopy (lhs14) > tmp12
                      (e12).write (tmp12.copy)
                      (pybool TRUE)
                  toReturn.write ((e12))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xelse_while)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @