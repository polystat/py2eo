+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xlen preface.xlen
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xrange preface.xrange
+junit

[unused] > simplest-class
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyIntClass > xint
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xmyC
      seq > @
        stdout "simplest-class\n"
        write.
          xmyC
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > lhs0
                cage 0 > e1
                cage 0 > xo
                cage 0 > xc
                cage 0 > e4
                cage 0 > lhs2
                cage 0 > e3
                cage 0 > e2
                seq > @
                  stdout "xmyC\n"
                  write.
                    xc
                    []
                      newUID.apply 0 > x__id__
                      [] > apply
                        [stackUp] > @
                          cage result > pResult
                          cage 0 > tmp
                          [] > result
                            cage 0 > xvalue
                            cage 0 > xgetValue
                            xc > x__class__
                            seq > initFields
                              xvalue.write (pystring "None: is there a None literal in the EO language?")
                              write.
                                xgetValue
                                []
                                  [xselfNotCopied] > apply
                                    [stackUp] > @
                                      cage 0 > tmp
                                      cage 0 > toReturn
                                      xselfNotCopied' > xself
                                      cage 0 > e0
                                      seq > @
                                        stdout "xgetValue\n"
                                        xself.<
                                        mkCopy (xself.xvalue) > tmp1
                                        (e0).write (tmp1.copy)
                                        ((e0).<)
                                        toReturn.write ((e0))
                                        stackUp.forward (return toReturn)
                                        123
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xc)).apply).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xo).write (tmp2.copy)
                  ((xo).xvalue).write ((pyint 11))
                  ((xo).xvalue).force
                  mkCopy (xo.xgetValue) > tmp3
                  (e2).write (tmp3.copy)
                  ((e2).<)
                  mkCopy (xo) > tmp4
                  (lhs0).write (tmp4.copy)
                  tmp.write (goto ((((e2)).apply ((lhs0))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  (lhs2).write ((pyint 11))
                  (lhs2).force
                  (e4).write (((e3).eq (lhs2)))
                  (e4).force
                  ((e4).<)
                  toReturn.write ((e4))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xmyC)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @