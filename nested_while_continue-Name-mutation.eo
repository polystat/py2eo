+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xint preface.xint
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > nested_while_continue
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xint > dummy-xint
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xnested_while_continue
      seq > @
        stdout "nested_while_continue\n"
        write.
          xnested_while_continue
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > xj
                cage 0 > e1
                cage 0 > e5
                cage 0 > e7
                cage 0 > e0
                cage 0 > e3
                cage 0 > xi
                cage 0 > e2
                cage 0 > e6
                cage 0 > lhs0
                cage 0 > e4
                cage 0 > xres2
                seq > @
                  stdout "xnested_while_continue\n"
                  (xi).write ((pyint 1))
                  (xi).force
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xres2).write (tmp1.copy)
                  write.
                    tmp
                    goto
                      [stackUp]
                        seq > @
                          (pybool TRUE).as-bool.while
                            [unused]
                              cage 0 > tmp
                              seq > @
                                write.
                                  tmp
                                  goto
                                    [stackUp]
                                      cage 0 > tmp
                                      seq > @
                                        (e5).write (((xi).leq (pyint 3)))
                                        (e5).force
                                        ((e5).<)
                                        ((e5).not).as-bool.if
                                          seq
                                            stackUp.forward break
                                            (pybool TRUE)
                                          seq
                                            (pybool TRUE)
                                        (xj).write ((pyint 1))
                                        (xj).force
                                        write.
                                          tmp
                                          goto
                                            [stackUp]
                                              seq > @
                                                (pybool TRUE).as-bool.while
                                                  [unused]
                                                    cage 0 > tmp
                                                    seq > @
                                                      write.
                                                        tmp
                                                        goto
                                                          [stackUp]
                                                            cage 0 > tmp
                                                            seq > @
                                                              (e3).write (((xj).leq (pyint 3)))
                                                              (e3).force
                                                              ((e3).<)
                                                              ((e3).not).as-bool.if
                                                                seq
                                                                  stackUp.forward break
                                                                  (pybool TRUE)
                                                                seq
                                                                  (pybool TRUE)
                                                              (e1).write (((xj).eq (pyint 2)))
                                                              (e1).force
                                                              ((e1).<)
                                                              (e1).as-bool.if
                                                                seq
                                                                  stackUp.forward break
                                                                  (pybool TRUE)
                                                                seq
                                                                  (pybool TRUE)
                                                              tmp.write (goto (((((xres).xappend)).apply ((xres)) ((xj))).@))
                                                              (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                              (e2).write (tmp.result)
                                                              ((e2).<)
                                                              ((xj)).aug-add ((pyint 1))
                                                              stackUp.forward continue
                                                              123
                                                      (tmp.x__class__.x__id__.neq (continue.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                      0
                                                stackUp.forward raiseNothing
                                        if.
                                          tmp.x__class__.x__id__.neq (break.x__class__.x__id__)
                                          stackUp.forward tmp
                                          0
                                        tmp.write (goto (((((xres).xappend)).apply ((xres)) ((xi))).@))
                                        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                        (e4).write (tmp.result)
                                        ((e4).<)
                                        ((xi)).aug-add ((pyint 1))
                                        stackUp.forward continue
                                        123
                                (tmp.x__class__.x__id__.neq (continue.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                0
                          stackUp.forward raiseNothing
                  if.
                    tmp.x__class__.x__id__.neq (break.x__class__.x__id__)
                    stackUp.forward tmp
                    0
                  mkCopy (xres) > tmp2
                  (lhs0).write (tmp2.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* (pyint 1) (pyint 1) (pyint 1) (pyint 2) (pyint 1) (pyint 3)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e6).write (tmp.result)
                  ((e6).<)
                  (e7).write (((lhs0).eq (e6)))
                  (e7).force
                  ((e7).<)
                  toReturn.write ((e7))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xnested_while_continue)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  (goto (apply.@)).result > @