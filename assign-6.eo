+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyslice preface.pyslice
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias xfakeclasses preface.xfakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xtuple preface.xtuple
+alias xint preface.xint
+alias xfloat preface.xfloat
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xBaseException preface.xBaseException
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > assign-6
  (pystring "assign-6") > x__name__
  [] > ap
    (pystring "assign-6") > x__name__
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > ap
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyslice 0 0 0 > dummy-pyslice-usage
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      xfakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xtuple > dummy-xtuple
      xint > dummy-xint
      xfloat > dummy-xfloat
      xStopIteration > dummy-stop-iteration
      xBaseException > dummy-base-exception
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xassignTest6
      seq > @
        stdout "assign-6\n"
        write.
          xassignTest6
          []
            (pystring "xassignTest6") > x__name__
            [] > ap
              (pystring "xassignTest6") > x__name__
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e12
                cage 0 > lhs33
                cage 0 > lhs22
                cage 0 > e22
                cage 0 > xa
                cage 0 > e19
                cage 0 > lhs18
                cage 0 > lhs32
                cage 0 > e6
                cage 0 > lhs20
                cage 0 > e18
                cage 0 > lhs0
                cage 0 > e29
                cage 0 > xt
                cage 0 > e23
                cage 0 > xx
                cage 0 > e1
                cage 0 > lhs37
                cage 0 > e30
                cage 0 > lhs31
                cage 0 > lhs14
                cage 0 > xrhs0
                cage 0 > lhs4
                cage 0 > lhs29
                cage 0 > e5
                cage 0 > e28
                cage 0 > e7
                cage 0 > lhs17
                cage 0 > e17
                cage 0 > e0
                cage 0 > e20
                cage 0 > lhs28
                cage 0 > lhs10
                cage 0 > xc
                cage 0 > e4
                cage 0 > e24
                cage 0 > xy
                cage 0 > e13
                cage 0 > lhs13
                cage 0 > xit1
                cage 0 > lhs24
                cage 0 > e31
                cage 0 > e8
                cage 0 > e16
                cage 0 > lhs2
                cage 0 > lhs8
                cage 0 > e27
                cage 0 > lhs27
                cage 0 > e3
                cage 0 > lhs6
                cage 0 > lhs35
                cage 0 > e21
                cage 0 > e10
                cage 0 > lhs16
                cage 0 > e25
                cage 0 > xz
                cage 0 > e32
                cage 0 > e14
                cage 0 > xit0
                cage 0 > lhs23
                cage 0 > lhs12
                cage 0 > e9
                cage 0 > lhs30
                cage 0 > e15
                cage 0 > lhs26
                cage 0 > e2
                cage 0 > e26
                cage 0 > e11
                seq > @
                  stdout "xassignTest6\n"
                  write.
                    xc
                    []
                      newUID.ap 0 > x__id__
                      (goto (ap.@)).result > @
                      [x] > eq
                        x__id__.eq (x.x__id__) > @
                      [] > ap
                        [stackUp] > @
                          cage result > pResult
                          cage 0 > tmp
                          [] > result
                            cage 0 > xf
                            xc > x__class__
                            seq > initFields
                              xf.write (pyint 1)
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xmyArray)).ap ((pybool TRUE)) ((* (pyint 10) (pyint 11) (pyint 12) (pyint 13)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xa).write (tmp1.copy)
                  tmp.write (goto ((((xmyArray)).ap ((pybool FALSE)) ((* (pyint 7) (pyint 8)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xrhs0).write (tmp2.copy)
                  mkCopy (xrhs0.x__iter__) > tmp3
                  (e2).write (tmp3.copy)
                  ((e2).<)
                  mkCopy (xrhs0) > tmp4
                  (lhs0).write (tmp4.copy)
                  tmp.write (goto ((((e2)).ap ((lhs0))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  mkCopy (e3) > tmp5
                  (xit0).write (tmp5.copy)
                  mkCopy (xit0.x__next__) > tmp6
                  (e4).write (tmp6.copy)
                  ((e4).<)
                  mkCopy (xit0) > tmp7
                  (lhs2).write (tmp7.copy)
                  tmp.write (goto ((((e4)).ap ((lhs2))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e5).write (tmp.result)
                  ((e5).<)
                  mkCopy (e5) > tmp8
                  (xx).write (tmp8.copy)
                  mkCopy (xit0.x__next__) > tmp9
                  (e6).write (tmp9.copy)
                  ((e6).<)
                  mkCopy (xit0) > tmp10
                  (lhs4).write (tmp10.copy)
                  tmp.write (goto ((((e6)).ap ((lhs4))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e7).write (tmp.result)
                  ((e7).<)
                  mkCopy (e7) > tmp11
                  (xy).write (tmp11.copy)
                  mkCopy (xrhs0.x__iter__) > tmp12
                  (e8).write (tmp12.copy)
                  ((e8).<)
                  mkCopy (xrhs0) > tmp13
                  (lhs6).write (tmp13.copy)
                  tmp.write (goto ((((e8)).ap ((lhs6))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e9).write (tmp.result)
                  ((e9).<)
                  mkCopy (e9) > tmp14
                  (xit1).write (tmp14.copy)
                  mkCopy (xit1.x__next__) > tmp15
                  (e10).write (tmp15.copy)
                  ((e10).<)
                  mkCopy (xit1) > tmp16
                  (lhs8).write (tmp16.copy)
                  tmp.write (goto ((((e10)).ap ((lhs8))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e11).write (tmp.result)
                  ((e11).<)
                  mkCopy (e11) > tmp17
                  (xz).write (tmp17.copy)
                  mkCopy (xit1.x__next__) > tmp18
                  (e12).write (tmp18.copy)
                  ((e12).<)
                  mkCopy (xit1) > tmp19
                  (lhs10).write (tmp19.copy)
                  tmp.write (goto ((((e12)).ap ((lhs10))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e13).write (tmp.result)
                  ((e13).<)
                  mkCopy (e13) > tmp20
                  (xt).write (tmp20.copy)
                  mkCopy (xrhs0) > tmp21
                  ((xc).xf).write (tmp21.copy)
                  mkCopy (xa.xsetAtIndex) > tmp22
                  (e14).write (tmp22.copy)
                  ((e14).<)
                  mkCopy (xa) > tmp23
                  (lhs12).write (tmp23.copy)
                  (lhs13).write ((pyint 0))
                  (lhs13).force
                  mkCopy (xrhs0) > tmp24
                  (lhs14).write (tmp24.copy)
                  tmp.write (goto ((((e14)).ap ((lhs12)) ((lhs13)) ((lhs14))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e15).write (tmp.result)
                  ((e15).<)
                  mkCopy (xa.xsetAtIndex) > tmp25
                  (e16).write (tmp25.copy)
                  ((e16).<)
                  mkCopy (xa) > tmp26
                  (lhs16).write (tmp26.copy)
                  (lhs17).write ((pyint 1))
                  (lhs17).force
                  mkCopy (xrhs0) > tmp27
                  (lhs18).write (tmp27.copy)
                  tmp.write (goto ((((e16)).ap ((lhs16)) ((lhs17)) ((lhs18))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e17).write (tmp.result)
                  ((e17).<)
                  mkCopy (xa.xsetAtIndex) > tmp28
                  (e18).write (tmp28.copy)
                  ((e18).<)
                  mkCopy (xa) > tmp29
                  (lhs20).write (tmp29.copy)
                  (e19).write ((pyslice (pyint 2) (pyint 1) (pyint 1)))
                  (e19).force
                  ((e19).<)
                  tmp.write (goto ((((xmyArray)).ap ((pybool FALSE)) ((* (pyint 7) (pyint 8)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e20).write (tmp.result)
                  ((e20).<)
                  tmp.write (goto ((((e18)).ap ((lhs20)) ((e19)) ((e20))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e21).write (tmp.result)
                  ((e21).<)
                  (e22).write (((xx).eq (pyint 7)))
                  (e22).force
                  ((e22).<)
                  (e22).as-bool.if
                    seq
                      (e23).write (((xy).eq (pyint 8)))
                      (e23).force
                      ((e23).<)
                      (pybool TRUE)
                    seq
                      (lhs22).write ((pybool FALSE))
                      (lhs22).force
                      mkCopy (lhs22) > tmp30
                      (e23).write (tmp30.copy)
                      (pybool TRUE)
                  (e23).as-bool.if
                    seq
                      (e24).write (((xz).eq (pyint 7)))
                      (e24).force
                      ((e24).<)
                      (pybool TRUE)
                    seq
                      (lhs23).write ((pybool FALSE))
                      (lhs23).force
                      mkCopy (lhs23) > tmp31
                      (e24).write (tmp31.copy)
                      (pybool TRUE)
                  (e24).as-bool.if
                    seq
                      (e25).write (((xt).eq (pyint 8)))
                      (e25).force
                      ((e25).<)
                      (pybool TRUE)
                    seq
                      (lhs24).write ((pybool FALSE))
                      (lhs24).force
                      mkCopy (lhs24) > tmp32
                      (e25).write (tmp32.copy)
                      (pybool TRUE)
                  (e25).as-bool.if
                    seq
                      mkCopy (xc.xf) > tmp33
                      (e26).write (tmp33.copy)
                      ((e26).<)
                      tmp.write (goto ((((xmyArray)).ap ((pybool FALSE)) ((* (pyint 7) (pyint 8)))).@))
                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                      (e27).write (tmp.result)
                      ((e27).<)
                      (e28).write (((e26).eq (e27)))
                      (e28).force
                      ((e28).<)
                      (pybool TRUE)
                    seq
                      (lhs26).write ((pybool FALSE))
                      (lhs26).force
                      mkCopy (lhs26) > tmp34
                      (e28).write (tmp34.copy)
                      (pybool TRUE)
                  (e28).as-bool.if
                    seq
                      mkCopy (xa) > tmp35
                      (lhs35).write (tmp35.copy)
                      mkCopy (xmyArray) > tmp36
                      (lhs32).write (tmp36.copy)
                      (lhs33).write ((pybool TRUE))
                      (lhs33).force
                      tmp.write (goto ((((xmyArray)).ap ((pybool FALSE)) ((* (pyint 7) (pyint 8)))).@))
                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                      (e29).write (tmp.result)
                      ((e29).<)
                      tmp.write (goto ((((xmyArray)).ap ((pybool FALSE)) ((* (pyint 7) (pyint 8)))).@))
                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                      (e30).write (tmp.result)
                      ((e30).<)
                      (lhs27).write ((pyint 7))
                      (lhs27).force
                      (lhs28).write ((pyint 8))
                      (lhs28).force
                      (lhs29).write ((pyint 12))
                      (lhs29).force
                      (lhs30).write ((pyint 13))
                      (lhs30).force
                      (lhs31).write ((* (e29) (e30) (lhs27) (lhs28) (lhs29) (lhs30)))
                      tmp.write (goto ((((lhs32)).ap ((lhs33)) ((lhs31))).@))
                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                      (e31).write (tmp.result)
                      ((e31).<)
                      (e32).write (((lhs35).eq (e31)))
                      (e32).force
                      ((e32).<)
                      (pybool TRUE)
                    seq
                      (lhs37).write ((pybool FALSE))
                      (lhs37).force
                      mkCopy (lhs37) > tmp37
                      (e32).write (tmp37.copy)
                      (pybool TRUE)
                  toReturn.write ((e32))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xassignTest6)).ap).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  seq > @
    (goto (ap.@)).result