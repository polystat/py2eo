+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > for_try_break
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.length))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xfor_try_break
      seq > @
        stdout "for_try_break\n"
        write.
          xfor_try_break
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e12
                cage > e1
                cage > e17
                cage > xres
                cage > e3
                cage > e10
                cage > lhs11
                cage > e9
                cage > e15
                cage > e19
                cage > e6
                cage > e18
                cage > lhs0
                cage > lhs4
                cage > e5
                cage > e7
                cage > xnum
                cage > e0
                cage > xarr2
                cage > lhs5
                cage > e4
                cage > xresult
                cage > e13
                cage > e8
                cage > e16
                cage > lhs2
                cage > e14
                cage > xit0
                cage > e2
                cage > e11
                seq > @
                  stdout "xfor_try_break\n"
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xres).write (tmp1.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* 1 2 4 0 8))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xarr2).write (tmp2.copy)
                  mkCopy (xarr.x__iter__) > tmp3
                  (e2).write (tmp3.copy)
                  ((e2).<)
                  mkCopy (xarr) > tmp4
                  (lhs0).write (tmp4.copy)
                  tmp.write (goto ((((e2)).apply ((lhs0))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  mkCopy (e3) > tmp5
                  (xit0).write (tmp5.copy)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          write.
                            xcurrent-exception
                            goto
                              [stackUp]
                                seq > @
                                  TRUE.while
                                    [unused]
                                      seq > @
                                        mkCopy (xit0.x__next__) > tmp6
                                        (e4).write (tmp6.copy)
                                        ((e4).<)
                                        mkCopy (xit0) > tmp7
                                        (lhs2).write (tmp7.copy)
                                        tmp.write (goto ((((e4)).apply ((lhs2))).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e5).write (tmp.result)
                                        ((e5).<)
                                        mkCopy (e5) > tmp8
                                        (xnum).write (tmp8.copy)
                                        write.
                                          xcurrent-exception
                                          goto
                                            [stackUp]
                                              seq > @
                                                [] > tmp9
                                                  memory > dddata
                                                  dddata.write ((16.div (xnum))) > @
                                                (e6).write (tmp9.dddata)
                                                ((e6).<)
                                                mkCopy (e6) > tmp10
                                                (xresult).write (tmp10.copy)
                                                mkCopy (xres.xappend) > tmp11
                                                (e7).write (tmp11.copy)
                                                ((e7).<)
                                                mkCopy (xres) > tmp12
                                                (lhs4).write (tmp12.copy)
                                                mkCopy (xresult) > tmp13
                                                (lhs5).write (tmp13.copy)
                                                tmp.write (goto ((((e7)).apply ((lhs4)) ((lhs5))).@))
                                                (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                                (e8).write (tmp.result)
                                                ((e8).<)
                                                stackUp.forward raiseNothing
                                        seq
                                          mkCopy (xcurrent-exception.xclass) > tmp14
                                          (e10).write (tmp14.copy)
                                          ((e10).<)
                                          mkCopy (e10.xid) > tmp15
                                          (e11).write (tmp15.copy)
                                          ((e11).<)
                                          mkCopy (xZeroDivisionError.xid) > tmp16
                                          (e12).write (tmp16.copy)
                                          ((e12).<)
                                          [] > tmp17
                                            memory > dddata
                                            dddata.write (((e11).eq (e12))) > @
                                          (e13).write (tmp17.dddata)
                                          ((e13).<)
                                          (e13).if
                                            seq
                                              tmp.write (goto ((((xprint)).apply ("Sorry ! You are dividing by zero ")).@))
                                              (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                              (e9).write (tmp.result)
                                              ((e9).<)
                                              stackUp.forward break
                                              TRUE
                                            seq
                                              TRUE
                                          if.
                                            xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                                            seq
                                            0
                                          (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                                        TRUE
                                  stackUp.forward raiseNothing
                          if.
                            xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                            stackUp.forward xcurrent-exception
                            0
                          stackUp.forward raiseNothing
                  seq
                    mkCopy (xcurrent-exception.xclass) > tmp18
                    (e14).write (tmp18.copy)
                    ((e14).<)
                    mkCopy (e14.xid) > tmp19
                    (e15).write (tmp19.copy)
                    ((e15).<)
                    mkCopy (xStopIteration.xid) > tmp20
                    (e16).write (tmp20.copy)
                    ((e16).<)
                    [] > tmp21
                      memory > dddata
                      dddata.write (((e15).eq (e16))) > @
                    (e17).write (tmp21.dddata)
                    ((e17).<)
                    (e17).if
                      seq
                        TRUE
                      seq
                        TRUE
                    if.
                      xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                      seq
                      0
                    (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                  mkCopy (xres) > tmp22
                  (lhs11).write (tmp22.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* 16 8 4))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e18).write (tmp.result)
                  ((e18).<)
                  [] > tmp23
                    memory > dddata
                    dddata.write (((lhs11).eq (e18))) > @
                  (e19).write (tmp23.dddata)
                  ((e19).<)
                  toReturn.write ((e19))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xfor_try_break)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @