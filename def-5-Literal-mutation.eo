+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.gray.cage
+alias pyint preface.pyint
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit

[unused] > def-5
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        [unused] > apply
          seq > @
            cur.write (cur.is-empty.if (5) (cur.add (1)))
            (pyint cur)
      [] > raiseEmpty
        [] > xclass
          (pyint 4) > xid
      [res] > return
        res > result
        [] > xclass
          (pyint 3) > xid
      [] > break
        [] > xclass
          (pyint 2) > xid
      [] > continue
        [] > xclass
          (pyint 1) > xid
      [] > raiseNothing
        [] > xclass
          (pyint 0) > xid
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      cage > xcurrent-exception
      cage > xcaught
      pyint 0 > dummy-int-usage
      pybool TRUE > dummy-bool-usage
      pystring (sprintf "") > dummy-bool-string
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (pyint (self.value.length)))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xmy_decorator
      seq > @
        stdout "def-5\n"
        write.
          xmy_decorator
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e4
                cage > lhs4
                cage > e5
                cage > xfactorial
                seq > @
                  stdout "xmy_decorator\n"
                  write.
                    xfactorial
                    []
                      [xnNotCopied] > apply
                        [stackUp] > @
                          cage > tmp
                          cage > toReturn
                          xnNotCopied' > xn
                          cage > lhs0
                          cage > e1
                          cage > e0
                          cage > lhs2
                          cage > e3
                          cage > e2
                          seq > @
                            stdout "xfactorial\n"
                            xn.<
                            (e3).write (((xn).less (pyint 2)))
                            (e3).force
                            ((e3).<)
                            (e3).if
                              seq
                                toReturn.write ((pyint 1))
                                stackUp.forward (return toReturn)
                                (pybool TRUE)
                              seq
                                mkCopy (xn) > tmp1
                                (lhs2).write (tmp1.copy)
                                mkCopy (xfactorial) > tmp2
                                (lhs0).write (tmp2.copy)
                                (e0).write (((xn).sub (pyint 1)))
                                (e0).force
                                ((e0).<)
                                tmp.write (goto ((((lhs0)).apply ((e0))).@))
                                (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                (e1).write (tmp.result)
                                ((e1).<)
                                (e2).write (((lhs2).mul (e1)))
                                (e2).force
                                ((e2).<)
                                toReturn.write ((e2))
                                stackUp.forward (return toReturn)
                                (pybool TRUE)
                            123
                  tmp.write (goto ((((xfactorial)).apply ((pyint 5))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e4).write (tmp.result)
                  ((e4).<)
                  (lhs4).write ((pyint 120))
                  (lhs4).force
                  (e5).write (((e4).eq (lhs4)))
                  (e5).force
                  ((e5).<)
                  toReturn.write ((e5))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xmy_decorator)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @