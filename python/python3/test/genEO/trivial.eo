+package org.eolang
+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout
+junit

[] > trivial
  [heap] > nextFreePtr
    heap.length > @
  [heap newValue] > append2heap
    heap.append newValue > @
  [heap ptr newValue] > immArrChangeValue
    mapi. > @!
      heap
      [x i]
        (ptr.eq i).if (newValue) x > @!
  [heap closure] > tmpFun18
    (heap) > constHeap0!
    (((nextFreePtr)) ((constHeap0))) > bb_interm6Ptr!
    (((append2heap)) ((constHeap0)) ("None: is there a None literal in the EO language?")) > constHeap1!
    (((nextFreePtr)) ((constHeap1))) > bb_else0Ptr!
    (((append2heap)) ((constHeap1)) ("None: is there a None literal in the EO language?")) > constHeap2!
    (((nextFreePtr)) ((constHeap2))) > f1Ptr!
    (((append2heap)) ((constHeap2)) ("None: is there a None literal in the EO language?")) > constHeap3!
    (((nextFreePtr)) ((constHeap3))) > bb_interm2Ptr!
    (((append2heap)) ((constHeap3)) ("None: is there a None literal in the EO language?")) > constHeap4!
    (((nextFreePtr)) ((constHeap4))) > bb_interm3Ptr!
    (((append2heap)) ((constHeap4)) ("None: is there a None literal in the EO language?")) > constHeap5!
    (((nextFreePtr)) ((constHeap5))) > e3Ptr!
    (((append2heap)) ((constHeap5)) ("None: is there a None literal in the EO language?")) > constHeap6!
    (((nextFreePtr)) ((constHeap6))) > bb_interm4Ptr!
    (((append2heap)) ((constHeap6)) ("None: is there a None literal in the EO language?")) > constHeap7!
    (((nextFreePtr)) ((constHeap7))) > bb_interm11Ptr!
    (((append2heap)) ((constHeap7)) ("None: is there a None literal in the EO language?")) > constHeap8!
    (((nextFreePtr)) ((constHeap8))) > bb_finish0Ptr!
    (((append2heap)) ((constHeap8)) ("None: is there a None literal in the EO language?")) > constHeap9!
    (((nextFreePtr)) ((constHeap9))) > bb_interm5Ptr!
    (((append2heap)) ((constHeap9)) ("None: is there a None literal in the EO language?")) > constHeap10!
    (((nextFreePtr)) ((constHeap10))) > f2Ptr!
    (((append2heap)) ((constHeap10)) ("None: is there a None literal in the EO language?")) > constHeap11!
    (((nextFreePtr)) ((constHeap11))) > bb_interm0Ptr!
    (((append2heap)) ((constHeap11)) ("None: is there a None literal in the EO language?")) > constHeap12!
    (((nextFreePtr)) ((constHeap12))) > e1Ptr!
    (((append2heap)) ((constHeap12)) ("None: is there a None literal in the EO language?")) > constHeap13!
    (((nextFreePtr)) ((constHeap13))) > bb_yes0Ptr!
    (((append2heap)) ((constHeap13)) ("None: is there a None literal in the EO language?")) > constHeap14!
    (((nextFreePtr)) ((constHeap14))) > bb_interm9Ptr!
    (((append2heap)) ((constHeap14)) ("None: is there a None literal in the EO language?")) > constHeap15!
    (((nextFreePtr)) ((constHeap15))) > bb_body0Ptr!
    (((append2heap)) ((constHeap15)) ("None: is there a None literal in the EO language?")) > constHeap16!
    (((nextFreePtr)) ((constHeap16))) > bb_interm7Ptr!
    (((append2heap)) ((constHeap16)) ("None: is there a None literal in the EO language?")) > constHeap17!
    (((nextFreePtr)) ((constHeap17))) > e0Ptr!
    (((append2heap)) ((constHeap17)) ("None: is there a None literal in the EO language?")) > constHeap18!
    (((nextFreePtr)) ((constHeap18))) > f0Ptr!
    (((append2heap)) ((constHeap18)) ("None: is there a None literal in the EO language?")) > constHeap19!
    (((nextFreePtr)) ((constHeap19))) > bb_no0Ptr!
    (((append2heap)) ((constHeap19)) ("None: is there a None literal in the EO language?")) > constHeap20!
    (((nextFreePtr)) ((constHeap20))) > e2Ptr!
    (((append2heap)) ((constHeap20)) ("None: is there a None literal in the EO language?")) > constHeap21!
    (((nextFreePtr)) ((constHeap21))) > bb_start0Ptr!
    (((append2heap)) ((constHeap21)) ("None: is there a None literal in the EO language?")) > constHeap22!
    (((nextFreePtr)) ((constHeap22))) > bb_interm1Ptr!
    (((append2heap)) ((constHeap22)) ("None: is there a None literal in the EO language?")) > constHeap23!
    (((nextFreePtr)) ((constHeap23))) > bb_interm10Ptr!
    (((append2heap)) ((constHeap23)) ("None: is there a None literal in the EO language?")) > constHeap24!
    (((nextFreePtr)) ((constHeap24))) > iiPtr!
    (((append2heap)) ((constHeap24)) ("None: is there a None literal in the EO language?")) > constHeap25!
    (((nextFreePtr)) ((constHeap25))) > bb_interm8Ptr!
    (((append2heap)) ((constHeap25)) ("None: is there a None literal in the EO language?")) > constHeap26!
    (((immArrChangeValue)) ((constHeap26)) ((e1Ptr)) ("None: is there a None literal in the EO language?")) > constHeap27!
    (((immArrChangeValue)) ((constHeap27)) ((f1Ptr)) ("None: is there a None literal in the EO language?")) > constHeap28!
    (((immArrChangeValue)) ((constHeap28)) ((e3Ptr)) ("None: is there a None literal in the EO language?")) > constHeap29!
    (((immArrChangeValue)) ((constHeap29)) ((e2Ptr)) ("None: is there a None literal in the EO language?")) > constHeap30!
    (((immArrChangeValue)) ((constHeap30)) ((iiPtr)) ("None: is there a None literal in the EO language?")) > constHeap31!
    (((immArrChangeValue)) ((constHeap31)) ((f2Ptr)) ("None: is there a None literal in the EO language?")) > constHeap32!
    (((immArrChangeValue)) ((constHeap32)) ((e0Ptr)) ("None: is there a None literal in the EO language?")) > constHeap33!
    (((immArrChangeValue)) ((constHeap33)) ((f0Ptr)) ("None: is there a None literal in the EO language?")) > constHeap34!
    [heap closure] > tmpFun0
      (heap) > constHeap34!
      (((immArrChangeValue)) ((constHeap34)) (((closure).f0)) (0)) > constHeap35!
      ((((((constHeap35).get ((closure).bb_interm0)).callme)) ((constHeap35)) (((constHeap35).get ((closure).bb_interm0))))) > @!
    [] > newClosure0!
      (tmpFun0) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap34)) ((bb_start0Ptr)) ((newClosure0))) > constHeap36!
    [heap closure] > tmpFun1
      (heap) > constHeap36!
      (((immArrChangeValue)) ((constHeap36)) (((closure).f1)) (1)) > constHeap37!
      ((((((constHeap37).get ((closure).bb_interm1)).callme)) ((constHeap37)) (((constHeap37).get ((closure).bb_interm1))))) > @!
    [] > newClosure1!
      (tmpFun1) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap36)) ((bb_interm0Ptr)) ((newClosure1))) > constHeap38!
    [heap closure] > tmpFun2
      (heap) > constHeap38!
      (((immArrChangeValue)) ((constHeap38)) (((closure).ii)) (0)) > constHeap39!
      ((((((constHeap39).get ((closure).bb_interm2)).callme)) ((constHeap39)) (((constHeap39).get ((closure).bb_interm2))))) > @!
    [] > newClosure2!
      (tmpFun2) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap38)) ((bb_interm1Ptr)) ((newClosure2))) > constHeap40!
    [heap closure] > tmpFun3
      (heap) > constHeap40!
      ((TRUE.if (((((constHeap40).get ((closure).bb_body0)).callme)) ((constHeap40)) (((constHeap40).get ((closure).bb_body0)))) (((((constHeap40).get ((closure).bb_else0)).callme)) ((constHeap40)) (((constHeap40).get ((closure).bb_else0)))))) > @!
    [] > newClosure3!
      (tmpFun3) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap40)) ((bb_interm2Ptr)) ((newClosure3))) > constHeap41!
    [heap closure] > tmpFun4
      (heap) > constHeap41!
      (((immArrChangeValue)) ((constHeap41)) (((closure).e2)) ((((constHeap41).get ((closure).ii)).less 10))) > constHeap42!
      ((((((constHeap42).get ((closure).bb_interm4)).callme)) ((constHeap42)) (((constHeap42).get ((closure).bb_interm4))))) > @!
    [] > newClosure4!
      (tmpFun4) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap41)) ((bb_body0Ptr)) ((newClosure4))) > constHeap43!
    [heap closure] > tmpFun5
      (heap) > constHeap43!
      (((((constHeap43).get ((closure).e2)).not).if (((((constHeap43).get ((closure).bb_yes0)).callme)) ((constHeap43)) (((constHeap43).get ((closure).bb_yes0)))) (((((constHeap43).get ((closure).bb_no0)).callme)) ((constHeap43)) (((constHeap43).get ((closure).bb_no0)))))) > @!
    [] > newClosure5!
      (tmpFun5) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap43)) ((bb_interm4Ptr)) ((newClosure5))) > constHeap44!
    [heap closure] > tmpFun6
      (heap) > constHeap44!
      ((((((constHeap44).get ((closure).bb_interm3)).callme)) ((constHeap44)) (((constHeap44).get ((closure).bb_interm3))))) > @!
    [] > newClosure6!
      (tmpFun6) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap44)) ((bb_yes0Ptr)) ((newClosure6))) > constHeap45!
    [heap closure] > tmpFun7
      (heap) > constHeap45!
      ((((((constHeap45).get ((closure).bb_interm5)).callme)) ((constHeap45)) (((constHeap45).get ((closure).bb_interm5))))) > @!
    [] > newClosure7!
      (tmpFun7) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap45)) ((bb_no0Ptr)) ((newClosure7))) > constHeap46!
    [heap closure] > tmpFun8
      (heap) > constHeap46!
      (((immArrChangeValue)) ((constHeap46)) (((closure).e0)) ((((constHeap46).get ((closure).f0)).add ((constHeap46).get ((closure).f1))))) > constHeap47!
      ((((((constHeap47).get ((closure).bb_interm7)).callme)) ((constHeap47)) (((constHeap47).get ((closure).bb_interm7))))) > @!
    [] > newClosure8!
      (tmpFun8) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap46)) ((bb_interm5Ptr)) ((newClosure8))) > constHeap48!
    [heap closure] > tmpFun9
      (heap) > constHeap48!
      (((immArrChangeValue)) ((constHeap48)) (((closure).f2)) (((constHeap48).get ((closure).e0)))) > constHeap49!
      ((((((constHeap49).get ((closure).bb_interm6)).callme)) ((constHeap49)) (((constHeap49).get ((closure).bb_interm6))))) > @!
    [] > newClosure9!
      (tmpFun9) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap48)) ((bb_interm7Ptr)) ((newClosure9))) > constHeap50!
    [heap closure] > tmpFun10
      (heap) > constHeap50!
      (((immArrChangeValue)) ((constHeap50)) (((closure).e1)) ((((constHeap50).get ((closure).ii)).add 1))) > constHeap51!
      ((((((constHeap51).get ((closure).bb_interm9)).callme)) ((constHeap51)) (((constHeap51).get ((closure).bb_interm9))))) > @!
    [] > newClosure10!
      (tmpFun10) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap50)) ((bb_interm6Ptr)) ((newClosure10))) > constHeap52!
    [heap closure] > tmpFun11
      (heap) > constHeap52!
      (((immArrChangeValue)) ((constHeap52)) (((closure).ii)) (((constHeap52).get ((closure).e1)))) > constHeap53!
      ((((((constHeap53).get ((closure).bb_interm8)).callme)) ((constHeap53)) (((constHeap53).get ((closure).bb_interm8))))) > @!
    [] > newClosure11!
      (tmpFun11) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap52)) ((bb_interm9Ptr)) ((newClosure11))) > constHeap54!
    [heap closure] > tmpFun12
      (heap) > constHeap54!
      (((immArrChangeValue)) ((constHeap54)) (((closure).f0)) (((constHeap54).get ((closure).f1)))) > constHeap55!
      ((((((constHeap55).get ((closure).bb_interm10)).callme)) ((constHeap55)) (((constHeap55).get ((closure).bb_interm10))))) > @!
    [] > newClosure12!
      (tmpFun12) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap54)) ((bb_interm8Ptr)) ((newClosure12))) > constHeap56!
    [heap closure] > tmpFun13
      (heap) > constHeap56!
      (((immArrChangeValue)) ((constHeap56)) (((closure).f1)) (((constHeap56).get ((closure).f2)))) > constHeap57!
      ((((((constHeap57).get ((closure).bb_interm2)).callme)) ((constHeap57)) (((constHeap57).get ((closure).bb_interm2))))) > @!
    [] > newClosure13!
      (tmpFun13) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap56)) ((bb_interm10Ptr)) ((newClosure13))) > constHeap58!
    [heap closure] > tmpFun14
      (heap) > constHeap58!
      ((((((constHeap58).get ((closure).bb_interm3)).callme)) ((constHeap58)) (((constHeap58).get ((closure).bb_interm3))))) > @!
    [] > newClosure14!
      (tmpFun14) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap58)) ((bb_else0Ptr)) ((newClosure14))) > constHeap59!
    [heap closure] > tmpFun15
      (heap) > constHeap59!
      (((immArrChangeValue)) ((constHeap59)) (((closure).e3)) ((55.eq ((constHeap59).get ((closure).f0))))) > constHeap60!
      ((((((constHeap60).get ((closure).bb_interm11)).callme)) ((constHeap60)) (((constHeap60).get ((closure).bb_interm11))))) > @!
    [] > newClosure15!
      (tmpFun15) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap59)) ((bb_interm3Ptr)) ((newClosure15))) > constHeap61!
    [heap closure] > tmpFun16
      (heap) > constHeap61!
      ((* (constHeap61) ((constHeap61).get ((closure).e3)))) > @!
    [] > newClosure16!
      (tmpFun16) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap61)) ((bb_interm11Ptr)) ((newClosure16))) > constHeap62!
    [heap closure] > tmpFun17
      (heap) > constHeap62!
      ((* (constHeap62) "None: is there a None literal in the EO language?")) > @!
    [] > newClosure17!
      (tmpFun17) > callme
      (bb_interm6Ptr) > bb_interm6
      (bb_else0Ptr) > bb_else0
      (f1Ptr) > f1
      (bb_interm2Ptr) > bb_interm2
      (bb_interm3Ptr) > bb_interm3
      (e3Ptr) > e3
      (bb_interm4Ptr) > bb_interm4
      (bb_interm11Ptr) > bb_interm11
      (bb_finish0Ptr) > bb_finish0
      (bb_interm5Ptr) > bb_interm5
      (f2Ptr) > f2
      (bb_interm0Ptr) > bb_interm0
      (e1Ptr) > e1
      (bb_yes0Ptr) > bb_yes0
      (bb_interm9Ptr) > bb_interm9
      (bb_body0Ptr) > bb_body0
      (bb_interm7Ptr) > bb_interm7
      (e0Ptr) > e0
      (f0Ptr) > f0
      (bb_no0Ptr) > bb_no0
      (e2Ptr) > e2
      (bb_start0Ptr) > bb_start0
      (bb_interm1Ptr) > bb_interm1
      (bb_interm10Ptr) > bb_interm10
      (iiPtr) > ii
      (bb_interm8Ptr) > bb_interm8
    (((immArrChangeValue)) ((constHeap62)) ((bb_finish0Ptr)) ((newClosure17))) > constHeap63!
    ((((((constHeap63).get (bb_start0Ptr)).callme)) ((constHeap63)) (((constHeap63).get (bb_start0Ptr))))) > @!
  * > emptyHeap
  [] > emptyClosure
  (tmpFun18 emptyHeap emptyClosure).get 1 > @
