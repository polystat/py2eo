+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias xfakeclasses preface.xfakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xint preface.xint
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xBaseException preface.xBaseException
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > evaluation-order-plus
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      xfakeclasses.pyFloatClass > xfloat
      xfakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xint > dummy-xint
      xStopIteration > dummy-stop-iteration
      xBaseException > dummy-base-exception
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xevaluationOrder
      seq > @
        stdout "evaluation-order-plus\n"
        write.
          xevaluationOrder
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e6
                cage 0 > e0
                cage 0 > e4
                cage 0 > lhs4
                cage 0 > e5
                cage 0 > lhs1
                cage 0 > e7
                cage 0 > xxlist
                cage 0 > e8
                cage 0 > e3
                cage 0 > lhs6
                cage 0 > e10
                cage 0 > xb2
                cage 0 > lhs3
                cage 0 > e9
                cage 0 > xfst
                cage 0 > xsnd
                seq > @
                  stdout "xevaluationOrder\n"
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xxlist).write (tmp1.copy)
                  write.
                    xfst
                    []
                      [] > apply
                        [stackUp] > @
                          cage 0 > tmp
                          cage 0 > toReturn
                          cage 0 > e1
                          seq > @
                            stdout "xfst\n"
                            tmp.write (goto (((((xxlist).xappend)).apply ((xxlist)) ((pyint 1))).@))
                            (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                            (e1).write (tmp.result)
                            ((e1).<)
                            toReturn.write ((pyint 1))
                            stackUp.forward (return toReturn)
                            stackUp.forward (return 0)
                            123
                  write.
                    xsnd
                    []
                      [] > apply
                        [stackUp] > @
                          cage 0 > tmp
                          cage 0 > toReturn
                          cage 0 > e2
                          seq > @
                            stdout "xsnd\n"
                            tmp.write (goto (((((xxlist).xappend)).apply ((xxlist)) ((pyint 2))).@))
                            (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                            (e2).write (tmp.result)
                            ((e2).<)
                            toReturn.write ((pyint 2))
                            stackUp.forward (return toReturn)
                            stackUp.forward (return 0)
                            123
                  tmp.write (goto ((((xfst)).apply).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  tmp.write (goto ((((xsnd)).apply).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e4).write (tmp.result)
                  ((e4).<)
                  (e5).write (((e3).add (e4)))
                  (e5).force
                  ((e5).<)
                  mkCopy (e5) > tmp2
                  (xb2).write (tmp2.copy)
                  (e6).write (((xb).eq (pyint 3)))
                  (e6).force
                  ((e6).<)
                  (e6).as-bool.if
                    seq
                      (e7).write (((xxlist).get (pyint 0)))
                      (e7).force
                      ((e7).<)
                      (lhs1).write ((pyint 1))
                      (lhs1).force
                      (e8).write (((e7).eq (lhs1)))
                      (e8).force
                      ((e8).<)
                      (pybool TRUE)
                    seq
                      (lhs3).write ((pybool FALSE))
                      (lhs3).force
                      mkCopy (lhs3) > tmp3
                      (e8).write (tmp3.copy)
                      (pybool TRUE)
                  (e8).as-bool.if
                    seq
                      (e9).write (((xxlist).get (pyint 1)))
                      (e9).force
                      ((e9).<)
                      (lhs4).write ((pyint 2))
                      (lhs4).force
                      (e10).write (((e9).eq (lhs4)))
                      (e10).force
                      ((e10).<)
                      (pybool TRUE)
                    seq
                      (lhs6).write ((pybool FALSE))
                      (lhs6).force
                      mkCopy (lhs6) > tmp4
                      (e10).write (tmp4.copy)
                      (pybool TRUE)
                  toReturn.write ((e10))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xevaluationOrder)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  (goto (apply.@)).result > @