+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.gray.cage
+alias pyint preface.pyint
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit

[unused] > constructor-arguments
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        [unused] > apply
          seq > @
            cur.write (cur.is-empty.if (5) (cur.add (1)))
            (pyint cur)
      [] > raiseEmpty
        [] > xclass
          (pyint 4) > xid
      [res] > return
        res > result
        [] > xclass
          (pyint 3) > xid
      [] > break
        [] > xclass
          (pyint 2) > xid
      [] > continue
        [] > xclass
          (pyint 1) > xid
      [] > raiseNothing
        [] > xclass
          (pyint 0) > xid
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      cage > xcurrent-exception
      cage > xcaught
      pyint 0 > dummy-int-usage
      pybool TRUE > dummy-bool-usage
      pystring (sprintf "") > dummy-bool-string
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (pyint (self.value.length)))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xmyC
      seq > @
        stdout "constructor-arguments\n"
        write.
          xmyC
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > lhs0
                cage > e1
                cage > xo
                cage > xc
                cage > e4
                cage > lhs2
                cage > e3
                cage > e2
                seq > @
                  stdout "xmyC\n"
                  write.
                    xc
                    []
                      newUID.apply 0 > xid
                      [xa1] > apply
                        [stackUp] > @
                          cage > pResult
                          [] > result
                            cage > xa
                            cage > x__init__
                            cage > xsum
                            xc > xclass
                            seq > initFields
                              xa.write (pystring "None: is there a None literal in the EO language?")
                              write.
                                x__init__
                                []
                                  [xselfNotCopied xa1NotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      cage > toReturn
                                      xselfNotCopied' > xself
                                      xa1NotCopied' > xa1
                                      seq > @
                                        stdout "x__init__\n"
                                        xself.<
                                        xa1.<
                                        mkCopy (xa1) > tmp1
                                        ((xself).xa).write (tmp1.copy)
                                        123
                              write.
                                xsum
                                []
                                  [xselfNotCopied] > apply
                                    [stackUp] > @
                                      cage > tmp
                                      cage > toReturn
                                      xselfNotCopied' > xself
                                      cage > e0
                                      seq > @
                                        stdout "xsum\n"
                                        xself.<
                                        mkCopy (xself.xa) > tmp2
                                        (e0).write (tmp2.copy)
                                        ((e0).<)
                                        toReturn.write ((e0))
                                        stackUp.forward (return toReturn)
                                        123
                          seq (result.initFields) (pResult.write result) (goto ((result.x__init__.apply pResult xa1).@)) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xc)).apply ((pyint 5))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp3
                  (xo).write (tmp3.copy)
                  mkCopy (xo.xsum) > tmp4
                  (e2).write (tmp4.copy)
                  ((e2).<)
                  mkCopy (xo) > tmp5
                  (lhs0).write (tmp5.copy)
                  tmp.write (goto ((((e2)).apply ((lhs0))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  (lhs2).write ((pyint 5))
                  (lhs2).force
                  (e4).write (((e3).eq (lhs2)))
                  (e4).force
                  ((e4).<)
                  toReturn.write ((e4))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xmyC)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @