+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > nested_for_break2
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.length))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xnested_for_break2
      seq > @
        stdout "nested_for_break2\n"
        write.
          xnested_for_break2
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > lhs18
                cage > e23
                cage > lhs14
                cage > e7
                cage > e17
                cage > xres
                cage > e10
                cage > e25
                cage > e9
                cage > e22
                cage > e19
                cage > e6
                cage > e18
                cage > lhs0
                cage > e12
                cage > xj
                cage > e1
                cage > xarr22
                cage > lhs4
                cage > e5
                cage > e0
                cage > e20
                cage > e4
                cage > e24
                cage > e13
                cage > lhs13
                cage > xit1
                cage > e8
                cage > e16
                cage > lhs2
                cage > lhs8
                cage > e3
                cage > lhs6
                cage > e21
                cage > lhs9
                cage > e14
                cage > xit0
                cage > e15
                cage > xi
                cage > e2
                cage > xarr1
                cage > e11
                seq > @
                  stdout "xnested_for_break2\n"
                  tmp.write (goto ((((xmyArray)).apply ((* 1 2 3))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp33
                  (xarr1).write (tmp33.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* 4 5 6))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp34
                  (xarr22).write (tmp34.copy)
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e2).write (tmp.result)
                  ((e2).<)
                  mkCopy (e2) > tmp35
                  (xres).write (tmp35.copy)
                  mkCopy (xarr1.x__iter__) > tmp36
                  (e3).write (tmp36.copy)
                  ((e3).<)
                  mkCopy (xarr1) > tmp37
                  (lhs0).write (tmp37.copy)
                  tmp.write (goto ((((e3)).apply ((lhs0))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e4).write (tmp.result)
                  ((e4).<)
                  mkCopy (e4) > tmp38
                  (xit0).write (tmp38.copy)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          write.
                            xcurrent-exception
                            goto
                              [stackUp]
                                seq > @
                                  TRUE.while
                                    [unused]
                                      seq > @
                                        mkCopy (xit0.x__next__) > tmp39
                                        (e5).write (tmp39.copy)
                                        ((e5).<)
                                        mkCopy (xit0) > tmp40
                                        (lhs2).write (tmp40.copy)
                                        tmp.write (goto ((((e5)).apply ((lhs2))).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e6).write (tmp.result)
                                        ((e6).<)
                                        mkCopy (e6) > tmp41
                                        (xi).write (tmp41.copy)
                                        mkCopy (xarr2.x__iter__) > tmp42
                                        (e7).write (tmp42.copy)
                                        ((e7).<)
                                        mkCopy (xarr2) > tmp43
                                        (lhs4).write (tmp43.copy)
                                        tmp.write (goto ((((e7)).apply ((lhs4))).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e8).write (tmp.result)
                                        ((e8).<)
                                        mkCopy (e8) > tmp44
                                        (xit1).write (tmp44.copy)
                                        write.
                                          xcurrent-exception
                                          goto
                                            [stackUp]
                                              seq > @
                                                write.
                                                  xcurrent-exception
                                                  goto
                                                    [stackUp]
                                                      seq > @
                                                        TRUE.while
                                                          [unused]
                                                            seq > @
                                                              mkCopy (xit1.x__next__) > tmp45
                                                              (e9).write (tmp45.copy)
                                                              ((e9).<)
                                                              mkCopy (xit1) > tmp46
                                                              (lhs6).write (tmp46.copy)
                                                              tmp.write (goto ((((e9)).apply ((lhs6))).@))
                                                              (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                                              (e10).write (tmp.result)
                                                              ((e10).<)
                                                              mkCopy (e10) > tmp47
                                                              (xj).write (tmp47.copy)
                                                              [] > tmp48
                                                                memory > dddata
                                                                dddata.write (((xj).eq 5)) > @
                                                              (e11).write (tmp48.dddata)
                                                              ((e11).<)
                                                              (e11).if
                                                                seq
                                                                  stackUp.forward break
                                                                  TRUE
                                                                seq
                                                                  TRUE
                                                              mkCopy (xres.xappend) > tmp49
                                                              (e12).write (tmp49.copy)
                                                              ((e12).<)
                                                              mkCopy (xres) > tmp50
                                                              (lhs8).write (tmp50.copy)
                                                              mkCopy (xj) > tmp51
                                                              (lhs9).write (tmp51.copy)
                                                              tmp.write (goto ((((e12)).apply ((lhs8)) ((lhs9))).@))
                                                              (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                                              (e13).write (tmp.result)
                                                              ((e13).<)
                                                              TRUE
                                                        stackUp.forward raiseNothing
                                                if.
                                                  xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                                                  stackUp.forward xcurrent-exception
                                                  0
                                                stackUp.forward raiseNothing
                                        seq
                                          mkCopy (xcurrent-exception.xclass) > tmp52
                                          (e14).write (tmp52.copy)
                                          ((e14).<)
                                          mkCopy (e14.xid) > tmp53
                                          (e15).write (tmp53.copy)
                                          ((e15).<)
                                          mkCopy (xStopIteration.xid) > tmp54
                                          (e16).write (tmp54.copy)
                                          ((e16).<)
                                          [] > tmp55
                                            memory > dddata
                                            dddata.write (((e15).eq (e16))) > @
                                          (e17).write (tmp55.dddata)
                                          ((e17).<)
                                          (e17).if
                                            seq
                                              TRUE
                                            seq
                                              TRUE
                                          if.
                                            xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                                            seq
                                            0
                                          (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                                        mkCopy (xres.xappend) > tmp56
                                        (e18).write (tmp56.copy)
                                        ((e18).<)
                                        mkCopy (xres) > tmp57
                                        (lhs13).write (tmp57.copy)
                                        mkCopy (xi) > tmp58
                                        (lhs14).write (tmp58.copy)
                                        tmp.write (goto ((((e18)).apply ((lhs13)) ((lhs14))).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e19).write (tmp.result)
                                        ((e19).<)
                                        TRUE
                                  stackUp.forward raiseNothing
                          if.
                            xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                            stackUp.forward xcurrent-exception
                            0
                          stackUp.forward raiseNothing
                  seq
                    mkCopy (xcurrent-exception.xclass) > tmp59
                    (e20).write (tmp59.copy)
                    ((e20).<)
                    mkCopy (e20.xid) > tmp60
                    (e21).write (tmp60.copy)
                    ((e21).<)
                    mkCopy (xStopIteration.xid) > tmp61
                    (e22).write (tmp61.copy)
                    ((e22).<)
                    [] > tmp62
                      memory > dddata
                      dddata.write (((e21).eq (e22))) > @
                    (e23).write (tmp62.dddata)
                    ((e23).<)
                    (e23).if
                      seq
                        TRUE
                      seq
                        TRUE
                    if.
                      xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                      seq
                      0
                    (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                  mkCopy (xres) > tmp63
                  (lhs18).write (tmp63.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* 4 1 4 2 4 3))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e24).write (tmp.result)
                  ((e24).<)
                  [] > tmp64
                    memory > dddata
                    dddata.write (((lhs18).eq (e24))) > @
                  (e25).write (tmp64.dddata)
                  ((e25).<)
                  toReturn.write ((e25))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xnested_for_break2)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @