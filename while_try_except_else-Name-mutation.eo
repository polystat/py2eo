+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias cage org.eolang.gray.cage
+junit

[unused] > while_try_except_else
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        seq > apply
          cur.write (cur.is-empty.if 5 (cur.add 1))
          cur
      [] > raiseEmpty
        [] > xclass
          4 > xid
      [res] > return
        res > result
        [] > xclass
          3 > xid
      [] > break
        [] > xclass
          2 > xid
      [] > continue
        [] > xclass
          1 > xid
      [] > raiseNothing
        [] > xclass
          0 > xid
      cage > xcurrent-exception
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.length))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xwhile_try_except_else
      seq > @
        stdout "while_try_except_else\n"
        write.
          xwhile_try_except_else
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e6
                cage > e1
                cage > e5
                cage > e7
                cage > e0
                cage > xres
                cage > xx2
                cage > e10
                cage > lhs5
                cage > e4
                cage > xarr
                cage > e8
                cage > lhs2
                cage > lhs8
                cage > e3
                cage > lhs3
                cage > e9
                cage > e2
                cage > lhs7
                cage > e11
                seq > @
                  stdout "xwhile_try_except_else\n"
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xarr).write (tmp1.copy)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          TRUE.while
                            [unused]
                              seq > @
                                write.
                                  xcurrent-exception
                                  goto
                                    [stackUp]
                                      seq > @
                                        tmp.write (goto ((((xint)).apply (1)).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e1).write (tmp.result)
                                        ((e1).<)
                                        mkCopy (e1) > tmp2
                                        (xx2).write (tmp2.copy)
                                        tmp.write (goto ((((xprint)).apply ((xx))).@))
                                        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                        (e2).write (tmp.result)
                                        ((e2).<)
                                        stackUp.forward raiseNothing
                                seq
                                  mkCopy (xcurrent-exception.xclass) > tmp3
                                  (e4).write (tmp3.copy)
                                  ((e4).<)
                                  mkCopy (e4.xid) > tmp4
                                  (e5).write (tmp4.copy)
                                  ((e5).<)
                                  mkCopy (xValueError.xid) > tmp5
                                  (e6).write (tmp5.copy)
                                  ((e6).<)
                                  [] > tmp6
                                    memory > dddata
                                    dddata.write (((e5).eq (e6))) > @
                                  (e7).write (tmp6.dddata)
                                  ((e7).<)
                                  (e7).if
                                    seq
                                      tmp.write (goto ((((xprint)).apply ("Oops!  That was not a valid number.  Try again...")).@))
                                      (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                      (e3).write (tmp.result)
                                      ((e3).<)
                                      TRUE
                                    seq
                                      TRUE
                                  if.
                                    xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                                    seq
                                      (xres).write (TRUE)
                                      mkCopy (xarr.xappend) > tmp7
                                      (e8).write (tmp7.copy)
                                      ((e8).<)
                                      mkCopy (xarr) > tmp8
                                      (lhs2).write (tmp8.copy)
                                      (lhs3).write (1)
                                      tmp.write (goto ((((e8)).apply ((lhs2)) ((lhs3))).@))
                                      (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                                      (e9).write (tmp.result)
                                      ((e9).<)
                                      stackUp.forward break
                                    0
                                  (xcurrent-exception.xclass.xid.neq (raiseNothing.xclass.xid)).if (stackUp.forward xcurrent-exception) 0
                                TRUE
                          stackUp.forward raiseNothing
                  if.
                    xcurrent-exception.xclass.xid.neq (break.xclass.xid)
                    stackUp.forward xcurrent-exception
                    0
                  mkCopy (xres) > tmp9
                  (lhs7).write (tmp9.copy)
                  (lhs7).if
                    seq
                      mkCopy (xarr) > tmp10
                      (lhs5).write (tmp10.copy)
                      tmp.write (goto ((((xmyArray)).apply ((* 1))).@))
                      (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                      (e10).write (tmp.result)
                      ((e10).<)
                      [] > tmp11
                        memory > dddata
                        dddata.write (((lhs5).eq (e10))) > @
                      (e11).write (tmp11.dddata)
                      ((e11).<)
                      TRUE
                    seq
                      (lhs8).write (FALSE)
                      mkCopy (lhs8) > tmp12
                      (e11).write (tmp12.copy)
                      TRUE
                  toReturn.write ((e11))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xwhile_try_except_else)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @