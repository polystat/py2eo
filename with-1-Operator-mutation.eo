+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyslice preface.pyslice
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias xfakeclasses preface.xfakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xtuple preface.xtuple
+alias xint preface.xint
+alias xfloat preface.xfloat
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xBaseException preface.xBaseException
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > with-1
  (pystring "with-1") > x__name__
  [] > ap
    (pystring "with-1") > x__name__
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > ap
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyslice 0 0 0 > dummy-pyslice-usage
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      xfakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xtuple > dummy-xtuple
      xint > dummy-xint
      xfloat > dummy-xfloat
      xStopIteration > dummy-stop-iteration
      xBaseException > dummy-base-exception
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xt1
      seq > @
        stdout "with-1\n"
        write.
          xt1
          []
            (pystring "xt1") > x__name__
            [] > ap
              (pystring "xt1") > x__name__
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e1
                cage 0 > e7
                cage 0 > xvalue
                cage 0 > e0
                cage 0 > lhs10
                cage 0 > e4
                cage 0 > lhs9
                cage 0 > e10
                cage 0 > xz
                cage 0 > xvalue0
                cage 0 > xcaught
                cage 0 > e6
                cage 0 > xhit_except0
                cage 0 > lhs0
                cage 0 > lhs4
                cage 0 > e5
                cage 0 > e8
                cage 0 > lhs2
                cage 0 > lhs8
                cage 0 > e3
                cage 0 > lhs3
                cage 0 > e9
                cage 0 > xmanager0
                cage 0 > xCM
                cage 0 > e2
                cage 0 > lhs7
                seq > @
                  stdout "xt1\n"
                  (xvalue).write ((pyint 0))
                  (xvalue).force
                  write.
                    xCM
                    []
                      newUID.ap 0 > x__id__
                      (goto (ap.@)).result > @
                      [x] > eq
                        x__id__.eq (x.x__id__) > @
                      [] > ap
                        [stackUp] > @
                          cage result > pResult
                          cage 0 > tmp
                          [] > result
                            cage 0 > x__enter__
                            cage 0 > x__exit__
                            xCM > x__class__
                            seq > initFields
                              write.
                                x__enter__
                                []
                                  (pystring "x__enter__") > x__name__
                                  [xselfNotCopied] > ap
                                    (pystring "x__enter__") > x__name__
                                    [stackUp] > @
                                      cage 0 > tmp
                                      cage 0 > toReturn
                                      xselfNotCopied' > xself
                                      seq > @
                                        stdout "x__enter__\n"
                                        xself.<
                                        ((xvalue)).aug-sub ((pyint 1))
                                        toReturn.write ((pyint 10))
                                        stackUp.forward (return toReturn)
                                        stackUp.forward (return 0)
                                        123
                              write.
                                x__exit__
                                []
                                  (pystring "x__exit__") > x__name__
                                  [xselfNotCopied xaNotCopied xbNotCopied xcNotCopied] > ap
                                    (pystring "x__exit__") > x__name__
                                    [stackUp] > @
                                      cage 0 > tmp
                                      cage 0 > toReturn
                                      xselfNotCopied' > xself
                                      xaNotCopied' > xa
                                      xbNotCopied' > xb
                                      xcNotCopied' > xc
                                      seq > @
                                        stdout "x__exit__\n"
                                        xself.<
                                        xa.<
                                        xb.<
                                        xc.<
                                        ((xvalue)).aug-sub ((pyint 100))
                                        stackUp.forward (return 0)
                                        123
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xCM)).ap).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xmanager0).write (tmp1.copy)
                  mkCopy (xmanager0.x__enter__) > tmp2
                  (e1).write (tmp2.copy)
                  ((e1).<)
                  mkCopy (xmanager0) > tmp3
                  (lhs0).write (tmp3.copy)
                  tmp.write (goto ((((e1)).ap ((lhs0))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e2).write (tmp.result)
                  ((e2).<)
                  mkCopy (e2) > tmp4
                  (xvalue0).write (tmp4.copy)
                  (xhit_except0).write ((pybool FALSE))
                  (xhit_except0).force
                  xcaught.write (pybool FALSE)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        cage 0 > xcurrent-exception
                        cage 0 > xexcinexc
                        cage 0 > tmp
                        seq > @
                          mkCopy (xvalue0) > tmp5
                          (xz).write (tmp5.copy)
                          ((xvalue)).aug-sub ((xz))
                          stackUp.forward raiseNothing
                  seq
                    write.
                      xexcinexc
                      goto
                        [stackUp]
                          if. > @
                            is-exception (xcurrent-exception.x__class__.x__id__)
                            seq
                              (xcaught).write ((pybool TRUE))
                              (xcaught).force
                              (xhit_except0).write ((pybool TRUE))
                              (xhit_except0).force
                              mkCopy (xmanager0.x__exit__) > tmp6
                              (e3).write (tmp6.copy)
                              ((e3).<)
                              mkCopy (xmanager0) > tmp7
                              (lhs2).write (tmp7.copy)
                              mkCopy (xcurrent-exception.x__class__) > tmp8
                              (e4).write (tmp8.copy)
                              ((e4).<)
                              mkCopy (xcurrent-exception) > tmp9
                              (lhs3).write (tmp9.copy)
                              (lhs4).write ((pystring "None: is there a None literal in the EO language?"))
                              (lhs4).force
                              tmp.write (goto ((((e3)).ap ((lhs2)) ((e4)) ((lhs3)) ((lhs4))).@))
                              (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                              (e5).write (tmp.result)
                              ((e5).<)
                              (e6).write (((e5).not))
                              (e6).force
                              ((e6).<)
                              (e6).as-bool.if
                                seq
                                  stackUp.forward raiseEmpty
                                  (pybool TRUE)
                                seq
                                  (pybool TRUE)
                              xcaught.if (stackUp.forward raiseNothing) (stackUp.forward xcurrent-exception)
                              0
                            seq
                              (stackUp.forward xcurrent-exception)
                              0
                    xexcinexc.x__class__.x__id__
                    if.
                      xcurrent-exception.x__class__.x__id__.eq (raiseNothing.x__class__.x__id__)
                      seq
                        0
                      0
                    (e9).write (((xhit_except0).not))
                    (e9).force
                    ((e9).<)
                    (e9).as-bool.if
                      seq
                        mkCopy (xmanager0.x__exit__) > tmp10
                        (e7).write (tmp10.copy)
                        ((e7).<)
                        mkCopy (xmanager0) > tmp11
                        (lhs7).write (tmp11.copy)
                        (lhs8).write ((pystring "None: is there a None literal in the EO language?"))
                        (lhs8).force
                        (lhs9).write ((pystring "None: is there a None literal in the EO language?"))
                        (lhs9).force
                        (lhs10).write ((pystring "None: is there a None literal in the EO language?"))
                        (lhs10).force
                        tmp.write (goto ((((e7)).ap ((lhs7)) ((lhs8)) ((lhs9)) ((lhs10))).@))
                        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                        (e8).write (tmp.result)
                        ((e8).<)
                        (pybool TRUE)
                      seq
                        (pybool TRUE)
                    ((is-break-continue-return (xcurrent-exception.x__class__.x__id__)).or ((is-exception (xcurrent-exception.x__class__.x__id__)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                    ((is-break-continue-return (xexcinexc.x__class__.x__id__)).or ((is-exception (xexcinexc.x__class__.x__id__)))).if (stackUp.forward xexcinexc) 0
                  (e10).write (((xvalue).eq (pyint 111)))
                  (e10).force
                  ((e10).<)
                  toReturn.write ((e10))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xt1)).ap).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  seq > @
    (goto (ap.@)).result