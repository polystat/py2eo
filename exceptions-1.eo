+package org.eolang
+alias goto org.eolang.gray.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.gray.cage
+alias pyint preface.pyint
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit

[unused] > exceptions-1
  [] > apply
    [stackUp] > @
      [x] > mkCopy
        x' > copy
        copy.< > @
      [] > newUID
        memory > cur
        [unused] > apply
          seq > @
            cur.write (cur.is-empty.if (5) (cur.add (1)))
            (pyint cur)
      [] > raiseEmpty
        [] > xclass
          (pyint 4) > xid
      [res] > return
        res > result
        [] > xclass
          (pyint 3) > xid
      [] > break
        [] > xclass
          (pyint 2) > xid
      [] > continue
        [] > xclass
          (pyint 1) > xid
      [] > raiseNothing
        [] > xclass
          (pyint 0) > xid
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      cage > xcurrent-exception
      cage > xcaught
      pyint 0 > dummy-int-usage
      pybool TRUE > dummy-bool-usage
      pystring (sprintf "") > dummy-bool-string
      [] > xmyArray
        [initValue] > apply
          [stackUp] > @
            cage > pResult
            [] > result
              cage > value
              [] > xlength
                [self] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (pyint (self.value.length)))
                      123
              [] > xget
                [self i] > apply
                  [stackUp] > @
                    seq > @
                      stackUp.forward (return (self.value.get i))
                      123
              [] > xappend
                [self x] > apply
                  [stackUp] > @
                    seq > @
                      mkCopy (self.value) > tmp
                      self.value.write (tmp.copy.append x)
                      stackUp.forward (return 0)
            seq > @
              result.value.write initValue
              pResult.write result
              stackUp.forward (return pResult)
      cage > tmp
      cage > toReturn
      cage > assertMe
      cage > xte1
      seq > @
        stdout "exceptions-1\n"
        write.
          xte1
          []
            [] > apply
              [stackUp] > @
                cage > tmp
                cage > toReturn
                cage > e6
                cage > e1
                cage > e5
                cage > xo
                cage > e0
                cage > xC
                cage > e4
                cage > e3
                cage > xcaught
                cage > e2
                cage > lhs1
                cage > e7
                seq > @
                  stdout "xte1\n"
                  write.
                    xC
                    []
                      newUID.apply 0 > xid
                      [] > apply
                        [stackUp] > @
                          cage > pResult
                          [] > result
                            xC > xclass
                            seq > initFields
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  (xcaught).write ((pybool FALSE))
                  (xcaught).force
                  xcaught.write (pybool TRUE)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        seq > @
                          tmp.write (goto ((((xC)).apply).@))
                          (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
                          (e0).write (tmp.result)
                          ((e0).<)
                          mkCopy (e0) > tmp1
                          (xo).write (tmp1.copy)
                          stackUp.forward (xo)
                          stackUp.forward raiseNothing
                  seq
                    if.
                      is-exception (xcurrent-exception.xclass.xid)
                      seq
                        mkCopy (xcurrent-exception.xclass) > tmp2
                        (e4).write (tmp2.copy)
                        ((e4).<)
                        mkCopy (e4.xid) > tmp3
                        (e5).write (tmp3.copy)
                        ((e5).<)
                        mkCopy (xC.xid) > tmp4
                        (e6).write (tmp4.copy)
                        ((e6).<)
                        (e7).write (((e5).eq (e6)))
                        (e7).force
                        ((e7).<)
                        (e7).if
                          seq
                            toReturn.write ((pybool TRUE))
                            stackUp.forward (return toReturn)
                            (xcaught).write ((pybool TRUE))
                            (xcaught).force
                            (pybool TRUE)
                          seq
                            mkCopy (xcurrent-exception.xclass) > tmp5
                            (e1).write (tmp5.copy)
                            ((e1).<)
                            mkCopy (e1.xid) > tmp6
                            (e2).write (tmp6.copy)
                            ((e2).<)
                            (lhs1).write ((pyint 1))
                            (lhs1).force
                            (e3).write (((e2).eq (lhs1)))
                            (e3).force
                            ((e3).<)
                            (e3).if
                              seq
                                toReturn.write ((pybool FALSE))
                                stackUp.forward (return toReturn)
                                (xcaught).write ((pybool TRUE))
                                (xcaught).force
                                (pybool TRUE)
                              seq
                                (pybool TRUE)
                            (pybool TRUE)
                        0
                      0
                    if.
                      xcurrent-exception.xclass.xid.eq (raiseNothing.xclass.xid)
                      seq
                        0
                      0
                    ((is-break-continue-return (xcurrent-exception.xclass.xid)).or ((is-exception (xcurrent-exception.xclass.xid)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                  toReturn.write ((pybool FALSE))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xte1)).apply).@))
        (tmp.xclass.xid.neq (return.xclass.xid)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @