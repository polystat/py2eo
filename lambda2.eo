+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xlen preface.xlen
+alias xlist preface.xlist
+alias xint preface.xint
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xrange preface.xrange
+junit

[unused] > lambda2
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xlist > dummy-xlist
      xint > dummy-xint
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xlambda1
      seq > @
        stdout "lambda2\n"
        write.
          xlambda1
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > e6
                cage 0 > xlhs1
                cage 0 > e5
                cage 0 > e0
                cage 0 > xlhs0
                cage 0 > e3
                cage 0 > xlhs2
                cage 0 > xnew_list
                cage 0 > xmy_list
                cage 0 > lhs5
                cage 0 > e4
                cage 0 > xanonFun0
                seq > @
                  stdout "xlambda1\n"
                  tmp.write (goto ((((xmyArray)).apply ((* (pyint 1) (pyint 5) (pyint 4) (pyint 6) (pyint 8) (pyint 11) (pyint 3) (pyint 12)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xmy_list).write (tmp1.copy)
                  write.
                    xanonFun0
                    []
                      [xxNotCopied] > apply
                        [stackUp] > @
                          cage 0 > tmp
                          cage 0 > toReturn
                          xxNotCopied' > xx
                          cage 0 > e1
                          cage 0 > lhs3
                          cage 0 > e2
                          seq > @
                            stdout "xanonFun0\n"
                            xx.<
                            (e1).write (((xx).mod (pyint 2)))
                            (e1).force
                            ((e1).<)
                            (lhs3).write ((pyint 0))
                            (lhs3).force
                            (e2).write (((e1).eq (lhs3)))
                            (e2).force
                            ((e2).<)
                            toReturn.write ((e2))
                            stackUp.forward (return toReturn)
                            123
                  mkCopy (xmy_list) > tmp2
                  (xlhs0).write (tmp2.copy)
                  tmp.write (goto ((((xfilter)).apply ((xanonFun0)) ((xlhs0))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  mkCopy (e3) > tmp3
                  (xlhs1).write (tmp3.copy)
                  tmp.write (goto ((((xlist)).apply ((xlhs1))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e4).write (tmp.result)
                  ((e4).<)
                  mkCopy (e4) > tmp4
                  (xlhs2).write (tmp4.copy)
                  mkCopy (xlhs2) > tmp5
                  (xnew_list).write (tmp5.copy)
                  tmp.write (goto ((((xlen)).apply ((xnew_list))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e5).write (tmp.result)
                  ((e5).<)
                  (lhs5).write ((pyint 4))
                  (lhs5).force
                  (e6).write (((e5).eq (lhs5)))
                  (e6).force
                  ((e6).<)
                  toReturn.write ((e6))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xlambda1)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @