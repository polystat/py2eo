+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyslice preface.pyslice
+alias pyint preface.pyint
+alias pair preface.pair
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias xfakeclasses preface.xfakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xmyMap preface.xmyMap
+alias xlen preface.xlen
+alias xmap preface.xmap
+alias xfilter preface.xfilter
+alias xstr preface.xstr
+alias xsum preface.xsum
+alias xlist preface.xlist
+alias xtuple preface.xtuple
+alias xint preface.xint
+alias xfloat preface.xfloat
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xBaseException preface.xBaseException
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xAssertionError preface.xAssertionError
+alias xValueError preface.xValueError
+alias xrange preface.xrange
+junit

[unused] > annotated-1
  (pystring "annotated-1") > x__name__
  [] > ap
    (pystring "annotated-1") > x__name__
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > ap
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyslice 0 0 0 > dummy-pyslice-usage
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      xfakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      xmyMap > dummy-xmyMap
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xmap > dummy-xmap
      xfilter > dummy-xfilter
      pair > dummy-pair
      xstr > dummy-xstr
      xsum > dummy-xsum
      xlist > dummy-xlist
      xtuple > dummy-xtuple
      xint > dummy-xint
      xfloat > dummy-xfloat
      xStopIteration > dummy-stop-iteration
      xBaseException > dummy-base-exception
      xZeroDivisionError > dummy-xZeroDivisionError
      xAssertionError > dummy-xAssertionError
      xValueError > dummy-xValueError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xtest
      seq > @
        stdout "annotated-1\n"
        write.
          xtest
          []
            (pystring "xtest") > x__name__
            [] > ap
              (pystring "xtest") > x__name__
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > xCls
                cage 0 > xd
                cage 0 > e1
                cage 0 > e0
                cage 0 > xc
                cage 0 > e4
                cage 0 > lhs2
                cage 0 > e2
                cage 0 > e6
                cage 0 > lhs0
                cage 0 > lhs4
                cage 0 > e5
                cage 0 > lhs1
                cage 0 > e7
                cage 0 > lhs8
                cage 0 > e3
                cage 0 > lhs6
                seq > @
                  stdout "xtest\n"
                  write.
                    xCls
                    []
                      newUID.ap 0 > x__id__
                      (goto (ap.@)).result > @
                      [x] > eq
                        x__id__.eq (x.x__id__) > @
                      [] > ap
                        [stackUp] > @
                          cage result > pResult
                          cage 0 > tmp
                          [] > result
                            cage 0 > xx
                            cage 0 > xy
                            xCls > x__class__
                            seq > initFields
                              xx.write (pyint 111)
                              xy.write (pyint 11)
                          seq (result.initFields) (pResult.write result) (stackUp.forward (return pResult)) > @
                  tmp.write (goto ((((xCls)).ap).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xc).write (tmp1.copy)
                  ((xc).xx).write ((pyint 0))
                  ((xc).xx).force
                  tmp.write (goto ((((xmyMap)).ap (((*)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xd).write (tmp2.copy)
                  mkCopy (xd.xsetAtIndex) > tmp3
                  (e2).write (tmp3.copy)
                  ((e2).<)
                  mkCopy (xd) > tmp4
                  (lhs0).write (tmp4.copy)
                  (lhs1).write ((pystring "a"))
                  (lhs1).force
                  (lhs2).write ((pyint 0))
                  (lhs2).force
                  tmp.write (goto ((((e2)).ap ((lhs0)) ((lhs1)) ((lhs2))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  (e4).write (((xd).get (pystring "a")))
                  (e4).force
                  ((e4).<)
                  (lhs4).write ((pyint 0))
                  (lhs4).force
                  (e5).write (((e4).eq (lhs4)))
                  (e5).force
                  ((e5).<)
                  (e5).as-bool.if
                    seq
                      mkCopy (xc.xx) > tmp5
                      (e6).write (tmp5.copy)
                      ((e6).<)
                      (lhs6).write ((pyint 0))
                      (lhs6).force
                      (e7).write (((e6).eq (lhs6)))
                      (e7).force
                      ((e7).<)
                      (pybool TRUE)
                    seq
                      (lhs8).write ((pybool FALSE))
                      (lhs8).force
                      mkCopy (lhs8) > tmp6
                      (e7).write (tmp6.copy)
                      (pybool TRUE)
                  toReturn.write ((e7))
                  stackUp.forward (return toReturn)
                  stackUp.forward (return 0)
                  123
        tmp.write (goto ((((xtest)).ap).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
        stackUp.forward (return 0)
  seq > @
    (goto (ap.@)).result