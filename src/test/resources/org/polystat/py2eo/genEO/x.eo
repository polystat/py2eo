+package org.eolang
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf

[] > x
  [] > cHeap
    (* memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory) > a
    memory > last
    [index] > get
      a.get index > @
    [index value] > set
      (a.get index).write value > @
    [value] > new
      seq > @
        last.write (last.is-empty.if 0 (last.add 1))
        (a.get last).write value
        last
  cHeap > valuesHeap
  cHeap > indirHeap
  memory > nextClosure
  [closure] > tmpFun0
    seq > @
      TRUE
  [closure] > tmpFun1
    seq > @
      "None: is there a None literal in the EO language?"
  [closure] > tmpFun2
    memory > nextClosure
    memory > bb_finish0
    memory > bb_start0
    seq > @
      bb_finish0.write ((((indirHeap).new)) (0))
      bb_start0.write ((((indirHeap).new)) (0))
      ((((indirHeap).set)) ((bb_start0)) (((((valuesHeap).new)) ("None: is there a None literal in the EO language?"))))
      ((((indirHeap).set)) ((bb_finish0)) (((((valuesHeap).new)) ("None: is there a None literal in the EO language?"))))
      nextClosure.write (* 0 (bb_finish0) (bb_start0))
      ((((indirHeap).set)) ((bb_start0)) (((((valuesHeap).new)) ((nextClosure)))))
      nextClosure.write (* 1 (bb_finish0) (bb_start0))
      ((((indirHeap).set)) ((bb_finish0)) (((((valuesHeap).new)) ((nextClosure)))))
      (((((allFuns).get (((((valuesHeap).get)) (((((indirHeap).get)) ((bb_start0))))).get 0)).callme)) (((((valuesHeap).get)) (((((indirHeap).get)) ((bb_start0)))))))
  * > allFuns
    []
      (tmpFun0) > callme
    []
      (tmpFun1) > callme
    []
      (tmpFun2) > callme
  seq > @
    nextClosure.write (* 2)
    (allFuns.get (nextClosure.get 0)).callme nextClosure
