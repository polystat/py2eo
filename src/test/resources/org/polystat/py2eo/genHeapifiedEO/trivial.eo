+package org.eolang
+alias cage org.eolang.gray.cage
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+junit

[] > trivial
  [] > cHeap
    (* memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory memory) > a
    memory > last
    [index] > get
      a.get index > @
    [index value] > set
      (a.get index).write value > @
    [value] > new
      seq > @
        last.write (last.is-empty.if 0 (last.add 1))
        (a.get last).write value
        last
  cHeap > valuesHeap
  cHeap > indirHeap
  memory > nextClosure
  [closure] > tmpFun0
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 19)) (((((xvaluesHeap).xnew)) (0))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 12))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 12)))))))
  [closure] > tmpFun1
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 3)) (((((xvaluesHeap).xnew)) (1))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 23))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 23)))))))
  [closure] > tmpFun2
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 25)) (((((xvaluesHeap).xnew)) (0))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 4))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 4)))))))
  [closure] > tmpFun3
    seq > @
      (TRUE.if (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 16))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 16))))))) (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 2))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 2))))))))
  [closure] > tmpFun4
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 21)) (((((xvaluesHeap).xnew)) ((((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 25))))).less 10)))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 7))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 7)))))))
  [closure] > tmpFun5
    seq > @
      ((((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 21))))).not).if (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 14))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 14))))))) (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 20))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 20))))))))
  [closure] > tmpFun6
    seq > @
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 5))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 5)))))))
  [closure] > tmpFun7
    seq > @
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 10))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 10)))))))
  [closure] > tmpFun8
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 18)) (((((xvaluesHeap).xnew)) ((((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 19))))).add ((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 3))))))))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 17))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 17)))))))
  [closure] > tmpFun9
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 11)) (((((xvaluesHeap).xnew)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 18)))))))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 1))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 1)))))))
  [closure] > tmpFun10
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 13)) (((((xvaluesHeap).xnew)) ((((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 25))))).add 1)))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 15))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 15)))))))
  [closure] > tmpFun11
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 25)) (((((xvaluesHeap).xnew)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 13)))))))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 26))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 26)))))))
  [closure] > tmpFun12
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 19)) (((((xvaluesHeap).xnew)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 3)))))))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 24))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 24)))))))
  [closure] > tmpFun13
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 3)) (((((xvaluesHeap).xnew)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 11)))))))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 4))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 4)))))))
  [closure] > tmpFun14
    seq > @
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 5))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 5)))))))
  [closure] > tmpFun15
    seq > @
      ((((xindirHeap).xset)) (((xclosure).get 6)) (((((xvaluesHeap).xnew)) ((55.eq ((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 19))))))))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 8))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 8)))))))
  [closure] > tmpFun16
    seq > @
      ((((xvaluesHeap).xget)) (((((xindirHeap).xget)) (((xclosure).get 6)))))
  [closure] > tmpFun17
    seq > @
      "None: is there a None literal in the EO language?"
  [closure] > tmpFun18
    memory > bb_interm6
    memory > bb_else0
    memory > f1
    memory > bb_interm2
    memory > bb_interm3
    memory > e3
    memory > bb_interm4
    memory > bb_interm11
    memory > bb_finish0
    memory > bb_interm5
    memory > f2
    memory > bb_interm0
    memory > e1
    memory > bb_yes0
    memory > bb_interm9
    memory > bb_body0
    memory > bb_interm7
    memory > e0
    memory > f0
    memory > nextClosure
    memory > bb_no0
    memory > e2
    memory > bb_start0
    memory > bb_interm1
    memory > bb_interm10
    memory > ii
    memory > bb_interm8
    seq > @
      bb_interm6.write ((((xindirHeap).xnew)) (0))
      bb_else0.write ((((xindirHeap).xnew)) (0))
      f1.write ((((xindirHeap).xnew)) (0))
      bb_interm2.write ((((xindirHeap).xnew)) (0))
      bb_interm3.write ((((xindirHeap).xnew)) (0))
      e3.write ((((xindirHeap).xnew)) (0))
      bb_interm4.write ((((xindirHeap).xnew)) (0))
      bb_interm11.write ((((xindirHeap).xnew)) (0))
      bb_finish0.write ((((xindirHeap).xnew)) (0))
      bb_interm5.write ((((xindirHeap).xnew)) (0))
      f2.write ((((xindirHeap).xnew)) (0))
      bb_interm0.write ((((xindirHeap).xnew)) (0))
      e1.write ((((xindirHeap).xnew)) (0))
      bb_yes0.write ((((xindirHeap).xnew)) (0))
      bb_interm9.write ((((xindirHeap).xnew)) (0))
      bb_body0.write ((((xindirHeap).xnew)) (0))
      bb_interm7.write ((((xindirHeap).xnew)) (0))
      e0.write ((((xindirHeap).xnew)) (0))
      f0.write ((((xindirHeap).xnew)) (0))
      bb_no0.write ((((xindirHeap).xnew)) (0))
      e2.write ((((xindirHeap).xnew)) (0))
      bb_start0.write ((((xindirHeap).xnew)) (0))
      bb_interm1.write ((((xindirHeap).xnew)) (0))
      bb_interm10.write ((((xindirHeap).xnew)) (0))
      ii.write ((((xindirHeap).xnew)) (0))
      bb_interm8.write ((((xindirHeap).xnew)) (0))
      ((((xindirHeap).xset)) ((xe1)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xf1)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xe3)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xe2)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xii)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xf2)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xe0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xf0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_start0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm1)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm2)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_body0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm4)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_yes0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_no0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm5)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm7)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm6)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm9)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm8)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm10)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_else0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm3)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_interm11)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      ((((xindirHeap).xset)) ((xbb_finish0)) (((((xvaluesHeap).xnew)) ("None: is there a None literal in the EO language?"))))
      nextClosure.write (* 0 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_start0)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 1 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm0)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 2 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm1)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 3 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm2)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 4 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_body0)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 5 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm4)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 6 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_yes0)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 7 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_no0)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 8 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm5)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 9 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm7)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 10 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm6)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 11 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm9)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 12 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm8)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 13 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm10)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 14 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_else0)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 15 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm3)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 16 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_interm11)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      nextClosure.write (* 17 (xbb_interm6) (xbb_else0) (xf1) (xbb_interm2) (xbb_interm3) (xe3) (xbb_interm4) (xbb_interm11) (xbb_finish0) (xbb_interm5) (xf2) (xbb_interm0) (xe1) (xbb_yes0) (xbb_interm9) (xbb_body0) (xbb_interm7) (xe0) (xf0) (xbb_no0) (xe2) (xbb_start0) (xbb_interm1) (xbb_interm10) (xii) (xbb_interm8))
      ((((xindirHeap).xset)) ((xbb_finish0)) (((((xvaluesHeap).xnew)) ((xnextClosure)))))
      (((((xallFuns).get (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) ((xbb_start0))))).get 0)).xcallme)) (((((xvaluesHeap).xget)) (((((xindirHeap).xget)) ((xbb_start0)))))))
  * > allFuns
    []
      (xtmpFun0) > callme
    []
      (xtmpFun1) > callme
    []
      (xtmpFun2) > callme
    []
      (xtmpFun3) > callme
    []
      (xtmpFun4) > callme
    []
      (xtmpFun5) > callme
    []
      (xtmpFun6) > callme
    []
      (xtmpFun7) > callme
    []
      (xtmpFun8) > callme
    []
      (xtmpFun9) > callme
    []
      (xtmpFun10) > callme
    []
      (xtmpFun11) > callme
    []
      (xtmpFun12) > callme
    []
      (xtmpFun13) > callme
    []
      (xtmpFun14) > callme
    []
      (xtmpFun15) > callme
    []
      (xtmpFun16) > callme
    []
      (xtmpFun17) > callme
    []
      (xtmpFun18) > callme
  seq > @
    nextClosure.write (* 18)
    (allFuns.get (nextClosure.get 0)).callme nextClosure
