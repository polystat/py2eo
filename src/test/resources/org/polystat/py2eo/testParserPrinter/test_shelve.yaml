python: |
  import unittest
  import shelve
  import glob
  from test import support
  from collections.abc import MutableMapping
  from test.test_dbm import dbm_iterator
  
  def L1(s):
      return s.decode("latin-1")
  
  class byteskeydict(MutableMapping):
      "Mapping that supports bytes keys"
  
      def __init__(self):
          self.d = {}
  
      def __getitem__(self, key):
          return self.d[L1(key)]
  
      def __setitem__(self, key, value):
          self.d[L1(key)] = value
  
      def __delitem__(self, key):
          del self.d[L1(key)]
  
      def __len__(self):
          return len(self.d)
  
      def iterkeys(self):
          for k in self.d.keys():
              yield k.encode("latin-1")
  
      __iter__ = iterkeys
  
      def keys(self):
          return list(self.iterkeys())
  
      def copy(self):
          return byteskeydict(self.d)
  
  
  class TestCase(unittest.TestCase):
  
      fn = "shelftemp.db"
  
      def tearDown(self):
          for f in glob.glob(self.fn+"*"):
              support.unlink(f)
  
      def test_close(self):
          d1 = {}
          s = shelve.Shelf(d1, protocol=2, writeback=False)
          s['key1'] = [1,2,3,4]
          self.assertEqual(s['key1'], [1,2,3,4])
          self.assertEqual(len(s), 1)
          s.close()
          self.assertRaises(ValueError, len, s)
          try:
              s['key1']
          except ValueError:
              pass
          else:
              self.fail('Closed shelf should not find a key')
  
      def test_ascii_file_shelf(self):
          s = shelve.open(self.fn, protocol=0)
          try:
              s['key1'] = (1,2,3,4)
              self.assertEqual(s['key1'], (1,2,3,4))
          finally:
              s.close()
  
      def test_binary_file_shelf(self):
          s = shelve.open(self.fn, protocol=1)
          try:
              s['key1'] = (1,2,3,4)
              self.assertEqual(s['key1'], (1,2,3,4))
          finally:
              s.close()
  
      def test_proto2_file_shelf(self):
          s = shelve.open(self.fn, protocol=2)
          try:
              s['key1'] = (1,2,3,4)
              self.assertEqual(s['key1'], (1,2,3,4))
          finally:
              s.close()
  
      def test_in_memory_shelf(self):
          d1 = byteskeydict()
          with shelve.Shelf(d1, protocol=0) as s:
              s['key1'] = (1,2,3,4)
              self.assertEqual(s['key1'], (1,2,3,4))
          d2 = byteskeydict()
          with shelve.Shelf(d2, protocol=1) as s:
              s['key1'] = (1,2,3,4)
              self.assertEqual(s['key1'], (1,2,3,4))
  
          self.assertEqual(len(d1), 1)
          self.assertEqual(len(d2), 1)
          self.assertNotEqual(d1.items(), d2.items())
  
      def test_mutable_entry(self):
          d1 = byteskeydict()
          with shelve.Shelf(d1, protocol=2, writeback=False) as s:
              s['key1'] = [1,2,3,4]
              self.assertEqual(s['key1'], [1,2,3,4])
              s['key1'].append(5)
              self.assertEqual(s['key1'], [1,2,3,4])
  
          d2 = byteskeydict()
          with shelve.Shelf(d2, protocol=2, writeback=True) as s:
              s['key1'] = [1,2,3,4]
              self.assertEqual(s['key1'], [1,2,3,4])
              s['key1'].append(5)
              self.assertEqual(s['key1'], [1,2,3,4,5])
  
          self.assertEqual(len(d1), 1)
          self.assertEqual(len(d2), 1)
  
      def test_keyencoding(self):
          d = {}
