python: |
  import getpass
  import os
  import unittest
  from io import BytesIO, StringIO, TextIOWrapper
  from unittest import mock
  from test import support
  
  try:
      import termios
  except ImportError:
      termios = None
  try:
      import pwd
  except ImportError:
      pwd = None
  
  @mock.patch('os.environ')
  class GetpassGetuserTest(unittest.TestCase):
  
      def test_username_takes_username_from_env(self, environ):
          expected_name = 'some_name'
          environ.get.return_value = expected_name
          self.assertEqual(expected_name, getpass.getuser())
  
      def test_username_priorities_of_env_values(self, environ):
          environ.get.return_value = None
          try:
              getpass.getuser()
          except ImportError: # in case there's no pwd module
              pass
          self.assertEqual(
              environ.get.call_args_list,
              [mock.call(x) for x in ('LOGNAME', 'USER', 'LNAME', 'USERNAME')])
  
      def test_username_falls_back_to_pwd(self, environ):
          expected_name = 'some_name'
          environ.get.return_value = None
          if pwd:
              with mock.patch('os.getuid') as uid, \
                      mock.patch('pwd.getpwuid') as getpw:
                  uid.return_value = 42
                  getpw.return_value = [expected_name]
                  self.assertEqual(expected_name,
                                   getpass.getuser())
                  getpw.assert_called_once_with(42)
          else:
              self.assertRaises(ImportError, getpass.getuser)
  
  
  class GetpassRawinputTest(unittest.TestCase):
  
      def test_flushes_stream_after_prompt(self):
          # see issue 1703
          stream = mock.Mock(spec=StringIO)
          input = StringIO('input_string')
          getpass._raw_input('some_prompt', stream, input=input)
          stream.flush.assert_called_once_with()
  
      def test_uses_stderr_as_default(self):
          input = StringIO('input_string')
          prompt = 'some_prompt'
          with mock.patch('sys.stderr') as stderr:
              getpass._raw_input(prompt, input=input)
              stderr.write.assert_called_once_with(prompt)
  
      @mock.patch('sys.stdin')
      def test_uses_stdin_as_default_input(self, mock_input):
          mock_input.readline.return_value = 'input_string'
          getpass._raw_input(stream=StringIO())
          mock_input.readline.assert_called_once_with()
  
      @mock.patch('sys.stdin')
      def test_uses_stdin_as_different_locale(self, mock_input):
          stream = TextIOWrapper(BytesIO(), encoding="ascii")
