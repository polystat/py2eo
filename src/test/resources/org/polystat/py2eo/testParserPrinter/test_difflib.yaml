python: |
  import difflib
  from test.support import run_unittest, findfile
  import unittest
  import doctest
  import sys
  
  
  class TestWithAscii(unittest.TestCase):
      def test_one_insert(self):
          sm = difflib.SequenceMatcher(None, 'b' * 100, 'a' + 'b' * 100)
          self.assertAlmostEqual(sm.ratio(), 0.995, places=3)
          self.assertEqual(list(sm.get_opcodes()),
              [   ('insert', 0, 0, 0, 1),
                  ('equal', 0, 100, 1, 101)])
          self.assertEqual(sm.bpopular, set())
          sm = difflib.SequenceMatcher(None, 'b' * 100, 'b' * 50 + 'a' + 'b' * 50)
          self.assertAlmostEqual(sm.ratio(), 0.995, places=3)
          self.assertEqual(list(sm.get_opcodes()),
              [   ('equal', 0, 50, 0, 50),
                  ('insert', 50, 50, 50, 51),
                  ('equal', 50, 100, 51, 101)])
          self.assertEqual(sm.bpopular, set())
  
      def test_one_delete(self):
          sm = difflib.SequenceMatcher(None, 'a' * 40 + 'c' + 'b' * 40, 'a' * 40 + 'b' * 40)
          self.assertAlmostEqual(sm.ratio(), 0.994, places=3)
          self.assertEqual(list(sm.get_opcodes()),
              [   ('equal', 0, 40, 0, 40),
                  ('delete', 40, 41, 40, 40),
                  ('equal', 41, 81, 40, 80)])
  
      def test_bjunk(self):
          sm = difflib.SequenceMatcher(isjunk=lambda x: x == ' ',
                  a='a' * 40 + 'b' * 40, b='a' * 44 + 'b' * 40)
          self.assertEqual(sm.bjunk, set())
  
          sm = difflib.SequenceMatcher(isjunk=lambda x: x == ' ',
                  a='a' * 40 + 'b' * 40, b='a' * 44 + 'b' * 40 + ' ' * 20)
          self.assertEqual(sm.bjunk, {' '})
  
          sm = difflib.SequenceMatcher(isjunk=lambda x: x in [' ', 'b'],
                  a='a' * 40 + 'b' * 40, b='a' * 44 + 'b' * 40 + ' ' * 20)
          self.assertEqual(sm.bjunk, {' ', 'b'})
  
  
  class TestAutojunk(unittest.TestCase):
      """Tests for the autojunk parameter added in 2.7"""
      def test_one_insert_homogenous_sequence(self):
          # By default autojunk=True and the heuristic kicks in for a sequence
          # of length 200+
          seq1 = 'b' * 200
          seq2 = 'a' + 'b' * 200
  
          sm = difflib.SequenceMatcher(None, seq1, seq2)
          self.assertAlmostEqual(sm.ratio(), 0, places=3)
          self.assertEqual(sm.bpopular, {'b'})
  
          # Now turn the heuristic off
          sm = difflib.SequenceMatcher(None, seq1, seq2, autojunk=False)
          self.assertAlmostEqual(sm.ratio(), 0.9975, places=3)
          self.assertEqual(sm.bpopular, set())
  
  
  class TestSFbugs(unittest.TestCase):
      def test_ratio_for_null_seqn(self):
          # Check clearing of SF bug 763023
          s = difflib.SequenceMatcher(None, [], [])
          self.assertEqual(s.ratio(), 1)
          self.assertEqual(s.quick_ratio(), 1)
          self.assertEqual(s.real_quick_ratio(), 1)
  
      def test_comparing_empty_lists(self):
          # Check fix for bug #979794
          group_gen = difflib.SequenceMatcher(None, [], []).get_grouped_opcodes()
          self.assertRaises(StopIteration, next, group_gen)
          diff_gen = difflib.unified_diff([], [])
          self.assertRaises(StopIteration, next, diff_gen)
  
      def test_matching_blocks_cache(self):
          # Issue #21635
          s = difflib.SequenceMatcher(None, "abxcd", "abcd")
          first = s.get_matching_blocks()
          second = s.get_matching_blocks()
          self.assertEqual(second[0].size, 2)
          self.assertEqual(second[1].size, 2)
          self.assertEqual(second[2].size, 0)
  
      def test_added_tab_hint(self):
          # Check fix for bug #1488943
          diff = list(difflib.Differ().compare(["\tI am a buggy"],["\t\tI am a bug"]))
          self.assertEqual("- \tI am a buggy", diff[0])
          self.assertEqual("? \t          --\n", diff[1])
          self.assertEqual("+ \t\tI am a bug", diff[2])
          self.assertEqual("? +\n", diff[3])
  
      def test_hint_indented_properly_with_tabs(self):
          diff = list(difflib.Differ().compare(["\t \t \t^"], ["\t \t \t^\n"]))
          self.assertEqual("- \t \t \t^", diff[0])
          self.assertEqual("+ \t \t \t^\n", diff[1])
          self.assertEqual("? \t \t \t +\n", diff[2])
  
      def test_mdiff_catch_stop_iteration(self):
          # Issue #33224
          self.assertEqual(
              list(difflib._mdiff(["2"], ["3"], 1)),
              [((1, '\x00-2\x01'), (1, '\x00+3\x01'), True)],
          )
  
  
  patch914575_from1 = """
     1. Beautiful is beTTer than ugly.
     2. Explicit is better than implicit.
     3. Simple is better than complex.
     4. Complex is better than complicated.
  """
  
  patch914575_to1 = """
     1. Beautiful is better than ugly.
     3.   Simple is better than complex.
     4. Complicated is better than complex.
     5. Flat is better than nested.
  """
  
  patch914575_nonascii_from1 = """
     1. Beautiful is beTTer than ugly.
