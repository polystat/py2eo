python: |
  import io
  import locale
  import mimetypes
  import pathlib
  import sys
  import unittest
  
  from test import support
  from platform import win32_edition
  
  
  def setUpModule():
      global knownfiles
      knownfiles = mimetypes.knownfiles
  
      # Tell it we don't know about external files:
      mimetypes.knownfiles = []
      mimetypes.inited = False
      mimetypes._default_mime_types()
  
  
  def tearDownModule():
      # Restore knownfiles to its initial state
      mimetypes.knownfiles = knownfiles
  
  
  class MimeTypesTestCase(unittest.TestCase):
      def setUp(self):
          self.db = mimetypes.MimeTypes()
  
      def test_default_data(self):
          eq = self.assertEqual
          eq(self.db.guess_type("foo.html"), ("text/html", None))
          eq(self.db.guess_type("foo.HTML"), ("text/html", None))
          eq(self.db.guess_type("foo.tgz"), ("application/x-tar", "gzip"))
          eq(self.db.guess_type("foo.tar.gz"), ("application/x-tar", "gzip"))
          eq(self.db.guess_type("foo.tar.Z"), ("application/x-tar", "compress"))
          eq(self.db.guess_type("foo.tar.bz2"), ("application/x-tar", "bzip2"))
          eq(self.db.guess_type("foo.tar.xz"), ("application/x-tar", "xz"))
  
      def test_data_urls(self):
          eq = self.assertEqual
          guess_type = self.db.guess_type
          eq(guess_type("data:invalidDataWithoutComma"), (None, None))
          eq(guess_type("data:,thisIsTextPlain"), ("text/plain", None))
          eq(guess_type("data:;base64,thisIsTextPlain"), ("text/plain", None))
          eq(guess_type("data:text/x-foo,thisIsTextXFoo"), ("text/x-foo", None))
  
      def test_file_parsing(self):
          eq = self.assertEqual
          sio = io.StringIO("x-application/x-unittest pyunit\n")
          self.db.readfp(sio)
          eq(self.db.guess_type("foo.pyunit"),
             ("x-application/x-unittest", None))
          eq(self.db.guess_extension("x-application/x-unittest"), ".pyunit")
  
      def test_read_mime_types(self):
          eq = self.assertEqual
  
          # Unreadable file returns None
          self.assertIsNone(mimetypes.read_mime_types("non-existent"))
  
          with support.temp_dir() as directory:
              data = "x-application/x-unittest pyunit\n"
              file = pathlib.Path(directory, "sample.mimetype")
              file.write_text(data)
              mime_dict = mimetypes.read_mime_types(file)
              eq(mime_dict[".pyunit"], "x-application/x-unittest")
  
          # bpo-41048: read_mime_types should read the rule file with 'utf-8' encoding.
          # Not with locale encoding. _bootlocale has been imported because io.open(...)
          # uses it.
          with support.temp_dir() as directory:
              data = "application/no-mans-land  Fran\u00E7ais"
              file = pathlib.Path(directory, "sample.mimetype")
              file.write_text(data, encoding='utf-8')
              import _bootlocale
              with support.swap_attr(_bootlocale, 'getpreferredencoding', lambda do_setlocale=True: 'ASCII'):
                  mime_dict = mimetypes.read_mime_types(file)
