+package org.eolang
+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout
+junit

[args...] > xhash
[args...] > xtuple
[args...] > xfloat
[args...] > xTypeError
[args...] > xValueError
[args...] > xisinstance
[args...] > xlist
[args...] > xrange
[args...] > xproto
[args...] > x__name__
[args...] > xdict
[args...] > xf
[args...] > xstr
[args...] > xlen
[args...] > xrepr
[args...] > xexec
[args...] > xargs
[args...] > xissubclass
[args...] > xlocals
[args...] > xobject
[args...] > xl
[args...] > xtype
[args...] > xint
[args...] > xglobals
[args...] > xbytes
[] > test_typing_part1
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xClassVar
        memory > xNoReturn
        memory > xProtocol
        memory > xT
        memory > xTypeGuard
        memory > xConcatenate
        memory > xXK
        memory > xTypingCallableTests
        memory > xGeneric
        memory > xtypes
        memory > xEmployee
        memory > xcopy
        memory > xType
        memory > xKT
        memory > xmod_generics_cache
        memory > xget_type_hints
        memory > xpickle
        memory > xcontextlib
        memory > xTuple
        memory > xdeepcopy
        memory > xUnionTests
        memory > xabc
        memory > xLiteral
        memory > xNoReturnTests
        memory > xTypeAlias
        memory > xskipUnless
        memory > xwarnings
        memory > xtyping
        memory > xTestCase
        memory > xIO
        memory > xMatch
        memory > xis_typeddict
        memory > xfinal
        memory > xManager
        memory > xno_type_check_decorator
        memory > xParamSpecArgs
        memory > xcollections
        memory > xLiteralTests
        memory > xCollectionsCallableTests
        memory > xMutableMapping
        memory > xTypedDict
        memory > xBinaryIO
        memory > xmain
        memory > xTypeVar
        memory > xTupleTests
        memory > xget_origin
        memory > xParamSpecKwargs
        memory > xAnnotated
        memory > xTextIO
        memory > xget_args
        memory > xre
        memory > xDict
        memory > xAnyStr
        memory > xNamedTuple
        memory > xNewType
        memory > xFounder
        memory > xbuiltins
        memory > xpy_typing
        memory > xManagingFounder
        memory > ximport_helper
        memory > xsys
        memory > xPattern
        memory > xList
        memory > x_typed_dict_helper
        memory > xruntime_checkable
        memory > xAny
        memory > xweakref
        memory > xCallable
        memory > xBaseCallableTests
        memory > xForwardRef
        memory > xVT
        memory > xXV
        memory > xTypeVarTests
        memory > xParamSpec
        memory > xc_typing
        memory > xBaseTestCase
        memory > xFinal
        memory > xOptional
        memory > xcast
        memory > xUnion
        memory > xskip
        memory > xno_type_check
        memory > xAnyTests
        seq > @
          seq
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            xpy_typing.write (((xunsupported)) (((ximport_helper).ximport_fresh_module)) ("'typing'") ((((xunsupported)) ("'_typing'"))))
            xc_typing.write (((xunsupported)) (((ximport_helper).ximport_fresh_module)) ("'typing'") ((((xunsupported)) ("'_typing'"))))
            xBaseTestCase.write
              []
                memory > xassertNotIsSubclass
                memory > xassertIsSubclass
                memory > xclear_caches
                seq > @
                  seq
                    xassertIsSubclass.write
                      [xself xcls xclass_or_tuple xmsg]
                        memory > xmessage
                        seq > @
                          (((xunsupported)))
                            ((((xissubclass)) ((xcls)) ((xclass_or_tuple))).not).if
                              seq
                                xmessage.write ("'%r is not a subclass of %r'".mod (((xunsupported)) ((xcls)) ((xclass_or_tuple))))
                                (((xunsupported)) ((xmsg)) ("None: is there a None literal in the EO language?")).if
                                  (((xunsupported)) ((xmessage)) (("' : %s'".mod (xmsg))))
                                (((xunsupported)) (((((xself).xfailureException)) ((xmessage)))))
                    xassertNotIsSubclass.write
                      [xself xcls xclass_or_tuple xmsg]
                        memory > xmessage
                        seq > @
                          (((xunsupported)))
                            (((xissubclass)) ((xcls)) ((xclass_or_tuple))).if
                              seq
                                xmessage.write ("'%r is a subclass of %r'".mod (((xunsupported)) ((xcls)) ((xclass_or_tuple))))
                                (((xunsupported)) ((xmsg)) ("None: is there a None literal in the EO language?")).if
                                  (((xunsupported)) ((xmessage)) (("' : %s'".mod (xmsg))))
                                (((xunsupported)) (((((xself).xfailureException)) ((xmessage)))))
                    xclear_caches.write
                      [xself]
                        seq > @
                          (((xunsupported)) ((xf)) (((xtyping).x_cleanups)))
                            xbogusForceDataize.write (((xf)))
            xEmployee.write
              []
                seq > @
            xManager.write
              []
                seq > @
            xFounder.write
              []
                seq > @
            xManagingFounder.write
              []
                seq > @
            xAnyTests.write
              []
                memory > xtest_cannot_subclass
                memory > xtest_any_instance_type_error
                memory > xtest_repr
                memory > xtest_cannot_instantiate
                memory > xtest_any_subclass_type_error
                memory > xtest_any_works_with_alias
                memory > xtest_errors
                seq > @
                  seq
                    xtest_any_instance_type_error.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xisinstance)) (42) ((xAny)))
                    xtest_any_subclass_type_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xEmployee)) ((xAny)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xAny)) ((xEmployee)))
                    xtest_repr.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xAny)))) ("'typing.Any'"))
                    xtest_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (42) ((xAny)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xAny)) ((xint)))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                    xtest_cannot_instantiate.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xAny)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xAny)))))
                    xtest_any_works_with_alias.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((xtyping).xMatch)) ((xAny)))
                            (((xunsupported)) (((xtyping).xPattern)) ((xAny)))
                            (((xunsupported)) (((xtyping).xIO)) ((xAny)))
            xNoReturnTests.write
              []
                memory > xtest_noreturn_subclass_type_error
                memory > xtest_cannot_subclass
                memory > xtest_noreturn_instance_type_error
                memory > xtest_repr
                memory > xtest_cannot_instantiate
                memory > xtest_not_generic
                seq > @
                  seq
                    xtest_noreturn_instance_type_error.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xisinstance)) (42) ((xNoReturn)))
                    xtest_noreturn_subclass_type_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xEmployee)) ((xNoReturn)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xNoReturn)) ((xEmployee)))
                    xtest_repr.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xNoReturn)))) ("'typing.NoReturn'"))
                    xtest_not_generic.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            (((xunsupported)) ((xNoReturn)) ((xint)))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                    xtest_cannot_instantiate.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xNoReturn)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xNoReturn)))))
            xTypeVarTests.write
              []
                memory > xtest_union_constrained
                memory > xtest_typevar_instance_type_error
                memory > xtest_missing__name__
                memory > xtest_repr
                memory > xtest_union_unique
                memory > xtest_constrained_error
                memory > xtest_or
                memory > xtest_cannot_subclass_var_itself
                memory > xtest_no_redefinition
                memory > xtest_typevar_subclass_type_error
                memory > xtest_cannot_instantiate_vars
                memory > xtest_no_bivariant
                memory > xtest_basic_plain
                memory > xtest_cannot_subclass_vars
                memory > xtest_bound_errors
                seq > @
                  seq
                    xtest_basic_plain.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xT)) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xT)) ((xTypeVar)))
                    xtest_typevar_instance_type_error.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (42) ((xT)))
                    xtest_typevar_subclass_type_error.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xT)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xT)) ((xint)))
                    xtest_constrained_error.write
                      [xself]
                        memory > xX
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            seq
                              xX.write (((xTypeVar)) ("'X'") ((xint)))
                              unsupported
                    xtest_union_unique.write
                      [xself]
                        memory > xX
                        memory > xY
                        seq > @
                          seq
                            xX.write (((xTypeVar)) ("'X'"))
                            xY.write (((xTypeVar)) ("'Y'"))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xX)) ((xY)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xUnion)) ((xX)))) ((xX)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xX)))) ((((xunsupported)) ((xUnion)) ((xX)) ((xY)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xUnion)) ((xX)) ((xX)))) ((xX)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xX)) ((xint)))) ((((xunsupported)) ((xUnion)) ((xX)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xX)) ((xint)))) ((((xunsupported)) ((xUnion)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xUnion)) ((xX)) ((xint))).x__args__)) ((((xunsupported)) ((xX)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xUnion)) ((xX)) ((xint))).x__parameters__)) ((((xunsupported)) ((xX)))))
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((xunsupported)) ((xUnion)) ((xX)) ((xint))).x__origin__)) ((xUnion)))
                    xtest_or.write
                      [xself]
                        memory > xX
                        seq > @
                          seq
                            xX.write (((xTypeVar)) ("'X'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xX).or "x")) ((((xunsupported)) ((xUnion)) ((xX)) ("x"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (("x".or (xX))) ((((xunsupported)) ((xUnion)) ("x") ((xX)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) (((xX).or "x")))) ((((xunsupported)) ((xX)) ((((xForwardRef)) ("x"))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) (("x".or (xX))))) ((((xunsupported)) ((((xForwardRef)) ("x"))) ((xX)))))
                    xtest_union_constrained.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            xA.write (((xTypeVar)) ("'A'") ((xstr)) ((xbytes)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xA)) ((xstr)))) ((((xunsupported)) ((xUnion)) ((xA)))))
                    xtest_repr.write
                      [xself]
                        memory > xT_contra
                        memory > xT_co
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xT)))) ("'~T'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xKT)))) ("'~KT'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xVT)))) ("'~VT'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xAnyStr)))) ("'~AnyStr'"))
                            xT_co.write (((xunsupported)) ((xTypeVar)) ("'T_co'") (TRUE))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xT_co)))) ("'+T_co'"))
                            xT_contra.write (((xunsupported)) ((xTypeVar)) ("'T_contra'") (TRUE))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xT_contra)))) ("'-T_contra'"))
                    xtest_no_redefinition.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xTypeVar)) ("'T'"))) ((((xTypeVar)) ("'T'"))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xTypeVar)) ("'T'") ((xint)) ((xstr)))) ((((xTypeVar)) ("'T'") ((xint)) ((xstr)))))
                    xtest_cannot_subclass_vars.write
                      [xself]
                        memory > xV
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xV.write
                              []
                                seq > @
                    xtest_cannot_subclass_var_itself.write
                      [xself]
                        memory > xV
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xV.write
                              []
                                seq > @
                    xtest_cannot_instantiate_vars.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((((xTypeVar)) ("'A'"))))
                    xtest_bound_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypeVar)) ("'X'") (42))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypeVar)) ("'X'") ((xstr)) ((xfloat)) ((xEmployee)))
                    xtest_missing__name__.write
                      [xself]
                        memory > xcode
                        seq > @
                          seq
                            xcode.write "import typing\nT = typing.TypeVar('T')\n"
                            xbogusForceDataize.write (((xexec)) ((xcode)) ((((xunsupported)))))
                    xtest_no_bivariant.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                            (((xunsupported)) ((xTypeVar)) ("'T'") (TRUE) (TRUE))
            xUnionTests.write
              []
                memory > xtest_union_object
                memory > xtest_optional
                memory > xtest_unordered
                memory > xtest_union_any
                memory > xtest_single_class_disappears
                memory > xtest_basics
                memory > xtest_etree
                memory > xtest_empty
                memory > xtest_no_eval_union
                memory > xtest_cannot_subclass
                memory > xtest_base_class_kept
                memory > xtest_function_repr_union
                memory > xtest_union_generalization
                memory > xtest_union_union
                memory > xtest_repr
                memory > xtest_union_compare_other
                memory > xtest_cannot_instantiate
                memory > xtest_union_str_pattern
                memory > xtest_subclass_error
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xu
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu)) ((xUnion)))
                    xtest_subclass_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xUnion)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xUnion)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xunsupported)) ((xUnion)) ((xint)) ((xstr)))) ((xint)))
                    xtest_union_any.write
                      [xself]
                        memory > xu1
                        memory > xu
                        memory > xu3
                        memory > xu2
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu)) ((xAny)))
                            xu1.write (((xunsupported)) ((xUnion)) ((xint)) ((xAny)))
                            xu2.write (((xunsupported)) ((xUnion)) ((xAny)) ((xint)))
                            xu3.write (((xunsupported)) ((xUnion)) ((xAny)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu1)) ((xu2)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu1)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu2)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu3)) ((xAny)))
                    xtest_union_object.write
                      [xself]
                        memory > xu1
                        memory > xu
                        memory > xu2
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu)) ((xobject)))
                            xu1.write (((xunsupported)) ((xUnion)) ((xint)) ((xobject)))
                            xu2.write (((xunsupported)) ((xUnion)) ((xobject)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu1)) ((xu2)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu1)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu2)) ((xobject)))
                    xtest_unordered.write
                      [xself]
                        memory > xu1
                        memory > xu2
                        seq > @
                          seq
                            xu1.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            xu2.write (((xunsupported)) ((xUnion)) ((xfloat)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu1)) ((xu2)))
                    xtest_single_class_disappears.write
                      [xself]
                        memory > xt
                        seq > @
                          seq
                            xt.write (((xunsupported)) ((xUnion)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((xt)) ((xEmployee)))
                    xtest_base_class_kept.write
                      [xself]
                        memory > xu
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xEmployee)) ((xManager)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xEmployee)) (((xu).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xManager)) (((xu).x__args__)))
                    xtest_union_union.write
                      [xself]
                        memory > xu
                        memory > xv
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            xv.write (((xunsupported)) ((xUnion)) ((xu)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xv)) ((((xunsupported)) ((xUnion)) ((xint)) ((xfloat)) ((xEmployee)))))
                    xtest_repr.write
                      [xself]
                        memory > xT
                        memory > xu
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xUnion)))) ("'typing.Union'"))
                            xu.write (((xunsupported)) ((xUnion)) ((xEmployee)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) (("'typing.Union[%s.Employee, int]'".mod (x__name__))))
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) (("'typing.Union[int, %s.Employee]'".mod (x__name__))))
                            xT.write (((xTypeVar)) ("'T'"))
                            xu.write (((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xint)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ((((xrepr)) ((xint)))))
                            xu.write (((xunsupported)) ((xUnion)) ((((xunsupported)) ((xList)) ((xint)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ("'typing.Union[typing.List[int], int]'"))
                            xu.write (((xunsupported)) ((xUnion)) ((((xunsupported)) ((xlist)) ((xint)))) ((((xunsupported)) ((xdict)) ((xstr)) ((xfloat)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ("'typing.Union[list[int], dict[str, float]]'"))
                            xu.write (((xunsupported)) ((xUnion)) (((xint).or (xfloat))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ("'typing.Union[int, float]'"))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                    xtest_cannot_instantiate.write
                      [xself]
                        memory > xu
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xUnion)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xUnion)))))
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xu)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xu)))))
                    xtest_union_generalization.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertFalse)) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).eq (xstr))))
                            xbogusForceDataize.write ((((xself).xassertFalse)) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).eq (((xunsupported)) (((xtyping).xIterable)) ((xint))))))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xstr)) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((((xunsupported)) (((xtyping).xIterable)) ((xint)))) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).x__args__)))
                    xtest_union_compare_other.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xUnion)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xUnion)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xClassVar)) ((xUnion)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xOptional)) ((xUnion)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ("None: is there a None literal in the EO language?"))) ((xOptional)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xOptional)) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xOptional)) (((xtyping).xMutableMapping)))) ((xUnion)))
                    xtest_optional.write
                      [xself]
                        memory > xu
                        memory > xo
                        seq > @
                          seq
                            xo.write (((xunsupported)) ((xOptional)) ((xint)))
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xo)) ((xu)))
                    xtest_empty.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            (((xunsupported)) ((xUnion)) ((((xunsupported)))))
                    xtest_no_eval_union.write
                      [xself]
                        memory > xu
                        memory > xf
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xstr)))
                            xf.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xunsupported)) ((((xget_type_hints)) ((xf)))) ("'x'"))) ((xu)))
                    xtest_function_repr_union.write
                      [xself]
                        memory > xfun
                        seq > @
                          seq
                            xfun.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xUnion)) ((xfun)) ((xint)))))) ("'typing.Union[fun, int]'"))
                    xtest_union_str_pattern.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            xA.write (((xunsupported)) ((xUnion)) ((xstr)) ((xPattern)))
                            unsupported
                    xtest_etree.write
                      [xself]
                        memory > xElement
                        memory > xElem
                        seq > @
                          seq
                            (((xunsupported)))
                            (((xunsupported)) ((xUnion)) ((xElement)) ((xstr)))
                            xElem.write
                              []
                                seq > @
                                  (((xunsupported)))
                                    (((xunsupported)) ((((xElement)) ((((xunsupported)) ((xargs)))))))
                            (((xunsupported)) ((xUnion)) ((xElem)) ((xstr)))
            xTupleTests.write
              []
                memory > xtest_tuple_subclass
                memory > xtest_repr
                memory > xtest_tuple_instance_type_error
                memory > xtest_equality
                memory > xtest_basics
                memory > xtest_errors
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xTP
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xTuple)) ((((xunsupported)) ((xTuple)) ((xint)) ((xstr)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xtuple)) ((((xunsupported)) ((xTuple)) ((xint)) ((xstr)))))
                            xTP.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xtuple)) ((xTuple)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xTP)) ((xTuple)))
                    xtest_equality.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xTuple)) ((xint)))) ((((xunsupported)) ((xTuple)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xTuple)) ((xint)) (""))) ((((xunsupported)) ((xTuple)) ((xint)) (""))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xTuple)) ((xint)))) ((((xunsupported)) ((xTuple)) ((xint)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xTuple)) ((xint)))) ((((xunsupported)) ((xTuple)) ((xint)) (""))))
                    xtest_tuple_subclass.write
                      [xself]
                        memory > xMyTuple
                        seq > @
                          seq
                            xMyTuple.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMyTuple)) ((xTuple)))
                    xtest_tuple_instance_type_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xunsupported)) (0) (0))) ((((xunsupported)) ((xTuple)) ((xint)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)) (0) (0))) ((xTuple)))
                    xtest_repr.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xTuple)))) ("'typing.Tuple'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)))))))) ("'typing.Tuple[()]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((xint)) ((xfloat)))))) ("'typing.Tuple[int, float]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((xint)) (""))))) ("'typing.Tuple[int, ...]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) ((xlist)) ((xint)))))))) ("'typing.Tuple[list[int]]'"))
                    xtest_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (42) ((xTuple)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (42) ((((xunsupported)) ((xTuple)) ((xint)))))
            xBaseCallableTests.write
              []
                memory > xtest_ellipsis_in_generic
                memory > xtest_weakref
                memory > xtest_eq_hash
                memory > xtest_pickle
                memory > xtest_callable_instance_works
                memory > xtest_callable_wrong_forms
                memory > xtest_var_substitution
                memory > xtest_repr
                memory > xtest_cannot_instantiate
                memory > xtest_concatenate
                memory > xtest_type_erasure
                memory > xtest_paramspec
                memory > xtest_errors
                memory > xtest_callable_instance_type_error
                memory > xtest_basic
                memory > xtest_self_subclass
                memory > xtest_callable_with_ellipsis
                seq > @
                  seq
                    xtest_self_subclass.write
                      [xself]
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (((xtypes).xFunctionType)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) (((xtypes).xFunctionType)) ((xCallable)))
                    xtest_eq_hash.write
                      [xself]
                        memory > xC
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xC.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xunsupported)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))))) (1))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xstr)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ("") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((xCallable)))
                    xtest_cannot_instantiate.write
                      [xself]
                        memory > xc
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xCallable)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xCallable)))))
                            xc.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xc)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xc)))))
                    xtest_callable_wrong_forms.write
                      [xself]
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xCallable)) ((xint)))
                    xtest_callable_instance_works.write
                      [xself]
                        memory > xf
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xf.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) ((xCallable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ("None: is there a None literal in the EO language?") ((xCallable)))
                    xtest_callable_instance_type_error.write
                      [xself]
                        memory > xf
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xf.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ("None: is there a None literal in the EO language?"))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xAny)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ("None: is there a None literal in the EO language?") ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ("None: is there a None literal in the EO language?"))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ("None: is there a None literal in the EO language?") ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xAny)))))
                    xtest_repr.write
                      [xself]
                        seq > @
                    xtest_callable_with_ellipsis.write
                      [xself]
                        memory > xCallable
                        memory > xfoo
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xCallable)) ("") ((xT)))))))
                    xtest_ellipsis_in_generic.write
                      [xself]
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((xtyping).xList)) ((((xunsupported)) ((xCallable)) ("") ((xstr)))))
                    xtest_basic.write
                      [xself]
                        memory > xalias
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            (((xunsupported)) ((xCallable)) ((((xcollections).xabc).xCallable))).if
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xalias)) (((xtypes).xGenericAlias)))
                            xbogusForceDataize.write ((((xself).xassertIs)) (((xalias).x__origin__)) ((((xcollections).xabc).xCallable)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__args__)) ((((xunsupported)) ((xint)) ((xstr)) ((xfloat)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__parameters__)) ((((xunsupported)))))
                    xtest_weakref.write
                      [xself]
                        memory > xalias
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xweakref).xref)) ((xalias)))))) ((xalias)))
                    xtest_pickle.write
                      [xself]
                        memory > xs
                        memory > xloaded
                        memory > xalias
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xs.write ((((xpickle).xdumps)) ((xalias)) ((xproto)))
                                xloaded.write ((((xpickle).xloads)) ((xs)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__origin__)) (((xloaded).x__origin__)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__args__)) (((xloaded).x__args__)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__parameters__)) (((xloaded).x__parameters__)))
                    xtest_var_substitution.write
                      [xself]
                        seq > @
                    xtest_type_erasure.write
                      [xself]
                        memory > xC1
                        memory > xa
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xC1.write
                              []
                                memory > x__call__
                                seq > @
                                  x__call__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) ("None: is there a None literal in the EO language?"))
                            xa.write (((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)))) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((xa))).x__class__)) ((xC1)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xa))).x__orig_class__)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)))) ((xT)))))
                    xtest_paramspec.write
                      [xself]
                        memory > xP
                        memory > xP2
                        memory > xC1
                        memory > xCallable
                        memory > xC2
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xP.write (((xParamSpec)) ("'P'"))
                            xP2.write (((xParamSpec)) ("'P2'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((xP)) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)) ((xstr)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ("") ((xstr)))) ((((xunsupported)) ((xCallable)) ("") ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((xP2)) ((xstr)))) ((((xunsupported)) ((xCallable)) ((xP2)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))) ((xstr)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xC1)) ((xint)) ((xstr)))
                            xC2.write (((xunsupported)) ((xCallable)) ((xP)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)) ((xint)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)) ((xint)) ((xstr)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) (""))) ((((xunsupported)) ((xCallable)) ("") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((xP2)))) ((((xunsupported)) ((xCallable)) ((xP2)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((xint)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((xint)) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xint)))))
                    xtest_concatenate.write
                      [xself]
                        memory > xC1
                        memory > xP
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xP.write (((xParamSpec)) ("'P'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((((xunsupported)) (((xtyping).xConcatenate)) ((xint)) ((xP)))) ((xint)))
                    xtest_errors.write
                      [xself]
                        memory > xC1
                        memory > xalias
                        memory > xP
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("is not a generic class"))))
                              (((xunsupported)) ((xalias)) ((xint)))
                            xP.write (((xParamSpec)) ("'P'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((xP)) ((xT)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("many arguments for"))))
                              (((xunsupported)) ((xC1)) ((xint)) ((xstr)) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("few arguments for"))))
                              (((xunsupported)) ((xC1)) ((xint)))
            xTypingCallableTests.write
              []
                memory > xtest_consistency
                memory > xCallable
                seq > @
                  seq
                    xCallable.write ((xtyping).xCallable)
                    xtest_consistency.write
                      [xself]
                        memory > xc2
                        memory > xc1
                        seq > @
                          seq
                            xc1.write (((xunsupported)) (((xtyping).xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xdict)))
                            xc2.write (((xunsupported)) ((((xcollections).xabc).xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc1).x__args__)) (((xc2).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (((xc1).x__args__)))) ((((xhash)) (((xc2).x__args__)))))
            xCollectionsCallableTests.write
              []
                memory > xCallable
                seq > @
                  xCallable.write (((xcollections).xabc).xCallable)
            xLiteralTests.write
              []
                memory > xtest_literals_inside_other_types
                memory > xtest_hash
                memory > xtest_repr
                memory > xtest_illegal_parameters_do_not_raise_runtime_errors
                memory > xtest_args
                memory > xtest_basics
                memory > xtest_flatten
                memory > xtest_no_subclassing
                memory > xtest_cannot_init
                memory > xtest_equal
                memory > xtest_no_isinstance_or_issubclass
                memory > xtest_no_multiple_subscripts
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((xLiteral)) (1))
                            (((xunsupported)) ((xLiteral)) (1) (2) (3))
                            (((xunsupported)) ((xLiteral)) ("x") ("y") ("z"))
                            (((xunsupported)) ((xLiteral)) ("None: is there a None literal in the EO language?"))
                            (((xunsupported)) ((xLiteral)) (TRUE))
                            (((xunsupported)) ((xLiteral)) (1) ("2") (FALSE))
                            (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1) (2))) ((((xunsupported)) ((xLiteral)) (4) (5))))
                    xtest_illegal_parameters_do_not_raise_runtime_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((xLiteral)) ((xint)))
                            (((xunsupported)) ((xLiteral)) ((((xunsupported)) ("foo") (3) ("bar") (4))))
                            (((xunsupported)) ((xLiteral)) ((xT)))
                    xtest_literals_inside_other_types.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((xList)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))
                            (((xunsupported)) ((xList)) ((((xunsupported)) ((xLiteral)) ((((xunsupported)) ("foo") ("bar") ("baz"))))))
                    xtest_repr.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) (1))))) ("typing.Literal[1]"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) (1) (TRUE) ("foo"))))) ("typing.Literal[1, True, 'foo']"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) ((xint)))))) ("typing.Literal[int]"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xLiteral)))) ("typing.Literal"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) ("None: is there a None literal in the EO language?"))))) ("typing.Literal[None]"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) (1) (2) (3) (3))))) ("typing.Literal[1, 2, 3]"))
                    xtest_cannot_init.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xLiteral)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xLiteral)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((((xunsupported)) ((xLiteral)) (1))))))
                    xtest_no_isinstance_or_issubclass.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (1) ((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((xint)) ((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (1) ((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((((xunsupported)) ((xLiteral)) (1))))
                    xtest_no_subclassing.write
                      [xself]
                        memory > xBar
                        memory > xFoo
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xFoo.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xBar.write
                                []
                                  seq > @
                    xtest_no_multiple_subscripts.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            (((xunsupported)) ((((xunsupported)) ((xLiteral)) (1))) (1))
                    xtest_equal.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (0))) ((((xunsupported)) ((xLiteral)) (FALSE))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (TRUE))) ((((xunsupported)) ((xLiteral)) (1))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1))) ((((xunsupported)) ((xLiteral)) (2))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1) (TRUE))) ((((xunsupported)) ((xLiteral)) (1))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1) (TRUE))) ((((xunsupported)) ((xLiteral)) (1) (1))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1) (2))) ((((xunsupported)) ((xLiteral)) (TRUE) (2))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xLiteral)) (1))) ((((xunsupported)) ((xLiteral)) (1))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xLiteral)) (1) (2))) ((((xunsupported)) ((xLiteral)) (2) (1))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))) ((((xunsupported)) ((xLiteral)) (1) (2) (3) (3))))
                    xtest_hash.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1))))) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1) (2))))) ((((xhash)) ((((xunsupported)) ((xLiteral)) (2) (1))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1) (2) (3) (3))))))
                    xtest_args.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) (1) (2) (3)).x__args__)) ((((xunsupported)) (1) (2) (3))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) (1) (2) (3) (3)).x__args__)) ((((xunsupported)) (1) (2) (3))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) (1) ((((xunsupported)) ((xLiteral)) (2))) ((((xunsupported)) ((xLiteral)) (3) (4)))).x__args__)) ((((xunsupported)) (1) (2) (3) (4))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) ((((xunsupported)))) ((((xunsupported))))).x__args__)) ((((xunsupported)) ((((xunsupported)))) ((((xunsupported)))))))
                    xtest_flatten.write
                      [xself]
                        memory > xl2
                        memory > xl3
                        memory > xl1
                        seq > @
                          seq
                            xl1.write (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1))) ((((xunsupported)) ((xLiteral)) (2))) ((((xunsupported)) ((xLiteral)) (3))))
                            xl2.write (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1) (2))) (3))
                            xl3.write (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))
                            (((xunsupported)) ((xl)) ((((xunsupported)) ((xl1)) ((xl2)) ((xl3)))))
                              seq
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((xl)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xl).x__args__)) ((((xunsupported)) (1) (2) (3))))
            xXK.write (((xTypeVar)) ("'XK'") ((xstr)) ((xbytes)))
            xXV.write (((xTypeVar)) ("'XV'"))
