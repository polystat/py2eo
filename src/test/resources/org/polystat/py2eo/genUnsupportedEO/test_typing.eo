+package org.eolang
+alias org.eolang.txt.sprintf
+alias org.eolang.io.stdout
+junit

[args...] > xs
[args...] > xBaseException
[args...] > xcomplex
[args...] > xfrozenset
[args...] > xNotImplementedError
[args...] > xf
[args...] > xRecursionError
[args...] > xhash
[args...] > xKeyError
[args...] > xUserId
[args...] > xD
[args...] > xACM
[args...] > xtuple
[args...] > xstr
[args...] > xlen
[args...] > xgetattr
[args...] > xfloat
[args...] > xk
[args...] > xsuper
[args...] > xv
[args...] > xAttributeError
[args...] > xname
[args...] > xprot
[args...] > xNameError
[args...] > xrepr
[args...] > xcallable
[args...] > xw
[args...] > xexec
[args...] > xargs
[args...] > xissubclass
[args...] > xcls
[args...] > xlocals
[args...] > xobject
[args...] > xl
[args...] > xkwargs
[args...] > xSyntaxError
[args...] > xTypeError
[args...] > xRuntimeError
[args...] > xKeyboardInterrupt
[args...] > xException
[args...] > xDeprecationWarning
[args...] > xtype
[args...] > xint
[args...] > xvars
[args...] > xStopIteration
[args...] > xX
[args...] > xglobals
[args...] > xbytes
[args...] > xset
[args...] > xEllipsis
[args...] > xPoint2Dor3D
[args...] > xbase
[args...] > xValueError
[args...] > xdir
[args...] > xAsyncIteratorWrapper
[args...] > xImportError
[args...] > xex
[args...] > xe
[args...] > xOptions
[args...] > xisinstance
[args...] > xlist
[args...] > xt
[args...] > xstruct
[args...] > xg_with
[args...] > xiter
[args...] > xrange
[args...] > xclazz
[args...] > xproto
[args...] > xexc
[args...] > xobj
[args...] > xNotImplemented
[args...] > x__name__
[args...] > xel
[args...] > xdict
[args...] > xBar
[args...] > xfname
[args...] > xnaive_list_base_check
[args...] > xbool
[args...] > xthing
[args...] > xAnimal
[args...] > xhasattr
[] > test_typing
  [args...] > unsupported
  [args...] > xunsupported
  memory > bogusForceDataize
  memory > xbogusForceDataize
  memory > xhack
  seq > @
    xhack.write
      []
        memory > xProtocol
        memory > xXK
        memory > xNT
        memory > xTypingCallableTests
        memory > xGeneric
        memory > xtypes
        memory > xEmployee
        memory > xcopy
        memory > xType
        memory > xNewTypeCTests
        memory > xGetTypeHintTests
        memory > xASYNCIO
        memory > xCSub
        memory > xann_module5
        memory > xClassVar
        memory > xKT
        memory > xCastTests
        memory > xmod_generics_cache
        memory > xget_type_hints
        memory > xpickle
        memory > xCoolEmployee
        memory > xcontextlib
        memory > xForRefExample
        memory > xNoReturn
        memory > xTuple
        memory > xdeepcopy
        memory > xUnionTests
        memory > xabc
        memory > xTypeGuardTests
        memory > xLiteral
        memory > xNoReturnTests
        memory > xHasCallProtocol
        memory > xYAxis
        memory > xTypeAlias
        memory > xskipUnless
        memory > xMySimpleMapping
        memory > xwarnings
        memory > xtyping
        memory > xTestCase
        memory > xProto
        memory > xTestModules
        memory > xB
        memory > xIO
        memory > xNamedTupleTests
        memory > xCoolEmployeeWithDefault
        memory > xMatch
        memory > xis_typeddict
        memory > xClassVarTests
        memory > xfinal
        memory > xSpecialAttrsTests
        memory > xManager
        memory > xNoneAndForward
        memory > xno_type_check_decorator
        memory > xPosition
        memory > xGenericTests
        memory > xT
        memory > xG
        memory > xParamSpecTests
        memory > xParamSpecArgs
        memory > xOtherABCTests
        memory > xSpecialAttrsT
        memory > xcollections
        memory > xLiteralTests
        memory > xCollectionsCallableTests
        memory > xMutableMapping
        memory > xTypedDict
        memory > xBinaryIO
        memory > xTypeVar
        memory > xCollectionsAbcTests
        memory > xmain
        memory > xFinalTests
        memory > xOther
        memory > xTupleTests
        memory > xget_origin
        memory > xParamSpecKwargs
        memory > xLabel
        memory > xXAxis
        memory > xAnnotated
        memory > xTextIO
        memory > xget_args
        memory > xre
        memory > xASYNCIO_TESTS
        memory > xOverloadTests
        memory > xAllTests
        memory > xann_module
        memory > xXMeth
        memory > xTypeGuard
        memory > xDict
        memory > xAnyStr
        memory > xXRepr
        memory > xAnnotatedTests
        memory > xNamedTuple
        memory > xIOTests
        memory > xMyPoint
        memory > xNewType
        memory > xFounder
        memory > xpy_typing
        memory > xManagingFounder
        memory > ximport_helper
        memory > xsys
        memory > xAsyncContextManager
        memory > xbuiltins
        memory > xList
        memory > xPattern
        memory > xgth
        memory > xLoop
        memory > x_typed_dict_helper
        memory > xruntime_checkable
        memory > xTypedDictTests
        memory > xPoint
        memory > xSimpleMapping
        memory > xNewTypePythonTests
        memory > xann_module3
        memory > xAny
        memory > xGetUtilitiesTestCase
        memory > xweakref
        memory > xann_module2
        memory > xLabelPoint2D
        memory > xConcatenate
        memory > xCallable
        memory > xPoint2D
        memory > xBaseCallableTests
        memory > xNewTypeTests
        memory > xCoordinate
        memory > xForwardRef
        memory > xConcatenateTests
        memory > xVT
        memory > xConcrete
        memory > xXV
        memory > xA
        memory > xParamSpec
        memory > xRETests
        memory > xTypeVarTests
        memory > xc_typing
        memory > xBaseTestCase
        memory > xProtocolTests
        memory > xFinal
        memory > xOptional
        memory > xSpecialAttrsP
        memory > xcast
        memory > xann_module6
        memory > xHasForeignBaseClass
        memory > xskip
        memory > xno_type_check
        memory > xAnyTests
        memory > xUnion
        memory > xForwardRefTests
        memory > xTypeAliasTests
        memory > xTypeTests
        seq > @
          seq
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            (((xunsupported)))
            xpy_typing.write (((xunsupported)) (((ximport_helper).ximport_fresh_module)) ("'typing'") ((((xunsupported)) ("'_typing'"))))
            xc_typing.write (((xunsupported)) (((ximport_helper).ximport_fresh_module)) ("'typing'") ((((xunsupported)) ("'_typing'"))))
            xBaseTestCase.write
              []
                memory > xassertNotIsSubclass
                memory > xassertIsSubclass
                memory > xclear_caches
                seq > @
                  seq
                    xassertIsSubclass.write
                      [xself xcls xclass_or_tuple xmsg]
                        memory > xmessage
                        seq > @
                          (((xunsupported)))
                            ((((xissubclass)) ((xcls)) ((xclass_or_tuple))).not).if
                              seq
                                xmessage.write ("'%r is not a subclass of %r'".mod (((xunsupported)) ((xcls)) ((xclass_or_tuple))))
                                (((xunsupported)) ((xmsg)) ("None: is there a None literal in the EO language?")).if
                                  (((xunsupported)) ((xmessage)) (("' : %s'".mod (xmsg))))
                                (((xunsupported)) (((((xself).xfailureException)) ((xmessage)))))
                    xassertNotIsSubclass.write
                      [xself xcls xclass_or_tuple xmsg]
                        memory > xmessage
                        seq > @
                          (((xunsupported)))
                            (((xissubclass)) ((xcls)) ((xclass_or_tuple))).if
                              seq
                                xmessage.write ("'%r is a subclass of %r'".mod (((xunsupported)) ((xcls)) ((xclass_or_tuple))))
                                (((xunsupported)) ((xmsg)) ("None: is there a None literal in the EO language?")).if
                                  (((xunsupported)) ((xmessage)) (("' : %s'".mod (xmsg))))
                                (((xunsupported)) (((((xself).xfailureException)) ((xmessage)))))
                    xclear_caches.write
                      [xself]
                        seq > @
                          (((xunsupported)) ((xf)) (((xtyping).x_cleanups)))
                            xbogusForceDataize.write (((xf)))
            xEmployee.write
              []
                seq > @
            xManager.write
              []
                seq > @
            xFounder.write
              []
                seq > @
            xManagingFounder.write
              []
                seq > @
            xAnyTests.write
              []
                memory > xtest_cannot_subclass
                memory > xtest_any_instance_type_error
                memory > xtest_repr
                memory > xtest_cannot_instantiate
                memory > xtest_any_subclass_type_error
                memory > xtest_any_works_with_alias
                memory > xtest_errors
                seq > @
                  seq
                    xtest_any_instance_type_error.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xisinstance)) (42) ((xAny)))
                    xtest_any_subclass_type_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xEmployee)) ((xAny)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xAny)) ((xEmployee)))
                    xtest_repr.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xAny)))) ("'typing.Any'"))
                    xtest_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (42) ((xAny)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xAny)) ((xint)))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                    xtest_cannot_instantiate.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xAny)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xAny)))))
                    xtest_any_works_with_alias.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((xtyping).xMatch)) ((xAny)))
                            (((xunsupported)) (((xtyping).xPattern)) ((xAny)))
                            (((xunsupported)) (((xtyping).xIO)) ((xAny)))
            xNoReturnTests.write
              []
                memory > xtest_noreturn_subclass_type_error
                memory > xtest_cannot_subclass
                memory > xtest_noreturn_instance_type_error
                memory > xtest_repr
                memory > xtest_cannot_instantiate
                memory > xtest_not_generic
                seq > @
                  seq
                    xtest_noreturn_instance_type_error.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xisinstance)) (42) ((xNoReturn)))
                    xtest_noreturn_subclass_type_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xEmployee)) ((xNoReturn)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xNoReturn)) ((xEmployee)))
                    xtest_repr.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xNoReturn)))) ("'typing.NoReturn'"))
                    xtest_not_generic.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            (((xunsupported)) ((xNoReturn)) ((xint)))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xA.write
                                []
                                  seq > @
                    xtest_cannot_instantiate.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xNoReturn)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xNoReturn)))))
            xTypeVarTests.write
              []
                memory > xtest_union_constrained
                memory > xtest_typevar_instance_type_error
                memory > xtest_missing__name__
                memory > xtest_repr
                memory > xtest_union_unique
                memory > xtest_constrained_error
                memory > xtest_or
                memory > xtest_cannot_subclass_var_itself
                memory > xtest_no_redefinition
                memory > xtest_typevar_subclass_type_error
                memory > xtest_cannot_instantiate_vars
                memory > xtest_no_bivariant
                memory > xtest_basic_plain
                memory > xtest_cannot_subclass_vars
                memory > xtest_bound_errors
                seq > @
                  seq
                    xtest_basic_plain.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xT)) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xT)) ((xTypeVar)))
                    xtest_typevar_instance_type_error.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (42) ((xT)))
                    xtest_typevar_subclass_type_error.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xT)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xT)) ((xint)))
                    xtest_constrained_error.write
                      [xself]
                        memory > xX
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            seq
                              xX.write (((xTypeVar)) ("'X'") ((xint)))
                              unsupported
                    xtest_union_unique.write
                      [xself]
                        memory > xX
                        memory > xY
                        seq > @
                          seq
                            xX.write (((xTypeVar)) ("'X'"))
                            xY.write (((xTypeVar)) ("'Y'"))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xX)) ((xY)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xUnion)) ((xX)))) ((xX)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xX)))) ((((xunsupported)) ((xUnion)) ((xX)) ((xY)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xUnion)) ((xX)) ((xX)))) ((xX)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xX)) ((xint)))) ((((xunsupported)) ((xUnion)) ((xX)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xX)) ((xint)))) ((((xunsupported)) ((xUnion)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xUnion)) ((xX)) ((xint))).x__args__)) ((((xunsupported)) ((xX)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xUnion)) ((xX)) ((xint))).x__parameters__)) ((((xunsupported)) ((xX)))))
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((xunsupported)) ((xUnion)) ((xX)) ((xint))).x__origin__)) ((xUnion)))
                    xtest_or.write
                      [xself]
                        memory > xX
                        seq > @
                          seq
                            xX.write (((xTypeVar)) ("'X'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xX).or "x")) ((((xunsupported)) ((xUnion)) ((xX)) ("x"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (("x".or (xX))) ((((xunsupported)) ((xUnion)) ("x") ((xX)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) (((xX).or "x")))) ((((xunsupported)) ((xX)) ((((xForwardRef)) ("x"))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) (("x".or (xX))))) ((((xunsupported)) ((((xForwardRef)) ("x"))) ((xX)))))
                    xtest_union_constrained.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            xA.write (((xTypeVar)) ("'A'") ((xstr)) ((xbytes)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xA)) ((xstr)))) ((((xunsupported)) ((xUnion)) ((xA)))))
                    xtest_repr.write
                      [xself]
                        memory > xT_contra
                        memory > xT_co
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xT)))) ("'~T'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xKT)))) ("'~KT'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xVT)))) ("'~VT'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xAnyStr)))) ("'~AnyStr'"))
                            xT_co.write (((xunsupported)) ((xTypeVar)) ("'T_co'") (TRUE))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xT_co)))) ("'+T_co'"))
                            xT_contra.write (((xunsupported)) ((xTypeVar)) ("'T_contra'") (TRUE))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xT_contra)))) ("'-T_contra'"))
                    xtest_no_redefinition.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xTypeVar)) ("'T'"))) ((((xTypeVar)) ("'T'"))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xTypeVar)) ("'T'") ((xint)) ((xstr)))) ((((xTypeVar)) ("'T'") ((xint)) ((xstr)))))
                    xtest_cannot_subclass_vars.write
                      [xself]
                        memory > xV
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xV.write
                              []
                                seq > @
                    xtest_cannot_subclass_var_itself.write
                      [xself]
                        memory > xV
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xV.write
                              []
                                seq > @
                    xtest_cannot_instantiate_vars.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((((xTypeVar)) ("'A'"))))
                    xtest_bound_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypeVar)) ("'X'") (42))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypeVar)) ("'X'") ((xstr)) ((xfloat)) ((xEmployee)))
                    xtest_missing__name__.write
                      [xself]
                        memory > xcode
                        seq > @
                          seq
                            xcode.write "import typing\nT = typing.TypeVar('T')\n"
                            xbogusForceDataize.write (((xexec)) ((xcode)) ((((xunsupported)))))
                    xtest_no_bivariant.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                            (((xunsupported)) ((xTypeVar)) ("'T'") (TRUE) (TRUE))
            xUnionTests.write
              []
                memory > xtest_union_object
                memory > xtest_optional
                memory > xtest_unordered
                memory > xtest_union_any
                memory > xtest_single_class_disappears
                memory > xtest_basics
                memory > xtest_etree
                memory > xtest_empty
                memory > xtest_no_eval_union
                memory > xtest_cannot_subclass
                memory > xtest_base_class_kept
                memory > xtest_function_repr_union
                memory > xtest_union_generalization
                memory > xtest_union_union
                memory > xtest_repr
                memory > xtest_union_compare_other
                memory > xtest_cannot_instantiate
                memory > xtest_union_str_pattern
                memory > xtest_subclass_error
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xu
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu)) ((xUnion)))
                    xtest_subclass_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xUnion)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xUnion)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xunsupported)) ((xUnion)) ((xint)) ((xstr)))) ((xint)))
                    xtest_union_any.write
                      [xself]
                        memory > xu1
                        memory > xu
                        memory > xu3
                        memory > xu2
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu)) ((xAny)))
                            xu1.write (((xunsupported)) ((xUnion)) ((xint)) ((xAny)))
                            xu2.write (((xunsupported)) ((xUnion)) ((xAny)) ((xint)))
                            xu3.write (((xunsupported)) ((xUnion)) ((xAny)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu1)) ((xu2)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu1)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu2)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu3)) ((xAny)))
                    xtest_union_object.write
                      [xself]
                        memory > xu1
                        memory > xu
                        memory > xu2
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu)) ((xobject)))
                            xu1.write (((xunsupported)) ((xUnion)) ((xint)) ((xobject)))
                            xu2.write (((xunsupported)) ((xUnion)) ((xobject)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu1)) ((xu2)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu1)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu2)) ((xobject)))
                    xtest_unordered.write
                      [xself]
                        memory > xu1
                        memory > xu2
                        seq > @
                          seq
                            xu1.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            xu2.write (((xunsupported)) ((xUnion)) ((xfloat)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xu1)) ((xu2)))
                    xtest_single_class_disappears.write
                      [xself]
                        memory > xt
                        seq > @
                          seq
                            xt.write (((xunsupported)) ((xUnion)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((xt)) ((xEmployee)))
                    xtest_base_class_kept.write
                      [xself]
                        memory > xu
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xEmployee)) ((xManager)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xu)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xEmployee)) (((xu).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xManager)) (((xu).x__args__)))
                    xtest_union_union.write
                      [xself]
                        memory > xu
                        memory > xv
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            xv.write (((xunsupported)) ((xUnion)) ((xu)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xv)) ((((xunsupported)) ((xUnion)) ((xint)) ((xfloat)) ((xEmployee)))))
                    xtest_repr.write
                      [xself]
                        memory > xT
                        memory > xu
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xUnion)))) ("'typing.Union'"))
                            xu.write (((xunsupported)) ((xUnion)) ((xEmployee)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) (("'typing.Union[%s.Employee, int]'".mod (x__name__))))
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) (("'typing.Union[int, %s.Employee]'".mod (x__name__))))
                            xT.write (((xTypeVar)) ("'T'"))
                            xu.write (((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xint)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ((((xrepr)) ((xint)))))
                            xu.write (((xunsupported)) ((xUnion)) ((((xunsupported)) ((xList)) ((xint)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ("'typing.Union[typing.List[int], int]'"))
                            xu.write (((xunsupported)) ((xUnion)) ((((xunsupported)) ((xlist)) ((xint)))) ((((xunsupported)) ((xdict)) ((xstr)) ((xfloat)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ("'typing.Union[list[int], dict[str, float]]'"))
                            xu.write (((xunsupported)) ((xUnion)) (((xint).or (xfloat))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xu)))) ("'typing.Union[int, float]'"))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                    xtest_cannot_instantiate.write
                      [xself]
                        memory > xu
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xUnion)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xUnion)))))
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xu)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xu)))))
                    xtest_union_generalization.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertFalse)) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).eq (xstr))))
                            xbogusForceDataize.write ((((xself).xassertFalse)) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).eq (((xunsupported)) (((xtyping).xIterable)) ((xint))))))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xstr)) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((((xunsupported)) (((xtyping).xIterable)) ((xint)))) (((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xtyping).xIterable)) ((xint))))).x__args__)))
                    xtest_union_compare_other.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xUnion)) ((xobject)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xUnion)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xClassVar)) ((xUnion)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xOptional)) ((xUnion)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ("None: is there a None literal in the EO language?"))) ((xOptional)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xOptional)) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xOptional)) (((xtyping).xMutableMapping)))) ((xUnion)))
                    xtest_optional.write
                      [xself]
                        memory > xu
                        memory > xo
                        seq > @
                          seq
                            xo.write (((xunsupported)) ((xOptional)) ((xint)))
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xo)) ((xu)))
                    xtest_empty.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            (((xunsupported)) ((xUnion)) ((((xunsupported)))))
                    xtest_no_eval_union.write
                      [xself]
                        memory > xu
                        memory > xf
                        seq > @
                          seq
                            xu.write (((xunsupported)) ((xUnion)) ((xint)) ((xstr)))
                            xf.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xunsupported)) ((((xget_type_hints)) ((xf)))) ("'x'"))) ((xu)))
                    xtest_function_repr_union.write
                      [xself]
                        memory > xfun
                        seq > @
                          seq
                            xfun.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xUnion)) ((xfun)) ((xint)))))) ("'typing.Union[fun, int]'"))
                    xtest_union_str_pattern.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            xA.write (((xunsupported)) ((xUnion)) ((xstr)) ((xPattern)))
                            unsupported
                    xtest_etree.write
                      [xself]
                        memory > xElement
                        memory > xElem
                        seq > @
                          seq
                            (((xunsupported)))
                            (((xunsupported)) ((xUnion)) ((xElement)) ((xstr)))
                            xElem.write
                              []
                                seq > @
                                  (((xunsupported)))
                                    (((xunsupported)) ((((xElement)) ((((xunsupported)) ((xargs)))))))
                            (((xunsupported)) ((xUnion)) ((xElem)) ((xstr)))
            xTupleTests.write
              []
                memory > xtest_tuple_subclass
                memory > xtest_repr
                memory > xtest_tuple_instance_type_error
                memory > xtest_equality
                memory > xtest_basics
                memory > xtest_errors
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xTP
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xTuple)) ((((xunsupported)) ((xTuple)) ((xint)) ((xstr)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xtuple)) ((((xunsupported)) ((xTuple)) ((xint)) ((xstr)))))
                            xTP.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xtuple)) ((xTuple)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xTP)) ((xTuple)))
                    xtest_equality.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xTuple)) ((xint)))) ((((xunsupported)) ((xTuple)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xTuple)) ((xint)) (""))) ((((xunsupported)) ((xTuple)) ((xint)) (""))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xTuple)) ((xint)))) ((((xunsupported)) ((xTuple)) ((xint)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xTuple)) ((xint)))) ((((xunsupported)) ((xTuple)) ((xint)) (""))))
                    xtest_tuple_subclass.write
                      [xself]
                        memory > xMyTuple
                        seq > @
                          seq
                            xMyTuple.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMyTuple)) ((xTuple)))
                    xtest_tuple_instance_type_error.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xunsupported)) (0) (0))) ((((xunsupported)) ((xTuple)) ((xint)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)) (0) (0))) ((xTuple)))
                    xtest_repr.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xTuple)))) ("'typing.Tuple'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)))))))) ("'typing.Tuple[()]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((xint)) ((xfloat)))))) ("'typing.Tuple[int, float]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((xint)) (""))))) ("'typing.Tuple[int, ...]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) ((xlist)) ((xint)))))))) ("'typing.Tuple[list[int]]'"))
                    xtest_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (42) ((xTuple)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (42) ((((xunsupported)) ((xTuple)) ((xint)))))
            xBaseCallableTests.write
              []
                memory > xtest_ellipsis_in_generic
                memory > xtest_weakref
                memory > xtest_eq_hash
                memory > xtest_pickle
                memory > xtest_callable_instance_works
                memory > xtest_callable_wrong_forms
                memory > xtest_var_substitution
                memory > xtest_repr
                memory > xtest_cannot_instantiate
                memory > xtest_concatenate
                memory > xtest_type_erasure
                memory > xtest_paramspec
                memory > xtest_errors
                memory > xtest_callable_instance_type_error
                memory > xtest_basic
                memory > xtest_self_subclass
                memory > xtest_callable_with_ellipsis
                seq > @
                  seq
                    xtest_self_subclass.write
                      [xself]
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (((xtypes).xFunctionType)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) (((xtypes).xFunctionType)) ((xCallable)))
                    xtest_eq_hash.write
                      [xself]
                        memory > xC
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xC.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xunsupported)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))))) (1))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xstr)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((((xunsupported)) ((xCallable)) ("") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xC)) ((xCallable)))
                    xtest_cannot_instantiate.write
                      [xself]
                        memory > xc
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xCallable)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xCallable)))))
                            xc.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xc)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xc)))))
                    xtest_callable_wrong_forms.write
                      [xself]
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xCallable)) ((xint)))
                    xtest_callable_instance_works.write
                      [xself]
                        memory > xf
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xf.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) ((xCallable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ("None: is there a None literal in the EO language?") ((xCallable)))
                    xtest_callable_instance_type_error.write
                      [xself]
                        memory > xf
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xf.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ("None: is there a None literal in the EO language?"))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xAny)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ("None: is there a None literal in the EO language?") ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ("None: is there a None literal in the EO language?"))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ("None: is there a None literal in the EO language?") ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xAny)))))
                    xtest_repr.write
                      [xself]
                        seq > @
                    xtest_callable_with_ellipsis.write
                      [xself]
                        memory > xCallable
                        memory > xfoo
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xCallable)) ("") ((xT)))))))
                    xtest_ellipsis_in_generic.write
                      [xself]
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            (((xunsupported)) (((xtyping).xList)) ((((xunsupported)) ((xCallable)) ("") ((xstr)))))
                    xtest_basic.write
                      [xself]
                        memory > xalias
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            (((xunsupported)) ((xCallable)) ((((xcollections).xabc).xCallable))).if
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xalias)) (((xtypes).xGenericAlias)))
                            xbogusForceDataize.write ((((xself).xassertIs)) (((xalias).x__origin__)) ((((xcollections).xabc).xCallable)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__args__)) ((((xunsupported)) ((xint)) ((xstr)) ((xfloat)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__parameters__)) ((((xunsupported)))))
                    xtest_weakref.write
                      [xself]
                        memory > xalias
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xweakref).xref)) ((xalias)))))) ((xalias)))
                    xtest_pickle.write
                      [xself]
                        memory > xs
                        memory > xloaded
                        memory > xalias
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xs.write ((((xpickle).xdumps)) ((xalias)) ((xproto)))
                                xloaded.write ((((xpickle).xloads)) ((xs)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__origin__)) (((xloaded).x__origin__)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__args__)) (((xloaded).x__args__)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xalias).x__parameters__)) (((xloaded).x__parameters__)))
                    xtest_var_substitution.write
                      [xself]
                        seq > @
                    xtest_type_erasure.write
                      [xself]
                        memory > xC1
                        memory > xa
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xC1.write
                              []
                                memory > x__call__
                                seq > @
                                  x__call__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) ("None: is there a None literal in the EO language?"))
                            xa.write (((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)))) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((xa))).x__class__)) ((xC1)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xa))).x__orig_class__)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)))) ((xT)))))
                    xtest_paramspec.write
                      [xself]
                        memory > xP
                        memory > xP2
                        memory > xC1
                        memory > xCallable
                        memory > xC2
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xP.write (((xParamSpec)) ("'P'"))
                            xP2.write (((xParamSpec)) ("'P2'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((xP)) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xint)) ((xstr)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ("") ((xstr)))) ((((xunsupported)) ((xCallable)) ("") ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((xP2)) ((xstr)))) ((((xunsupported)) ((xCallable)) ((xP2)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC1)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))) ((xstr)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xC1)) ((xint)) ((xstr)))
                            xC2.write (((xunsupported)) ((xCallable)) ((xP)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)) ((xint)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)) ((xint)) ((xstr)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) (""))) ((((xunsupported)) ((xCallable)) ("") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((xP2)))) ((((xunsupported)) ((xCallable)) ((xP2)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP2)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((xint)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xC2)) ((xint)) ((xstr)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xint)))))
                    xtest_concatenate.write
                      [xself]
                        memory > xC1
                        memory > xP
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xP.write (((xParamSpec)) ("'P'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((((xunsupported)) (((xtyping).xConcatenate)) ((xint)) ((xP)))) ((xint)))
                    xtest_errors.write
                      [xself]
                        memory > xC1
                        memory > xalias
                        memory > xP
                        memory > xCallable
                        seq > @
                          seq
                            xCallable.write ((xself).xCallable)
                            xalias.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xfloat)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("is not a generic class"))))
                              (((xunsupported)) ((xalias)) ((xint)))
                            xP.write (((xParamSpec)) ("'P'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((xP)) ((xT)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("many arguments for"))))
                              (((xunsupported)) ((xC1)) ((xint)) ((xstr)) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("few arguments for"))))
                              (((xunsupported)) ((xC1)) ((xint)))
            xTypingCallableTests.write
              []
                memory > xtest_consistency
                memory > xCallable
                seq > @
                  seq
                    xCallable.write ((xtyping).xCallable)
                    xtest_consistency.write
                      [xself]
                        memory > xc2
                        memory > xc1
                        seq > @
                          seq
                            xc1.write (((xunsupported)) (((xtyping).xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xdict)))
                            xc2.write (((xunsupported)) ((((xcollections).xabc).xCallable)) ((((xunsupported)) ((xint)) ((xstr)))) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc1).x__args__)) (((xc2).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) (((xc1).x__args__)))) ((((xhash)) (((xc2).x__args__)))))
            xCollectionsCallableTests.write
              []
                memory > xCallable
                seq > @
                  xCallable.write (((xcollections).xabc).xCallable)
            xLiteralTests.write
              []
                memory > xtest_literals_inside_other_types
                memory > xtest_hash
                memory > xtest_repr
                memory > xtest_illegal_parameters_do_not_raise_runtime_errors
                memory > xtest_args
                memory > xtest_basics
                memory > xtest_flatten
                memory > xtest_no_subclassing
                memory > xtest_cannot_init
                memory > xtest_equal
                memory > xtest_no_isinstance_or_issubclass
                memory > xtest_no_multiple_subscripts
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((xLiteral)) (1))
                            (((xunsupported)) ((xLiteral)) (1) (2) (3))
                            (((xunsupported)) ((xLiteral)) ("x") ("y") ("z"))
                            (((xunsupported)) ((xLiteral)) ("None: is there a None literal in the EO language?"))
                            (((xunsupported)) ((xLiteral)) (TRUE))
                            (((xunsupported)) ((xLiteral)) (1) ("2") (FALSE))
                            (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1) (2))) ((((xunsupported)) ((xLiteral)) (4) (5))))
                    xtest_illegal_parameters_do_not_raise_runtime_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((xLiteral)) ((xint)))
                            (((xunsupported)) ((xLiteral)) ((((xunsupported)) ("foo") (3) ("bar") (4))))
                            (((xunsupported)) ((xLiteral)) ((xT)))
                    xtest_literals_inside_other_types.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((xList)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))
                            (((xunsupported)) ((xList)) ((((xunsupported)) ((xLiteral)) ((((xunsupported)) ("foo") ("bar") ("baz"))))))
                    xtest_repr.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) (1))))) ("typing.Literal[1]"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) (1) (TRUE) ("foo"))))) ("typing.Literal[1, True, 'foo']"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) ((xint)))))) ("typing.Literal[int]"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xLiteral)))) ("typing.Literal"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) ("None: is there a None literal in the EO language?"))))) ("typing.Literal[None]"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xLiteral)) (1) (2) (3) (3))))) ("typing.Literal[1, 2, 3]"))
                    xtest_cannot_init.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xLiteral)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xLiteral)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((((xunsupported)) ((xLiteral)) (1))))))
                    xtest_no_isinstance_or_issubclass.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (1) ((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((xint)) ((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) (1) ((((xunsupported)) ((xLiteral)) (1))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((((xunsupported)) ((xLiteral)) (1))))
                    xtest_no_subclassing.write
                      [xself]
                        memory > xBar
                        memory > xFoo
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xFoo.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xBar.write
                                []
                                  seq > @
                    xtest_no_multiple_subscripts.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            (((xunsupported)) ((((xunsupported)) ((xLiteral)) (1))) (1))
                    xtest_equal.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (0))) ((((xunsupported)) ((xLiteral)) (FALSE))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (TRUE))) ((((xunsupported)) ((xLiteral)) (1))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1))) ((((xunsupported)) ((xLiteral)) (2))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1) (TRUE))) ((((xunsupported)) ((xLiteral)) (1))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1) (TRUE))) ((((xunsupported)) ((xLiteral)) (1) (1))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xLiteral)) (1) (2))) ((((xunsupported)) ((xLiteral)) (TRUE) (2))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xLiteral)) (1))) ((((xunsupported)) ((xLiteral)) (1))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xLiteral)) (1) (2))) ((((xunsupported)) ((xLiteral)) (2) (1))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))) ((((xunsupported)) ((xLiteral)) (1) (2) (3) (3))))
                    xtest_hash.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1))))) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1) (2))))) ((((xhash)) ((((xunsupported)) ((xLiteral)) (2) (1))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))) ((((xhash)) ((((xunsupported)) ((xLiteral)) (1) (2) (3) (3))))))
                    xtest_args.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) (1) (2) (3)).x__args__)) ((((xunsupported)) (1) (2) (3))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) (1) (2) (3) (3)).x__args__)) ((((xunsupported)) (1) (2) (3))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) (1) ((((xunsupported)) ((xLiteral)) (2))) ((((xunsupported)) ((xLiteral)) (3) (4)))).x__args__)) ((((xunsupported)) (1) (2) (3) (4))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xLiteral)) ((((xunsupported)))) ((((xunsupported))))).x__args__)) ((((xunsupported)) ((((xunsupported)))) ((((xunsupported)))))))
                    xtest_flatten.write
                      [xself]
                        memory > xl2
                        memory > xl3
                        memory > xl1
                        seq > @
                          seq
                            xl1.write (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1))) ((((xunsupported)) ((xLiteral)) (2))) ((((xunsupported)) ((xLiteral)) (3))))
                            xl2.write (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1) (2))) (3))
                            xl3.write (((xunsupported)) ((xLiteral)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))
                            (((xunsupported)) ((xl)) ((((xunsupported)) ((xl1)) ((xl2)) ((xl3)))))
                              seq
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((xl)) ((((xunsupported)) ((xLiteral)) (1) (2) (3))))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xl).x__args__)) ((((xunsupported)) (1) (2) (3))))
            xXK.write (((xTypeVar)) ("'XK'") ((xstr)) ((xbytes)))
            xXV.write (((xTypeVar)) ("'XV'"))
            xSimpleMapping.write
              []
                memory > x__setitem__
                memory > x__getitem__
                memory > xget
                seq > @
                  seq
                    x__getitem__.write
                      [xself xkey]
                        seq > @
                          unsupported
                    x__setitem__.write
                      [xself xkey xvalue]
                        seq > @
                          unsupported
                    xget.write
                      [xself xkey xdefault]
                        seq > @
                          (((xunsupported)))
                            unsupported
            xMySimpleMapping.write
              []
                memory > x__setitem__
                memory > x__init__
                memory > x__getitem__
                memory > xget
                seq > @
                  seq
                    x__init__.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((xself).xstore)) ((((xunsupported)))))
                    x__getitem__.write
                      [xself xkey]
                        seq > @
                          (((xunsupported)) ((((xunsupported)) (((xself).xstore)) ((xkey)))))
                    x__setitem__.write
                      [xself xkey xvalue]
                        seq > @
                          (((xunsupported)) ((((xunsupported)) (((xself).xstore)) ((xkey)))) ((xvalue)))
                    xget.write
                      [xself xkey xdefault]
                        seq > @
                          (((xunsupported)))
                            (((xunsupported)) ((xKeyError)))
                              (((xunsupported)) ((((xunsupported)) (((xself).xstore)) ((xkey)))))
                              (((xunsupported)) ((xdefault)))
            xCoordinate.write
              []
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xint)))
                    (((xunsupported)) ((xint)))
            xPoint.write
              []
                memory > xstr
                seq > @
                  (((xunsupported)))
                    (((xunsupported)) ((xstr)))
            xMyPoint.write
              []
                memory > xstr
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xint)))
                    (((xunsupported)) ((xint)))
                    (((xunsupported)) ((xstr)))
            xXAxis.write
              []
                memory > xint
                seq > @
                  (((xunsupported)) ((xint)))
            xYAxis.write
              []
                memory > xint
                seq > @
                  (((xunsupported)) ((xint)))
            xPosition.write
              []
                seq > @
                  (((xunsupported)))
            xProto.write
              []
                memory > xmeth
                memory > xint
                seq > @
                  (((xunsupported)))
                    (((xunsupported)) ((xint)))
                    xmeth.write
                      [xself xarg]
                        seq > @
                          unsupported
            xConcrete.write
              []
                seq > @
            xOther.write
              []
                memory > xmeth
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xint)) (1))
                    xmeth.write
                      [xself xarg]
                        seq > @
                          seq
                            ((xarg).eq "'this'").if
                              (((xunsupported)) (1))
                            (((xunsupported)) (0))
            xNT.write
              []
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xint)))
                    (((xunsupported)) ((xint)))
            xHasCallProtocol.write
              []
                seq > @
                  (((xunsupported)))
                    (((xunsupported)) (((xtyping).xCallable)))
            xProtocolTests.write
              []
                memory > xtest_collections_protocols_allowed
                memory > xtest_non_runtime_protocol_isinstance_check
                memory > xtest_protocols_isinstance
                memory > xtest_protocols_pickleable
                memory > xtest_protocol_checks_after_subscript
                memory > xtest_subprotocols_extending
                memory > xtest_new_called
                memory > xtest_defining_generic_protocols
                memory > xtest_supports_abs
                memory > xtest_generic_protocols_special_from_protocol
                memory > xtest_function_implements_protocol
                memory > xtest_supports_complex
                memory > xtest_builtin_protocol_allowlist
                memory > xtest_generic_protocols_eq
                memory > xtest_protocols_support_register
                memory > xtest_issubclass_fails_correctly
                memory > xtest_cannot_instantiate_abstract
                memory > xtest_no_instantiation
                memory > xtest_protocols_isinstance_py36
                memory > xtest_supports_index
                memory > xtest_generic_protocols_repr
                memory > xtest_none_on_callable_blocks_implementation
                memory > xtest_init_called
                memory > xtest_generic_protocols_special_from_generic
                memory > xtest_super_call_init
                memory > xtest_non_protocol_subclasses
                memory > xtest_protocols_issubclass
                memory > xtest_subprotocols_merging
                memory > xtest_basic_protocol
                memory > xtest_supports_float
                memory > xtest_none_on_non_callable_doesnt_block_implementation
                memory > xtest_none_treated_correctly
                memory > xtest_bundled_protocol_instance_works
                memory > xtest_protocols_in_unions
                memory > xtest_everything_implements_empty_protocol
                memory > xtest_supports_bytes
                memory > xtest_no_runtime_deco_on_nominal
                memory > xtest_defining_generic_protocols_old_style
                memory > xtest_reversible
                memory > xtest_supports_round
                memory > xtest_protocols_isinstance_init
                memory > xtest_custom_subclasshook
                memory > xtest_supports_int
                memory > xtest_protocols_bad_subscripts
                memory > xtest_protocols_issubclass_non_callable
                memory > xtest_no_inheritance_from_nominal
                seq > @
                  seq
                    xtest_basic_protocol.write
                      [xself]
                        memory > xf
                        memory > xP
                        memory > xC
                        memory > xD
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xmeth
                                seq > @
                                  (((xunsupported)))
                                    xmeth.write
                                      [xself]
                                        seq > @
                            xC.write
                              []
                                seq > @
                            xD.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xself]
                                      seq > @
                            xf.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xD)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xD)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) (((xtypes).xFunctionType)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xf)) ((xP)))
                    xtest_everything_implements_empty_protocol.write
                      [xself]
                        memory > xf
                        memory > xEmpty
                        memory > xC
                        seq > @
                          seq
                            xEmpty.write
                              []
                                seq > @
                                  (((xunsupported)))
                            xC.write
                              []
                                seq > @
                            xf.write
                              []
                                seq > @
                            (((xunsupported)) ((xthing)) ((((xunsupported)) ((xobject)) ((xtype)) ((xtuple)) ((xC)) (((xtypes).xFunctionType)))))
                              xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xthing)) ((xEmpty)))
                            (((xunsupported)) ((xthing)) ((((xunsupported)) ((((xobject)))) (1) ((((xunsupported)))) ((xtyping)) ((xf)))))
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xthing)) ((xEmpty)))
                    xtest_function_implements_protocol.write
                      [xself]
                        memory > xf
                        seq > @
                          seq
                            xf.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xf)) ((xHasCallProtocol)))
                    xtest_no_inheritance_from_nominal.write
                      [xself]
                        memory > xD
                        memory > xC
                        memory > xP
                        memory > xBP
                        memory > xE
                        seq > @
                          seq
                            xC.write
                              []
                                seq > @
                            xBP.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xP.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xP.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xP.write
                                []
                                  seq > @
                            xD.write
                              []
                                seq > @
                            xE.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xD)))) ((xE)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xE)))) ((xD)))
                    xtest_no_instantiation.write
                      [xself]
                        memory > xC
                        memory > xCG
                        memory > xPG
                        memory > xT
                        memory > xP
                        seq > @
                          seq
                            xP.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xP)))
                            xC.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xC)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xC)) (42))
                            xT.write (((xTypeVar)) ("'T'"))
                            xPG.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xPG)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xPG)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xPG)) ((xT)))))
                            xCG.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((((xunsupported)) ((xCG)) ((xint)))))) ((xCG)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xCG)) ((xint)))) (42))
                    xtest_cannot_instantiate_abstract.write
                      [xself]
                        memory > xB
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xameth
                                seq > @
                                  (((xunsupported)))
                                    xameth.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)))
                                            (((xunsupported)) ((xNotImplementedError)))
                            xB.write
                              []
                                seq > @
                            xC.write
                              []
                                memory > xameth
                                seq > @
                                  xameth.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (26))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xB)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP)))
                    xtest_subprotocols_extending.write
                      [xself]
                        memory > xC
                        memory > xP1
                        memory > xP2
                        memory > xC1
                        memory > xC2
                        seq > @
                          seq
                            xP1.write
                              []
                                memory > xmeth1
                                seq > @
                                  xmeth1.write
                                    [xself]
                                      seq > @
                            xP2.write
                              []
                                memory > xmeth2
                                seq > @
                                  (((xunsupported)))
                                    xmeth2.write
                                      [xself]
                                        seq > @
                            xC.write
                              []
                                memory > xmeth2
                                memory > xmeth1
                                seq > @
                                  seq
                                    xmeth1.write
                                      [xself]
                                        seq > @
                                    xmeth2.write
                                      [xself]
                                        seq > @
                            xC1.write
                              []
                                memory > xmeth1
                                seq > @
                                  xmeth1.write
                                    [xself]
                                      seq > @
                            xC2.write
                              []
                                memory > xmeth2
                                seq > @
                                  xmeth2.write
                                    [xself]
                                      seq > @
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC1)))) ((xP2)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC2)))) ((xP2)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC1)) ((xP2)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC2)) ((xP2)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP2)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC)) ((xP2)))
                    xtest_subprotocols_merging.write
                      [xself]
                        memory > xC
                        memory > xP
                        memory > xP1
                        memory > xP2
                        memory > xC1
                        memory > xC2
                        seq > @
                          seq
                            xP1.write
                              []
                                memory > xmeth1
                                seq > @
                                  xmeth1.write
                                    [xself]
                                      seq > @
                            xP2.write
                              []
                                memory > xmeth2
                                seq > @
                                  xmeth2.write
                                    [xself]
                                      seq > @
                            xP.write
                              []
                                seq > @
                                  (((xunsupported)))
                            xC.write
                              []
                                memory > xmeth2
                                memory > xmeth1
                                seq > @
                                  seq
                                    xmeth1.write
                                      [xself]
                                        seq > @
                                    xmeth2.write
                                      [xself]
                                        seq > @
                            xC1.write
                              []
                                memory > xmeth1
                                seq > @
                                  xmeth1.write
                                    [xself]
                                      seq > @
                            xC2.write
                              []
                                memory > xmeth2
                                seq > @
                                  xmeth2.write
                                    [xself]
                                      seq > @
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC1)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC2)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC1)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC2)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC)) ((xP)))
                    xtest_protocols_issubclass.write
                      [xself]
                        memory > xC
                        memory > xBadPG
                        memory > xPG
                        memory > xT
                        memory > xBadP
                        memory > xP
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write
                                      [xself]
                                        seq > @
                                          unsupported
                            xPG.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write
                                      [xself]
                                        seq > @
                                          unsupported
                            xBadP.write
                              []
                                memory > xx
                                seq > @
                                  xx.write
                                    [xself]
                                      seq > @
                                        unsupported
                            xBadPG.write
                              []
                                memory > xx
                                seq > @
                                  xx.write
                                    [xself]
                                      seq > @
                                        unsupported
                            xC.write
                              []
                                memory > xx
                                seq > @
                                  xx.write
                                    [xself]
                                      seq > @
                                        unsupported
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC)) ((xPG)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xBadP)) ((xPG)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xC)) ((((xunsupported)) ((xPG)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xC)) ((((xunsupported)) ((xPG)) ((xC)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xC)) ((xBadP)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xC)) ((xBadPG)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xP)) ((((xunsupported)) ((xPG)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xPG)) ((((xunsupported)) ((xPG)) ((xint)))))
                    xtest_protocols_issubclass_non_callable.write
                      [xself]
                        memory > xC
                        memory > xPNonCall
                        memory > xD
                        seq > @
                          seq
                            xC.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xPNonCall.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xC)) ((xPNonCall)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xPNonCall)))
                            xbogusForceDataize.write ((((xPNonCall).xregister)) ((xC)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xC)) ((xPNonCall)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xPNonCall)))
                            xD.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC)) ((xD)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC)))) ((xD)))
                            xbogusForceDataize.write ((((xD).xregister)) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC)) ((xD)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xD)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xD)) ((xPNonCall)))
                    xtest_protocols_isinstance.write
                      [xself]
                        memory > xC
                        memory > xBadPG
                        memory > xPG
                        memory > xT
                        memory > xBadP
                        memory > xP
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write
                              []
                                memory > xmeth
                                seq > @
                                  (((xunsupported)))
                                    xmeth.write
                                      [xx]
                                        seq > @
                                          unsupported
                            xPG.write
                              []
                                memory > xmeth
                                seq > @
                                  (((xunsupported)))
                                    xmeth.write
                                      [xx]
                                        seq > @
                                          unsupported
                            xBadP.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xx]
                                      seq > @
                                        unsupported
                            xBadPG.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xx]
                                      seq > @
                                        unsupported
                            xC.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xx]
                                      seq > @
                                        unsupported
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xPG)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xC)))) ((((xunsupported)) ((xPG)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xC)))) ((((xunsupported)) ((xPG)) ((xC)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xC)))) ((xBadP)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xC)))) ((xBadPG)))
                    xtest_protocols_isinstance_py36.write
                      [xself]
                        memory > xBad
                        memory > xC
                        memory > xBPoint
                        memory > xAPoint
                        seq > @
                          seq
                            xAPoint.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself xx xy xlabel]
                                      seq > @
                                        seq
                                          (((xunsupported)) (((xself).xx)) ((xx)))
                                          (((xunsupported)) (((xself).xy)) ((xy)))
                                          (((xunsupported)) (((xself).xlabel)) ((xlabel)))
                            xBPoint.write
                              []
                                memory > xlabel
                                memory > x__init__
                                seq > @
                                  seq
                                    xlabel.write "'B'"
                                    x__init__.write
                                      [xself xx xy]
                                        seq > @
                                          seq
                                            (((xunsupported)) (((xself).xx)) ((xx)))
                                            (((xunsupported)) (((xself).xy)) ((xy)))
                            xC.write
                              []
                                memory > xmeth
                                memory > x__init__
                                seq > @
                                  seq
                                    x__init__.write
                                      [xself xattr]
                                        seq > @
                                          (((xunsupported)) (((xself).xattr)) ((xattr)))
                                    xmeth.write
                                      [xself xarg]
                                        seq > @
                                          (((xunsupported)) (0))
                            xBad.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xAPoint)) (1) (2) ("'A'"))) ((xPoint)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xBPoint)) (1) (2))) ((xPoint)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xMyPoint)))) ((xPoint)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xBPoint)) (1) (2))) ((xPosition)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xOther)))) ((xProto)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xConcrete)))) ((xProto)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)) (42))) ((xProto)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xBad)))) ((xProto)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xBad)))) ((xPoint)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xBad)))) ((xPosition)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xBad)))) ((xConcrete)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xOther)))) ((xConcrete)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xNT)) (1) (2))) ((xPosition)))
                    xtest_protocols_isinstance_init.write
                      [xself]
                        memory > xT
                        memory > xPG
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xPG.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xC.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself xx]
                                      seq > @
                                        (((xunsupported)) (((xself).xx)) ((xx)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)) (1))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)) (1))) ((xPG)))
                    xtest_protocol_checks_after_subscript.write
                      [xself]
                        memory > xC
                        memory > xOther1
                        memory > xD1
                        memory > xCA
                        memory > xP
                        memory > xOther2
                        memory > xCI
                        memory > xD2
                        seq > @
                          seq
                            xP.write
                              []
                                seq > @
                            xC.write
                              []
                                seq > @
                            xOther1.write
                              []
                                seq > @
                            xOther2.write
                              []
                                seq > @
                            xCA.write (((xunsupported)) ((xC)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xOther1)))) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xOther2)) ((xC)))
                            xD1.write
                              []
                                seq > @
                            xD2.write
                              []
                                seq > @
                            xCI.write (((xunsupported)) ((xC)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xD1)))) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xD2)) ((xC)))
                    xtest_protocols_support_register.write
                      [xself]
                        memory > xPM
                        memory > xP
                        memory > xC
                        memory > xD
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xPM.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xself]
                                      seq > @
                            xD.write
                              []
                                seq > @
                            xC.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xD).xregister)) ((xC)))
                            xbogusForceDataize.write ((((xP).xregister)) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xD)))
                    xtest_none_on_non_callable_doesnt_block_implementation.write
                      [xself]
                        memory > xA
                        memory > xB
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xA.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xB.write
                              []
                                memory > xx
                                seq > @
                                  xx.write "None: is there a None literal in the EO language?"
                            xC.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (((xself).xx)) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xB)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP)))
                    xtest_none_on_callable_blocks_implementation.write
                      [xself]
                        memory > xA
                        memory > xB
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write
                                      [xself]
                                        seq > @
                                          unsupported
                            xA.write
                              []
                                memory > xx
                                seq > @
                                  xx.write
                                    [xself]
                                      seq > @
                                        unsupported
                            xB.write
                              []
                                memory > xx
                                seq > @
                                  xx.write "None: is there a None literal in the EO language?"
                            xC.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (((xself).xx)) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xB)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC)))) ((xP)))
                    xtest_non_protocol_subclasses.write
                      [xself]
                        memory > xD
                        memory > xC
                        memory > xNonPR
                        memory > xP
                        memory > xPR
                        memory > xNonP
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xPR.write
                              []
                                memory > xmeth
                                seq > @
                                  (((xunsupported)))
                                    xmeth.write
                                      [xself]
                                        seq > @
                            xNonP.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xNonPR.write
                              []
                                seq > @
                            xC.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xD.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xself]
                                      seq > @
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xC)))) ((xNonP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xD)))) ((xNonPR)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC)) ((xNonP)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xD)) ((xNonPR)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xNonPR)))) ((xPR)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xNonPR)) ((xPR)))
                    xtest_custom_subclasshook.write
                      [xself]
                        memory > xBadClass
                        memory > xP
                        memory > xC
                        memory > xOKClass
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xOKClass.write
                              []
                                seq > @
                            xBadClass.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xC.write
                              []
                                memory > x__subclasshook__
                                seq > @
                                  x__subclasshook__.write
                                    [xcls xother]
                                      seq > @
                                        (((xunsupported)))
                                          (((xunsupported)) ((((((xother).x__name__).xstartswith)) ("OK"))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xOKClass)))) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xBadClass)))) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xOKClass)) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xBadClass)) ((xC)))
                    xtest_issubclass_fails_correctly.write
                      [xself]
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xC.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xC)))) ((xP)))
                    xtest_defining_generic_protocols.write
                      [xself]
                        memory > xC
                        memory > xS
                        memory > xT
                        memory > xP
                        memory > xPR
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            xPR.write
                              []
                                memory > xmeth
                                seq > @
                                  (((xunsupported)))
                                    xmeth.write
                                      [xself]
                                        seq > @
                            xP.write
                              []
                                memory > xy
                                seq > @
                                  xy.write 1
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xPR)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xP)) ((xint)) ((xstr)))
                            xC.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((((xunsupported)) ((xC)) ((xstr)))))) ((xC)))
                    xtest_defining_generic_protocols_old_style.write
                      [xself]
                        memory > xS
                        memory > xT
                        memory > xP
                        memory > xP2
                        memory > xTest
                        memory > xPSub
                        memory > xP1
                        memory > xPR
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            xPR.write
                              []
                                memory > xmeth
                                seq > @
                                  (((xunsupported)))
                                    xmeth.write
                                      [xself]
                                        seq > @
                            xP.write
                              []
                                memory > xy
                                seq > @
                                  xy.write 1
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xunsupported)) ((xPR)) ((xint)) ((xstr)))) ((xPR)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xP)) ((xPR)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xPR)) ((xint)))
                            xP1.write
                              []
                                memory > xbar
                                seq > @
                                  xbar.write
                                    [xself xx]
                                      seq > @
                                        unsupported
                            xP2.write
                              []
                                memory > xbar
                                seq > @
                                  xbar.write
                                    [xself xx]
                                      seq > @
                                        unsupported
                            xPSub.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xTest.write
                              []
                                memory > xx
                                memory > xbar
                                seq > @
                                  seq
                                    xx.write 1
                                    xbar.write
                                      [xself xx]
                                        seq > @
                                          (((xunsupported)) ((xx)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xTest)))) ((xPSub)))
                    xtest_init_called.write
                      [xself]
                        memory > xC
                        memory > xD1
                        memory > xB
                        memory > xT
                        memory > xP
                        memory > xD2
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write
                              []
                                seq > @
                            xC.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (((xself).xtest)) ("'OK'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xC)) ((xint))))).xtest)) ("'OK'"))
                            xB.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (((xself).xtest)) ("'OK'"))
                            xD1.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xD1)) ((xint))))).xtest)) ("'OK'"))
                            xD2.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xD2)) ((xint))))).xtest)) ("'OK'"))
                    xtest_new_called.write
                      [xself]
                        memory > xT
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write
                              []
                                seq > @
                            xC.write
                              []
                                memory > x__new__
                                seq > @
                                  x__new__.write
                                    [xcls]
                                      memory > xself
                                      seq > @
                                        (((xunsupported)))
                                          xself.write ((((((xsuper))).x__new__)) ((xcls)) ((((xunsupported)) ((xargs)))))
                                          (((xunsupported)) (((xself).xtest)) ("'OK'"))
                                          (((xunsupported)) ((xself)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xC)) ((xint))))).xtest)) ("'OK'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xC)) ((xint)))) (42))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((((xunsupported)) ((xC)) ((xint)))) (42))
                    xtest_protocols_bad_subscripts.write
                      [xself]
                        memory > xT
                        memory > xP
                        memory > xS
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xP.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xP.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xP.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xP.write
                                []
                                  seq > @
                    xtest_generic_protocols_repr.write
                      [xself]
                        memory > xT
                        memory > xP
                        memory > xS
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            xP.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((((((xrepr)) ((((xunsupported)) ((xP)) ((xT)) ((xS))))).xendswith)) ("'P[~T, ~S]'"))))
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((((((xrepr)) ((((xunsupported)) ((xP)) ((xint)) ((xstr))))).xendswith)) ("'P[int, str]'"))))
                    xtest_generic_protocols_eq.write
                      [xself]
                        memory > xT
                        memory > xP
                        memory > xS
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            xP.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xP)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xP)) ((xint)) ((xT)))) ((((xunsupported)) ((xP)) ((xint)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((((xunsupported)) ((xP)) ((xT)) ((xT)))) ((((xunsupported)) ((xTuple)) ((xT)) ((xS)))))) ((xint)) ((xstr)))) ((((xunsupported)) ((xP)) ((((xunsupported)) ((xTuple)) ((xint)) ((xstr)))) ((((xunsupported)) ((xTuple)) ((xint)) ((xstr)))))))
                    xtest_generic_protocols_special_from_generic.write
                      [xself]
                        memory > xT
                        memory > xP
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xP).x__parameters__)) ((((xunsupported)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xP)) ((xint))).x__parameters__)) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xP)) ((xint))).x__args__)) ((((xunsupported)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((xunsupported)) ((xP)) ((xint))).x__origin__)) ((xP)))
                    xtest_generic_protocols_special_from_protocol.write
                      [xself]
                        memory > xPR
                        memory > xT
                        memory > xPG
                        memory > xP
                        seq > @
                          seq
                            xPR.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xP.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xself]
                                      seq > @
                            xT.write (((xTypeVar)) ("'T'"))
                            xPG.write
                              []
                                memory > xx
                                memory > xmeth
                                seq > @
                                  seq
                                    xx.write 1
                                    xmeth.write
                                      [xself]
                                        seq > @
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((xP).x_is_protocol)))
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((xPR).x_is_protocol)))
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((xPG).x_is_protocol)))
                            xbogusForceDataize.write ((((xself).xassertFalse)) (((xP).x_is_runtime_protocol)))
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((xPR).x_is_runtime_protocol)))
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((((xunsupported)) ((xPG)) ((xint))).x_is_protocol)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xtyping).x_get_protocol_attrs)) ((xP)))) ((((xunsupported)) ("'meth'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xtyping).x_get_protocol_attrs)) ((xPR)))) ((((xunsupported)) ("'x'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xfrozenset)) (((((xtyping).x_get_protocol_attrs)) ((xPG)))))) ((((xfrozenset)) ((((xunsupported)) ("'x'") ("'meth'"))))))
                    xtest_no_runtime_deco_on_nominal.write
                      [xself]
                        memory > xProto
                        memory > xConcrete
                        memory > xC
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                                    (((xunsupported)))
                            xProto.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xConcrete.write
                                []
                                  seq > @
                                    (((xunsupported)))
                    xtest_none_treated_correctly.write
                      [xself]
                        memory > xD
                        memory > xC
                        memory > xDI
                        memory > xB
                        memory > xP
                        memory > xCI
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write "None: is there a None literal in the EO language?"
                            xB.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xB)))) ((xP)))
                            xC.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xD.write
                              []
                                memory > xx
                                seq > @
                                  xx.write "None: is there a None literal in the EO language?"
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xD)))) ((xP)))
                            xCI.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (((xself).xx)) (1))
                            xDI.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (((xself).xx)) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xD)))) ((xP)))
                    xtest_protocols_in_unions.write
                      [xself]
                        memory > xAlias
                        memory > xP
                        memory > xAlias2
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  xx.write "None: is there a None literal in the EO language?"
                            xAlias.write (((xunsupported)) (((xtyping).xUnion)) (((xtyping).xIterable)) ((xP)))
                            xAlias2.write (((xunsupported)) (((xtyping).xUnion)) ((xP)) (((xtyping).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xAlias)) ((xAlias2)))
                    xtest_protocols_pickleable.write
                      [xself]
                        memory > xD
                        memory > xc
                        memory > xz
                        memory > xCP
                        memory > xT
                        memory > xP
                        memory > xx
                        memory > xs
                        memory > xE
                        seq > @
                          seq
                            (((xunsupported)))
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write
                              []
                                memory > xx
                                seq > @
                                  (((xunsupported)))
                                    xx.write 1
                            xCP.write
                              []
                                seq > @
                            xc.write (((xCP)))
                            (((xunsupported)) (((xc).xfoo)) (42))
                            (((xunsupported)) (((xc).xbar)) ("'abc'"))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xz.write ((((xpickle).xdumps)) ((xc)) ((xproto)))
                                xx.write ((((xpickle).xloads)) ((xz)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xfoo)) (42))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xbar)) ("'abc'"))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xx)) (1))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).x__dict__)) ((((xunsupported)) ("'foo'") (42) ("'bar'") ("'abc'"))))
                                xs.write ((((xpickle).xdumps)) ((xP)))
                                xD.write ((((xpickle).xloads)) ((xs)))
                                xE.write
                                  []
                                    memory > xx
                                    seq > @
                                      xx.write 1
                                xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xE)))) ((xD)))
                    xtest_supports_int.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xint)) (((xtyping).xSupportsInt)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xstr)) (((xtyping).xSupportsInt)))
                    xtest_supports_float.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xfloat)) (((xtyping).xSupportsFloat)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xstr)) (((xtyping).xSupportsFloat)))
                    xtest_supports_complex.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            xC.write
                              []
                                memory > x__complex__
                                seq > @
                                  x__complex__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xcomplex)) (((xtyping).xSupportsComplex)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC)) (((xtyping).xSupportsComplex)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xstr)) (((xtyping).xSupportsComplex)))
                    xtest_supports_bytes.write
                      [xself]
                        memory > xB
                        seq > @
                          seq
                            xB.write
                              []
                                memory > x__bytes__
                                seq > @
                                  x__bytes__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xbytes)) (((xtyping).xSupportsBytes)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xB)) (((xtyping).xSupportsBytes)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xstr)) (((xtyping).xSupportsBytes)))
                    xtest_supports_abs.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xfloat)) (((xtyping).xSupportsAbs)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xint)) (((xtyping).xSupportsAbs)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xstr)) (((xtyping).xSupportsAbs)))
                    xtest_supports_round.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write (((xissubclass)) ((xfloat)) (((xtyping).xSupportsRound)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xfloat)) (((xtyping).xSupportsRound)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xint)) (((xtyping).xSupportsRound)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xstr)) (((xtyping).xSupportsRound)))
                    xtest_reversible.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xlist)) (((xtyping).xReversible)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xint)) (((xtyping).xReversible)))
                    xtest_supports_index.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xint)) (((xtyping).xSupportsIndex)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xstr)) (((xtyping).xSupportsIndex)))
                    xtest_bundled_protocol_instance_works.write
                      [xself]
                        memory > xC1
                        memory > xc
                        memory > xC2
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (0) (((xtyping).xSupportsAbs)))
                            xC1.write
                              []
                                memory > x__int__
                                seq > @
                                  x__int__.write
                                    [xself]
                                      seq > @
                                        (((xunsupported)) (42))
                            xC2.write
                              []
                                seq > @
                            xc.write (((xC2)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xc)) ((xC1)))
                    xtest_collections_protocols_allowed.write
                      [xself]
                        memory > xA
                        memory > xB
                        memory > xCustom
                        seq > @
                          seq
                            xCustom.write
                              []
                                memory > xclose
                                seq > @
                                  (((xunsupported)))
                                    xclose.write
                                      [xself]
                                        seq > @
                                          unsupported
                            xA.write
                              []
                                seq > @
                            xB.write
                              []
                                memory > x__iter__
                                memory > xclose
                                seq > @
                                  seq
                                    x__iter__.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) ((((xunsupported)))))
                                    xclose.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) (0))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xB)) ((xCustom)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xA)) ((xCustom)))
                    xtest_builtin_protocol_allowlist.write
                      [xself]
                        memory > xCustomContextManager
                        memory > xCustomProtocol
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xCustomProtocol.write
                                []
                                  seq > @
                            xCustomContextManager.write
                              []
                                seq > @
                    xtest_non_runtime_protocol_isinstance_check.write
                      [xself]
                        memory > xP
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xint
                                seq > @
                                  (((xunsupported)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("@runtime_checkable"))))
                              xbogusForceDataize.write (((xisinstance)) (1) ((xP)))
                    xtest_super_call_init.write
                      [xself]
                        memory > xP
                        memory > xFoo
                        seq > @
                          seq
                            xP.write
                              []
                                memory > xint
                                seq > @
                                  (((xunsupported)) ((xint)))
                            xFoo.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself]
                                      seq > @
                                        xbogusForceDataize.write ((((((xsuper))).x__init__)))
                            xbogusForceDataize.write (((xFoo)))
            xGenericTests.write
              []
                memory > xtest_subclass_special_form
                memory > xtest_weakref_all
                memory > xtest_new_no_args
                memory > xtest_new_repr_complex
                memory > xtest_fail_with_bare_union
                memory > xtest_eq_1
                memory > xtest_init_subclass
                memory > xtest_copy_and_deepcopy
                memory > xtest_chain_repr
                memory > xtest_orig_bases
                memory > xtest_pickle
                memory > xtest_multiple_inheritance
                memory > xtest_type_erasure_special
                memory > xtest_parameterized_slots_dict
                memory > xtest_false_subclasses
                memory > xtest_multi_subscr_base
                memory > xtest_extended_generic_rules_repr
                memory > xtest_new_repr
                memory > xtest_multiple_inheritance_special
                memory > xtest_immutability_by_copy_and_pickle
                memory > xtest_generic_errors
                memory > xtest_copy_generic_instances
                memory > xtest_repr
                memory > xtest_fail_with_bare_generic
                memory > xtest_init
                memory > xtest_naive_runtime_checks
                memory > xtest_parameterized_slots
                memory > xtest_init_subclass_super_called
                memory > xtest_repr_2
                memory > xtest_new_with_args2
                memory > xtest_new_repr_bare
                memory > xtest_subscript_meta
                memory > xtest_type_erasure
                memory > xtest_extended_generic_rules_subclassing
                memory > xtest_eq_2
                memory > xtest_abc_registry_kept
                memory > xtest_multiple_bases
                memory > xtest_generic_hashes
                memory > xtest_nested
                memory > xtest_extended_generic_rules_eq
                memory > xtest_new_with_args
                memory > xtest_implicit_any
                memory > xtest_basics
                memory > xtest_errors
                memory > xtest_dict
                memory > xtest_generic_forward_ref
                memory > xtest_subscripted_generics_as_proxies
                memory > xtest_all_repr_eq_any
                memory > xtest_abc_bases
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xX
                        memory > xT
                        memory > xY
                        memory > xSM1
                        seq > @
                          seq
                            xX.write (((xunsupported)) ((xSimpleMapping)) ((xstr)) ((xAny)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xX).x__parameters__)) ((((xunsupported)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xX)) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xX)) ((xstr)) ((xstr)))
                            xY.write (((xunsupported)) ((xSimpleMapping)) ((xXK)) ((xstr)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xY).x__parameters__)) ((((xunsupported)) ((xXK)))))
                            (((xunsupported)) ((xY)) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xY)) ((xstr)) ((xstr)))
                            xSM1.write (((xunsupported)) ((xSimpleMapping)) ((xstr)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xSM1)) ((xSimpleMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xSM1)))) ((xSimpleMapping)))
                            xT.write (((xTypeVar)) ("T"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xList)) (((((xunsupported)) ((xlist)) ((xT))).or (xfloat)))).x__parameters__)) ((((xunsupported)) ((xT)))))
                    xtest_generic_errors.write
                      [xself]
                        memory > xC
                        memory > xMyGeneric
                        memory > xS
                        memory > xT
                        memory > xNewGeneric
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((((xunsupported)) ((xGeneric)) ((xT)))) ((xT)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((((xunsupported)) ((xGeneric)) ((xT)))) ((xS)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                                    unsupported
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xunsupported)))) ((((xunsupported)) ((xList)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xlist)) ((((xunsupported)) ((xList)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xNewGeneric.write
                                []
                                  seq > @
                                    unsupported
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xMyGeneric.write
                                []
                                  seq > @
                                    unsupported
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xMyGeneric.write
                                []
                                  seq > @
                                    unsupported
                    xtest_init.write
                      [xself]
                        memory > xT
                        memory > xS
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xGeneric)) ((xT)) ((xT)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xGeneric)) ((xT)) ((xS)) ((xT)))
                    xtest_init_subclass.write
                      [xself]
                        memory > xX
                        memory > xY
                        memory > xW
                        memory > xZ
                        seq > @
                          seq
                            xX.write
                              []
                                memory > x__init_subclass__
                                seq > @
                                  x__init_subclass__.write
                                    [xcls]
                                      seq > @
                                        (((xunsupported)))
                                          xbogusForceDataize.write ((((((xsuper))).x__init_subclass__)) ((((xunsupported)) ((xkwargs)))))
                                          (((xunsupported)) (((xcls).xattr)) (42))
                            xY.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xY).xattr)) (42))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              unsupported
                            (((xunsupported)) (((xX).xattr)) (1))
                            (((xunsupported)) (((xY).xattr)) (2))
                            xZ.write
                              []
                                seq > @
                            xW.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xY).xattr)) (2))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xZ).xattr)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xW).xattr)) (42))
                    xtest_repr.write
                      [xself]
                        seq > @
                    xtest_chain_repr.write
                      [xself]
                        memory > xC
                        memory > xZ
                        memory > xS
                        memory > xT
                        memory > xX
                        memory > xY
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xS.write (((xTypeVar)) ("'S'"))
                            xC.write
                              []
                                seq > @
                            xX.write (((xunsupported)) ((xC)) ((((xunsupported)) ((xTuple)) ((xS)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xX)) ((((xunsupported)) ((xC)) ((((xunsupported)) ((xTuple)) ((xS)) ((xT)))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xX)) ((((xunsupported)) ((xC)) ((((xunsupported)) ((xTuple)) ((xT)) ((xS)))))))
                            xY.write (((xunsupported)) ((xX)) ((xT)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xY)) ((((xunsupported)) ((xX)) ((xT)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xY)) ((((xunsupported)) ((xX)) ((xS)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xY)) ((((xunsupported)) ((xX)) ((xT)) ((xstr)))))
                            xZ.write (((xunsupported)) ((xY)) ((xstr)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xZ)) ((((xunsupported)) ((xY)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xZ)) ((((xunsupported)) ((xY)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xZ)) ((((xunsupported)) ((xY)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((((((xstr)) ((xZ))).xendswith)) ("'.C[typing.Tuple[str, int]]'"))))
                    xtest_new_repr.write
                      [xself]
                        memory > xT
                        memory > xU
                        memory > xS
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xU.write (((xunsupported)) ((xTypeVar)) ("'U'") (TRUE))
                            xS.write (((xTypeVar)) ("'S'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xList)))) ("'typing.List'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xList)) ((xT)))))) ("'typing.List[~T]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xList)) ((xU)))))) ("'typing.List[+U]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((((xunsupported)) ((((xunsupported)) ((xList)) ((xS)))) ((xT)))) ((xint)))))) ("'typing.List[int]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xList)) ((xint)))))) ("'typing.List[int]'"))
                    xtest_new_repr_complex.write
                      [xself]
                        memory > xT
                        memory > xTS
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xTS.write (((xTypeVar)) ("'TS'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((((xunsupported)) (((xtyping).xMapping)) ((xT)) ((xTS)))) ((xTS)) ((xT)))))) ("'typing.Mapping[~TS, ~T]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xTuple)) ((xT)) ((xTS)))))) ((xint)) ((xT)))))) ("'typing.List[typing.Tuple[int, ~T]]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xTuple)) ((xT)) ((xT)))))) ((((xunsupported)) ((xList)) ((xint)))))))) ("'typing.List[typing.Tuple[typing.List[int], typing.List[int]]]'"))
                    xtest_new_repr_bare.write
                      [xself]
                        memory > xT
                        memory > xC
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xGeneric)) ((xT)))))) ("'typing.Generic[~T]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) (((xtyping).xProtocol)) ((xT)))))) ("'typing.Protocol[~T]'"))
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write (((xrepr)) (((xC).x__mro__)))
                    xtest_dict.write
                      [xself]
                        memory > xC
                        memory > xc
                        memory > xB
                        memory > xb
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xB.write
                              []
                                seq > @
                            xb.write (((xB)))
                            (((xunsupported)) (((xb).xfoo)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xb).x__dict__)) ((((xunsupported)) ("'foo'") (42))))
                            xC.write
                              []
                                seq > @
                            xc.write (((xC)))
                            (((xunsupported)) (((xc).xbar)) ("'abc'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).x__dict__)) ((((xunsupported)) ("'bar'") ("'abc'"))))
                    xtest_subscripted_generics_as_proxies.write
                      [xself]
                        memory > xT
                        memory > xC
                        memory > xD
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xC.write
                              []
                                memory > xx
                                seq > @
                                  xx.write "'def'"
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xC)) ((xint))).xx)) ("'def'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xC)) ((((xunsupported)) ((xC)) ((xint))))).xx)) ("'def'"))
                            (((xunsupported)) (((((xunsupported)) ((xC)) ((((xunsupported)) ((xC)) ((xint))))).xx)) ("'changed'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).xx)) ("'changed'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xC)) ((xstr))).xx)) ("'changed'"))
                            (((xunsupported)) (((((xunsupported)) ((xC)) ((((xunsupported)) ((xList)) ((xstr))))).xz)) ("'new'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).xz)) ("'new'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xC)) ((((xunsupported)) ((xTuple)) ((xint))))).xz)) ("'new'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xC))).xx)) ("'changed'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xC)) ((((xunsupported)) ((xTuple)) ((xstr))))))).xz)) ("'new'"))
                            xD.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xD)) ((xint))).xx)) ("'changed'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).xz)) ("'new'"))
                            (((xunsupported)) (((xD).xz)) ("'from derived z'"))
                            (((xunsupported)) (((((xunsupported)) ((xD)) ((xint))).xx)) ("'from derived x'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).xx)) ("'changed'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xC)) ((xint))).xz)) ("'new'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).xx)) ("'from derived x'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xD)) ((xstr))).xz)) ("'from derived z'"))
                    xtest_abc_registry_kept.write
                      [xself]
                        memory > xT
                        memory > xC
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xC).xregister)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (1) ((xC)))
                            (((xunsupported)) ((xC)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (1) ((xC)))
                            xbogusForceDataize.write ((((xC).x_abc_registry_clear)))
                            xbogusForceDataize.write ((((xC).x_abc_caches_clear)))
                    xtest_false_subclasses.write
                      [xself]
                        memory > xMyMapping
                        seq > @
                          seq
                            xMyMapping.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xunsupported)))) ((xMyMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xdict)) ((xMyMapping)))
                    xtest_abc_bases.write
                      [xself]
                        memory > xMM
                        seq > @
                          seq
                            xMM.write
                              []
                                memory > x__iter__
                                memory > x__getitem__
                                memory > x__delitem__
                                memory > x__setitem__
                                memory > x__len__
                                seq > @
                                  seq
                                    x__getitem__.write
                                      [xself xk]
                                        seq > @
                                          (((xunsupported)) ("None: is there a None literal in the EO language?"))
                                    x__setitem__.write
                                      [xself xk xv]
                                        seq > @
                                    x__delitem__.write
                                      [xself xk]
                                        seq > @
                                    x__iter__.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) ((((xiter)) ((((xunsupported)))))))
                                    x__len__.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) (0))
                            xbogusForceDataize.write ((((((xMM))).xupdate)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xMM)))) ((((xcollections).xabc).xMutableMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xMM)))) ((xMutableMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xMM)))) ((xList)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xunsupported)))) ((xMM)))
                    xtest_multiple_bases.write
                      [xself]
                        memory > xMM2
                        memory > xMM1
                        seq > @
                          seq
                            xMM1.write
                              []
                                seq > @
                            xMM2.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xMM2).x__bases__)) ((((xunsupported)) ((((xcollections).xabc).xMutableMapping)) ((xGeneric)))))
                    xtest_orig_bases.write
                      [xself]
                        memory > xT
                        memory > xC
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__orig_bases__)) ((((xunsupported)) ((((xunsupported)) (((xtyping).xDict)) ((xstr)) ((xT)))))))
                    xtest_naive_runtime_checks.write
                      [xself]
                        memory > xnaive_generic_check
                        memory > xnaive_dict_check
                        memory > xNode
                        memory > xC
                        seq > @
                          seq
                            xnaive_dict_check.write
                              [xobj xtp]
                                seq > @
                                  seq
                                    ((((xlen)) (((xtp).x__parameters__))).greater 0).if
                                      (((xunsupported)) ((xNotImplementedError)))
                                    ((xtp).x__args__).if
                                      (((xunsupported)) ((((xunsupported)) ((xKT)) ((xVT)))) (((xtp).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertTrue)) ((((xnaive_dict_check)) ((((xunsupported)) ("'x'") (1))) ((((xunsupported)) (((xtyping).xDict)) ((xstr)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xnaive_dict_check)) ((((xunsupported)) (1) ("'x'"))) ((((xunsupported)) (((xtyping).xDict)) ((xstr)) ((xint)))))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xNotImplementedError)))))
                              xbogusForceDataize.write (((xnaive_dict_check)) ((((xunsupported)) (1) ("'x'"))) ((((xunsupported)) (((xtyping).xDict)) ((xstr)) ((xT)))))
                            xnaive_generic_check.write
                              [xobj xtp]
                                seq > @
                                  seq
                                    ((((xhasattr)) ((xobj)) ("'__orig_class__'")).not).if
                                      (((xunsupported)) ((xNotImplementedError)))
                                    (((xunsupported)) ((((xobj).x__orig_class__).eq (xtp))))
                            xNode.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertTrue)) ((((xnaive_generic_check)) ((((((xunsupported)) ((xNode)) ((xint)))))) ((((xunsupported)) ((xNode)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xnaive_generic_check)) ((((((xunsupported)) ((xNode)) ((xstr)))))) ((((xunsupported)) ((xNode)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xnaive_generic_check)) ((((((xunsupported)) ((xNode)) ((xstr)))))) ((xList)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xNotImplementedError)))))
                              xbogusForceDataize.write (((xnaive_generic_check)) ((((xunsupported)) (1) (2) (3))) ((((xunsupported)) ((xNode)) ((xint)))))
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertTrue)) ((((xnaive_list_base_check)) ((((xunsupported)) (1) (2) (3))) ((xC)))))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xnaive_list_base_check)) ((((xunsupported)) ("'a'") ("'b'"))) ((xC)))))
                    xtest_multi_subscr_base.write
                      [xself]
                        memory > xD
                        memory > xT
                        memory > xV
                        memory > xC
                        memory > xU
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xU.write (((xTypeVar)) ("'U'"))
                            xV.write (((xTypeVar)) ("'V'"))
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xD.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__parameters__)) ((((xunsupported)) ((xV)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__parameters__)) ((((xunsupported)) ((xV)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xC)) ((xint))).x__parameters__)) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xD)) ((xint))).x__parameters__)) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xC)) ((xint))).x__args__)) ((((xunsupported)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xD)) ((xint))).x__args__)) ((((xunsupported)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__bases__)) ((((xunsupported)) ((xlist)) ((xGeneric)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__bases__)) ((((xunsupported)) ((xC)) ((xlist)) ((xGeneric)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__orig_bases__)) ((((xunsupported)) ((((xunsupported)) ((((xunsupported)) ((((xunsupported)) ((xList)) ((xT)))) ((xU)))) ((xV)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__orig_bases__)) ((((xunsupported)) ((xC)) ((((xunsupported)) ((((xunsupported)) ((((xunsupported)) ((xList)) ((xT)))) ((xU)))) ((xV)))))))
                    xtest_subscript_meta.write
                      [xself]
                        memory > xT
                        memory > xMeta
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xMeta.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xType)) ((xMeta)))) ((((xunsupported)) ((xType)) ((xMeta)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xint)))) ((xMeta)))) ((((xunsupported)) ((xUnion)) ((xMeta)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xCallable)) ("") ((xMeta))).x__args__)) ((((xunsupported)) ((xEllipsis)) ((xMeta)))))
                    xtest_generic_hashes.write
                      [xself]
                        memory > xA
                        memory > xB
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                                  unsupported
                            xB.write
                              []
                                memory > xA
                                seq > @
                                  xA.write
                                    []
                                      seq > @
                                        unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xA)) ((xA)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) (((xmod_generics_cache).xA)) ((xstr)))) ((((xunsupported)) (((xmod_generics_cache).xA)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xB).xA)) (((xB).xA)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xmod_generics_cache).xB).xA)) ((((xunsupported)) (((xB).xA)) ((xstr)))))) ((((xunsupported)) ((((xmod_generics_cache).xB).xA)) ((((xunsupported)) (((xB).xA)) ((xstr)))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xA)) (((xB).xA)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xA)) (((xmod_generics_cache).xA)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xA)) ((((xmod_generics_cache).xB).xA)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) (((xB).xA)) (((xmod_generics_cache).xA)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) (((xB).xA)) ((((xmod_generics_cache).xB).xA)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xA)) ((xstr)))) ((((xunsupported)) (((xB).xA)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xA)) ((((xunsupported)) ((xList)) ((xAny)))))) ((((xunsupported)) (((xB).xA)) ((((xunsupported)) ((xList)) ((xAny)))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xA)) ((xstr)))) ((((xunsupported)) (((xmod_generics_cache).xA)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xA)) ((xstr)))) ((((xunsupported)) ((((xmod_generics_cache).xB).xA)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) (((xB).xA)) ((xint)))) ((((xunsupported)) (((xmod_generics_cache).xA)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) (((xB).xA)) ((((xunsupported)) ((xList)) ((xAny)))))) ((((xunsupported)) ((((xmod_generics_cache).xB).xA)) ((((xunsupported)) ((xList)) ((xAny)))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) ((xA)) ((xstr)))))) ((((xunsupported)) ((xTuple)) ((((xunsupported)) (((xB).xA)) ((xstr)))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) ((xA)) ((((xunsupported)) ((xList)) ((xAny)))))))) ((((xunsupported)) ((xTuple)) ((((xunsupported)) (((xB).xA)) ((((xunsupported)) ((xList)) ((xAny)))))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xA)) ((xstr)))))) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) (((xmod_generics_cache).xA)) ((xstr)))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xUnion)) ((((xunsupported)) ((xA)) ((xstr)))) ((((xunsupported)) ((xA)) ((xstr)))))) ((((xunsupported)) ((xUnion)) ((((xunsupported)) ((xA)) ((xstr)))) ((((xunsupported)) (((xmod_generics_cache).xA)) ((xstr)))))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) (((xtyping).xFrozenSet)) ((((xunsupported)) ((xA)) ((xstr)))))) ((((xunsupported)) (((xtyping).xFrozenSet)) ((((xunsupported)) ((((xmod_generics_cache).xB).xA)) ((xstr)))))))
                            ((((xunsupported)) (((xsys).xversion_info)) ((((xunsupported)) (2)))).greater (((xunsupported)) (3) (2))).if
                              seq
                                xbogusForceDataize.write ((((xself).xassertTrue)) (((((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) ((xA)) ((xstr))))))).xendswith)) ("'<locals>.A[str]]'"))))
                                xbogusForceDataize.write ((((xself).xassertTrue)) (((((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) (((xB).xA)) ((xstr))))))).xendswith)) ("'<locals>.B.A[str]]'"))))
                                xbogusForceDataize.write ((((xself).xassertTrue)) (((((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) (((xmod_generics_cache).xA)) ((xstr))))))).xendswith)) ("'mod_generics_cache.A[str]]'"))))
                                xbogusForceDataize.write ((((xself).xassertTrue)) (((((((xrepr)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) ((((xmod_generics_cache).xB).xA)) ((xstr))))))).xendswith)) ("'mod_generics_cache.B.A[str]]'"))))
                    xtest_extended_generic_rules_eq.write
                      [xself]
                        memory > xT
                        memory > xU
                        memory > xBase
                        memory > xDerived
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xU.write (((xTypeVar)) ("'U'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xTuple)) ((xT)) ((xT)))) ((xint)))) ((((xunsupported)) ((xTuple)) ((xint)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) (((xtyping).xIterable)) ((((xunsupported)) ((xTuple)) ((xT)) ((xT)))))) ((xT)))) ((((xunsupported)) (((xtyping).xIterable)) ((((xunsupported)) ((xTuple)) ((xT)) ((xT)))))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((((xunsupported)) ((xTuple)) ((xT)) ((xint)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xint)))) ((xint)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xU)))) ((xint)) ((((xunsupported)) ((xUnion)) ((xint)) ((xstr)))))) ((((xunsupported)) ((xUnion)) ((xint)) ((xstr)))))
                            xBase.write
                              []
                                seq > @
                                  unsupported
                            xDerived.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xBase)))) ((((xunsupported)) ((xUnion)) ((xBase)) ((xDerived)))))) ((((xunsupported)) ((xUnion)) ((xBase)) ((xDerived)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xint)))) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xT)))) ((xT)))) ((xKT)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xKT)))) ((xKT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xCallable)) ("") ((((xunsupported)) ((xList)) ((xT)))))) ((xint)))) ((((xunsupported)) ((xCallable)) ("") ((((xunsupported)) ((xList)) ((xint)))))))
                    xtest_extended_generic_rules_repr.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xrepr)) ((((xunsupported)) ((xUnion)) ((xTuple)) ((xCallable))))).xreplace)) ("'typing.'") ("''"))) ("'Union[Tuple, Callable]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xrepr)) ((((xunsupported)) ((xUnion)) ((xTuple)) ((((xunsupported)) ((xTuple)) ((xint))))))).xreplace)) ("'typing.'") ("''"))) ("'Union[Tuple, Tuple[int]]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xrepr)) ((((xunsupported)) ((((xunsupported)) ((xCallable)) ("") ((((xunsupported)) ((xOptional)) ((xT)))))) ((xint))))).xreplace)) ("'typing.'") ("''"))) ("'Callable[..., Optional[int]]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xrepr)) ((((xunsupported)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((((xunsupported)) ((xList)) ((xT)))))) ((xint))))).xreplace)) ("'typing.'") ("''"))) ("'Callable[[], List[int]]'"))
                    xtest_generic_forward_ref.write
                      [xself]
                        memory > xbarfoo2
                        memory > xfoobar2
                        memory > xT
                        memory > xbarfoo
                        memory > xfoobar
                        memory > xCC
                        memory > xAT
                        memory > xCT
                        memory > xfoobar3
                        seq > @
                          seq
                            xfoobar.write
                              [xx]
                                seq > @
                                  unsupported
                            xfoobar2.write
                              [xx]
                                seq > @
                                  unsupported
                            xfoobar3.write
                              [xx]
                                seq > @
                                  unsupported
                            xCC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoobar)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'x'") ((((xunsupported)) ((xList)) ((((xunsupported)) ((xList)) ((xCC)))))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoobar2)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'x'") ((((xunsupported)) ((xlist)) ((((xunsupported)) ((xlist)) ((xCC)))))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoobar3)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'x'") (((((xunsupported)) ((xlist)) (((xCC).or (xint)))).or (xint))))))
                            xT.write (((xTypeVar)) ("'T'"))
                            xAT.write (((xunsupported)) ((xTuple)) ((xT)) (""))
                            xbarfoo.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xunsupported)) ((((xget_type_hints)) ((xbarfoo)) ((((xglobals)))) ((((xlocals)))))) ("'x'"))) ((xAT)))
                            xCT.write (((xunsupported)) ((xCallable)) ("") ((((xunsupported)) ((xList)) ((xT)))))
                            xbarfoo2.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xunsupported)) ((((xget_type_hints)) ((xbarfoo2)) ((((xglobals)))) ((((xlocals)))))) ("'x'"))) ((xCT)))
                    xtest_extended_generic_rules_subclassing.write
                      [xself]
                        memory > xT1
                        memory > xT2
                        memory > xC1
                        seq > @
                          seq
                            xT1.write
                              []
                                seq > @
                                  unsupported
                            xT2.write
                              []
                                seq > @
                                  unsupported
                            xC1.write
                              []
                                memory > x__contains__
                                seq > @
                                  x__contains__.write
                                    [xself xitem]
                                      seq > @
                                        (((xunsupported)) (FALSE))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xT1).x__parameters__)) ((((xunsupported)) ((xT)) ((xKT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xT1)) ((xint)) ((xstr))).x__args__)) ((((xunsupported)) ((xint)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xT1)) ((xint)) ((xT))).x__origin__)) ((xT1)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xT2).x__parameters__)) ((((xunsupported)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) (((((((xrepr)) ((((xunsupported)) ((xC1)) ((xint))))).xsplit)) ("'.'"))) ((1.neg)))) ("'C1[int]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC1).x__parameters__)) ((((xunsupported)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xC1)))) ((((xcollections).xabc).xContainer)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC1)) ((((xcollections).xabc).xContainer)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xT1)))) ((xtuple)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xT2)) ((xtuple)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xunsupported)) ((xTuple)) ((xint)) (""))) (((xtyping).xSequence)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xunsupported)) ((xTuple)) ((xint)) (""))) (((xtyping).xIterable)))
                    xtest_fail_with_bare_union.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xList)) ((xUnion)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTuple)) ((xOptional)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xClassVar)) ((xClassVar)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xList)) ((((xunsupported)) ((xClassVar)) ((xint)))))
                    xtest_fail_with_bare_generic.write
                      [xself]
                        memory > xT
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xList)) ((xGeneric)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTuple)) ((((xunsupported)) ((xGeneric)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xList)) (((xtyping).xProtocol)))
                    xtest_type_erasure_special.write
                      [xself]
                        memory > xMyTup
                        memory > xMyChain
                        memory > xT
                        memory > xMyDict
                        memory > xMyDef
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xbogusForceDataize.write ((((xself).xclear_caches)))
                            xMyTup.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((((xunsupported)) ((xMyTup)) ((xint))))).x__class__)) ((xMyTup)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xMyTup)) ((xint))))).x__orig_class__)) ((((xunsupported)) ((xMyTup)) ((xint)))))
                            xMyDict.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((((xunsupported)) ((xMyDict)) ((xint))))).x__class__)) ((xMyDict)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xMyDict)) ((xint))))).x__orig_class__)) ((((xunsupported)) ((xMyDict)) ((xint)))))
                            xMyDef.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) (((((((xunsupported)) ((xMyDef)) ((xint))))).x__class__)) ((xMyDef)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xMyDef)) ((xint))))).x__orig_class__)) ((((xunsupported)) ((xMyDef)) ((xint)))))
                            (((xsys).xversion_info).geq (((xunsupported)) (3) (3))).if
                              seq
                                xMyChain.write
                                  []
                                    seq > @
                                      unsupported
                                xbogusForceDataize.write ((((xself).xassertIs)) (((((((xunsupported)) ((xMyChain)) ((xint))))).x__class__)) ((xMyChain)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xunsupported)) ((xMyChain)) ((xint))))).x__orig_class__)) ((((xunsupported)) ((xMyChain)) ((xint)))))
                    xtest_all_repr_eq_any.write
                      [xself]
                        memory > xobjs
                        seq > @
                          seq
                            xobjs.write (((xunsupported)) ((((xgetattr)) ((xtyping)) ((xel)))) ((xel)) (((xtyping).x__all__)))
                            (((xunsupported)) ((xobj)) ((xobjs)))
                              seq
                                xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xrepr)) ((xobj)))) ("''"))
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((xobj)) ((xobj)))
                                ((((xgetattr)) ((xobj)) ("'__parameters__'") ("None: is there a None literal in the EO language?")).if ((((xlen)) (((xobj).x__parameters__))).eq 1) FALSE).if
                                  xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xobj)) ((xAny))).x__args__)) ((((xunsupported)) ((xAny)))))
                                (((xisinstance)) ((xobj)) ((xtype))).if
                                  (((xunsupported)) ((xbase)) (((xobj).x__mro__)))
                                    seq
                                      xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xrepr)) ((xbase)))) ("''"))
                                      xbogusForceDataize.write ((((xself).xassertEqual)) ((xbase)) ((xbase)))
                    xtest_pickle.write
                      [xself]
                        memory > xc
                        memory > xz
                        memory > xB
                        memory > xT
                        memory > xmore_samples
                        memory > xx
                        memory > xC
                        memory > xsamples
                        seq > @
                          seq
                            (((xunsupported)))
                            xT.write (((xTypeVar)) ("'T'"))
                            xB.write
                              []
                                seq > @
                            xC.write
                              []
                                seq > @
                            xc.write (((xC)))
                            (((xunsupported)) (((xc).xfoo)) (42))
                            (((xunsupported)) (((xc).xbar)) ("'abc'"))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xz.write ((((xpickle).xdumps)) ((xc)) ((xproto)))
                                xx.write ((((xpickle).xloads)) ((xz)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xfoo)) (42))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xbar)) ("'abc'"))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).x__dict__)) ((((xunsupported)) ("'foo'") (42) ("'bar'") ("'abc'"))))
                            xsamples.write (((xunsupported)) ((xAny)) ((xUnion)) ((xTuple)) ((xCallable)) ((xClassVar)) ((((xunsupported)) ((xUnion)) ((xint)) ((xstr)))) ((((xunsupported)) ((xClassVar)) ((xList)))) ((((xunsupported)) ((xTuple)) ((xint)) (""))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xstr)))) ((xbytes)))) (((xtyping).xDefaultDict)) ((((xunsupported)) (((xtyping).xFrozenSet)) ((xint)))))
                            (((xunsupported)) ((xs)) ((xsamples)))
                              (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                seq
                                  xz.write ((((xpickle).xdumps)) ((xs)) ((xproto)))
                                  xx.write ((((xpickle).xloads)) ((xz)))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xx)))
                            xmore_samples.write (((xunsupported)) ((xList)) (((xtyping).xIterable)) (((xtyping).xType)) ((((xunsupported)) ((xList)) ((xint)))) ((((xunsupported)) (((xtyping).xType)) (((xtyping).xMapping)))) ((((xunsupported)) (((xtyping).xAbstractSet)) ((((xunsupported)) ((xTuple)) ((xint)) ((xstr)))))))
                            (((xunsupported)) ((xs)) ((xmore_samples)))
                              (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                seq
                                  xz.write ((((xpickle).xdumps)) ((xs)) ((xproto)))
                                  xx.write ((((xpickle).xloads)) ((xz)))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) ((xs)) ((xx)))
                    xtest_copy_and_deepcopy.write
                      [xself]
                        memory > xT
                        memory > xNode
                        memory > xthings
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xNode.write
                              []
                                seq > @
                                  unsupported
                            xthings.write (((xunsupported)) ((((xunsupported)) ((xUnion)) ((xT)) ((xint)))) ((((xunsupported)) ((xTuple)) ((xT)) ((xint)))) ((((xunsupported)) ((xCallable)) ("") ((xT)))) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xint)))) ((((xunsupported)) ((xTuple)) ((xAny)) ((xAny)))) ((((xunsupported)) ((xNode)) ((xT)))) ((((xunsupported)) ((xNode)) ((xint)))) ((((xunsupported)) ((xNode)) ((xAny)))) ((((xunsupported)) (((xtyping).xIterable)) ((xT)))) ((((xunsupported)) (((xtyping).xIterable)) ((xAny)))) ((((xunsupported)) (((xtyping).xIterable)) ((xint)))) ((((xunsupported)) (((xtyping).xDict)) ((xint)) ((xstr)))) ((((xunsupported)) (((xtyping).xDict)) ((xT)) ((xAny)))) ((((xunsupported)) ((xClassVar)) ((xint)))) ((((xunsupported)) ((xClassVar)) ((((xunsupported)) ((xList)) ((xT)))))) ((((xunsupported)) ((xTuple)) ("'T'") ("'T'"))) ((((xunsupported)) ((xUnion)) ("'T'") ((xint)))) ((((xunsupported)) ((xList)) ("'T'"))) ((((xunsupported)) (((xtyping).xMapping)) ("'T'") ((xint)))))
                            (((xunsupported)) ((xt)) (((xthings).add (((xunsupported)) ((xAny))))))
                              seq
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((xt)) ((((xcopy)) ((xt)))))
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((xt)) ((((xdeepcopy)) ((xt)))))
                    xtest_immutability_by_copy_and_pickle.write
                      [xself]
                        memory > xTLB
                        memory > xTL
                        memory > xTLV
                        memory > xTPB
                        memory > xTP
                        memory > xTPV
                        seq > @
                          seq
                            (((xunsupported)))
                            xTP.write (((xTypeVar)) ("'TP'"))
                            xTPB.write (((xunsupported)) ((xTypeVar)) ("'TPB'") ((xint)))
                            xTPV.write (((xTypeVar)) ("'TPV'") ((xbytes)) ((xstr)))
                            (((xunsupported)) ((xX)) ((((xunsupported)) ((xTP)) ((xTPB)) ((xTPV)) ((xList)) (((xtyping).xMapping)) ((xClassVar)) (((xtyping).xIterable)) ((xUnion)) ((xAny)) ((xTuple)) ((xCallable)))))
                              seq
                                xbogusForceDataize.write ((((xself).xassertIs)) ((((xcopy)) ((xX)))) ((xX)))
                                xbogusForceDataize.write ((((xself).xassertIs)) ((((xdeepcopy)) ((xX)))) ((xX)))
                                xbogusForceDataize.write ((((xself).xassertIs)) (((((xpickle).xloads)) (((((xpickle).xdumps)) ((xX)))))) ((xX)))
                            xTL.write (((xTypeVar)) ("'TL'"))
                            xTLB.write (((xunsupported)) ((xTypeVar)) ("'TLB'") ((xint)))
                            xTLV.write (((xTypeVar)) ("'TLV'") ((xbytes)) ((xstr)))
                            (((xunsupported)) ((xX)) ((((xunsupported)) ((xTL)) ((xTLB)) ((xTLV)))))
                              seq
                                xbogusForceDataize.write ((((xself).xassertIs)) ((((xcopy)) ((xX)))) ((xX)))
                                xbogusForceDataize.write ((((xself).xassertIs)) ((((xdeepcopy)) ((xX)))) ((xX)))
                    xtest_copy_generic_instances.write
                      [xself]
                        memory > xT
                        memory > xc
                        memory > xC
                        memory > xci
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xC.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself xattr]
                                      seq > @
                                        (((xunsupported)) (((xself).xattr)) ((xattr)))
                            xc.write (((xC)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xcopy)) ((xc))).xattr)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xdeepcopy)) ((xc))).xattr)) (42))
                            xbogusForceDataize.write ((((xself).xassertIsNot)) ((((xcopy)) ((xc)))) ((xc)))
                            xbogusForceDataize.write ((((xself).xassertIsNot)) ((((xdeepcopy)) ((xc)))) ((xc)))
                            (((xunsupported)) (((xc).xattr)) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xcopy)) ((xc))).xattr)) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xdeepcopy)) ((xc))).xattr)) (1))
                            xci.write (((((xunsupported)) ((xC)) ((xint)))) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xcopy)) ((xci))).xattr)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xdeepcopy)) ((xci))).xattr)) (42))
                            xbogusForceDataize.write ((((xself).xassertIsNot)) ((((xcopy)) ((xci)))) ((xci)))
                            xbogusForceDataize.write ((((xself).xassertIsNot)) ((((xdeepcopy)) ((xci)))) ((xci)))
                            (((xunsupported)) (((xci).xattr)) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xcopy)) ((xci))).xattr)) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xdeepcopy)) ((xci))).xattr)) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xci).x__orig_class__)) ((((xunsupported)) ((xC)) ((xint)))))
                    xtest_weakref_all.write
                      [xself]
                        memory > xT
                        memory > xthings
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xthings.write (((xunsupported)) ((xAny)) ((((xunsupported)) ((xUnion)) ((xT)) ((xint)))) ((((xunsupported)) ((xCallable)) ("") ((xT)))) ((((xunsupported)) ((xTuple)) ((xAny)) ((xAny)))) ((((xunsupported)) ((xOptional)) ((((xunsupported)) ((xList)) ((xint)))))) ((((xunsupported)) (((xtyping).xMapping)) ((xint)) ((xstr)))) ((((xunsupported)) (((xtyping).xMatch)) ((xbytes)))) ((((xunsupported)) (((xtyping).xIterable)) ("'whatever'"))))
                            (((xunsupported)) ((xt)) ((xthings)))
                              xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xweakref).xref)) ((xt)))))) ((xt)))
                    xtest_parameterized_slots.write
                      [xself]
                        memory > xC
                        memory > xc
                        memory > xT
                        memory > xc_int
                        memory > xfoo
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xC.write
                              []
                                memory > x__slots__
                                seq > @
                                  x__slots__.write (((xunsupported)) ("'potato'"))
                            xc.write (((xC)))
                            xc_int.write (((((xunsupported)) ((xC)) ((xint)))))
                            (((xunsupported)) (((xc).xpotato)) (0))
                            (((xunsupported)) (((xc_int).xpotato)) (0))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              (((xunsupported)) (((xc).xtomato)) (0))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              (((xunsupported)) (((xc_int).xtomato)) (0))
                            xfoo.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ("'x'"))) ((((xunsupported)) ((xC)) ((xC)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcopy)) ((((xunsupported)) ((xC)) ((xint)))))) ((((xdeepcopy)) ((((xunsupported)) ((xC)) ((xint)))))))
                    xtest_parameterized_slots_dict.write
                      [xself]
                        memory > xT
                        memory > xd_int
                        memory > xD
                        memory > xd
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xD.write
                              []
                                memory > x__slots__
                                seq > @
                                  x__slots__.write (((xunsupported)) ("'banana'") (42))
                            xd.write (((xD)))
                            xd_int.write (((((xunsupported)) ((xD)) ((xint)))))
                            (((xunsupported)) (((xd).xbanana)) ("'yes'"))
                            (((xunsupported)) (((xd_int).xbanana)) ("'yes'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              (((xunsupported)) (((xd).xfoobar)) ("'no'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              (((xunsupported)) (((xd_int).xfoobar)) ("'no'"))
                    xtest_errors.write
                      [xself]
                        memory > xB
                        memory > xC
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            seq
                              xB.write (((xunsupported)) ((xSimpleMapping)) ((xXK)) ((xAny)))
                              xC.write
                                []
                                  seq > @
                    xtest_repr_2.write
                      [xself]
                        memory > xX
                        memory > xY
                        memory > xC
                        seq > @
                          seq
                            xC.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__qualname__)) ("'GenericTests.test_repr_2.<locals>.C'"))
                            xX.write (((xunsupported)) ((xC)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xX).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) (((((((xrepr)) ((xX))).xsplit)) ("'.'"))) ((1.neg)))) ("'C[int]'"))
                            xY.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xY).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xY).x__qualname__)) ("'GenericTests.test_repr_2.<locals>.Y'"))
                    xtest_eq_1.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xGeneric)) ((xGeneric)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xGeneric)) ((xT)))) ((((xunsupported)) ((xGeneric)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xGeneric)) ((xKT)))) ((((xunsupported)) ((xGeneric)) ((xVT)))))
                    xtest_eq_2.write
                      [xself]
                        memory > xA
                        memory > xB
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                            xB.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xA)) ((xA)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xA)) ((xB)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xA)) ((xT)))) ((((xunsupported)) ((xA)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xA)) ((xT)))) ((((xunsupported)) ((xB)) ((xT)))))
                    xtest_multiple_inheritance.write
                      [xself]
                        memory > xA
                        memory > xB
                        memory > xC
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                            xB.write
                              []
                                seq > @
                            xC.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__parameters__)) ((((xunsupported)) ((xVT)) ((xT)) ((xKT)))))
                    xtest_multiple_inheritance_special.write
                      [xself]
                        memory > xB
                        memory > xC
                        memory > xS
                        seq > @
                          seq
                            xS.write (((xTypeVar)) ("'S'"))
                            xB.write
                              []
                                seq > @
                                  unsupported
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).x__mro__)) ((((xunsupported)) ((xC)) ((xlist)) ((xB)) ((xGeneric)) ((xobject)))))
                    xtest_init_subclass_super_called.write
                      [xself]
                        memory > xFinalException
                        memory > xSubclass
                        memory > xTest
                        memory > xFinal
                        seq > @
                          seq
                            xFinalException.write
                              []
                                seq > @
                            xFinal.write
                              []
                                memory > x__init_subclass__
                                seq > @
                                  x__init_subclass__.write
                                    [xcls]
                                      seq > @
                                        (((xunsupported)))
                                          (((xunsupported)) ((xbase)) (((xcls).x__bases__)))
                                            ((((xunsupported)) ((xbase)) ((xFinal))).if (((xissubclass)) ((xbase)) ((xFinal))) FALSE).if
                                              (((xunsupported)) ((((xFinalException)) ((xbase)))))
                                          xbogusForceDataize.write ((((((xsuper))).x__init_subclass__)) ((((xunsupported)) ((xkwargs)))))
                            xTest.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xFinalException)))))
                              xSubclass.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xFinalException)))))
                              xSubclass.write
                                []
                                  seq > @
                    xtest_nested.write
                      [xself]
                        memory > xVisitor
                        memory > xV
                        memory > xa
                        memory > xG
                        memory > xIntListVisitor
                        seq > @
                          seq
                            xG.write (xGeneric)
                            xVisitor.write
                              []
                                memory > xset
                                memory > xa
                                memory > xvisit
                                memory > xget
                                seq > @
                                  seq
                                    xa.write "None: is there a None literal in the EO language?"
                                    xset.write
                                      [xself xa]
                                        seq > @
                                          (((xunsupported)) (((xself).xa)) ((xa)))
                                    xget.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) (((xself).xa)))
                                    xvisit.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) (((xself).xa)))
                            xV.write (((xunsupported)) ((xVisitor)) ((((xunsupported)) (((xtyping).xList)) ((xint)))))
                            xIntListVisitor.write
                              []
                                memory > xappend
                                seq > @
                                  xappend.write
                                    [xself xx]
                                      seq > @
                                        xbogusForceDataize.write (((((xself).xa).xappend)) ((xx)))
                            xa.write (((xIntListVisitor)))
                            xbogusForceDataize.write ((((xa).xset)) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xa).xappend)) (1))
                            xbogusForceDataize.write ((((xa).xappend)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xa).xget)))) ((((xunsupported)) (1) (42))))
                    xtest_type_erasure.write
                      [xself]
                        memory > xT
                        memory > xNode
                        memory > xfoo
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xNode.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself xlabel xleft xright]
                                      seq > @
                                        (((xunsupported)))
                                          (((xunsupported)) (((xself).xlabel)) ((xlabel)))
                                          (((xunsupported)) (((xself).xleft)) ((xleft)))
                                          (((xunsupported)) (((xself).xright)) ((xright)))
                            xfoo.write
                              [xx]
                                memory > xa
                                memory > xb
                                memory > xc
                                seq > @
                                  seq
                                    xa.write (((xNode)) ((xx)))
                                    xb.write (((((xunsupported)) ((xNode)) ((xT)))) ((xx)))
                                    xc.write (((((xunsupported)) ((xNode)) ((xAny)))) ((xx)))
                                    xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xa)))) ((xNode)))
                                    xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xb)))) ((xNode)))
                                    xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xc)))) ((xNode)))
                                    xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).xlabel)) ((xx)))
                                    xbogusForceDataize.write ((((xself).xassertEqual)) (((xb).xlabel)) ((xx)))
                                    xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).xlabel)) ((xx)))
                            xbogusForceDataize.write (((xfoo)) (42))
                    xtest_implicit_any.write
                      [xself]
                        memory > xT
                        memory > xC
                        memory > xD
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xC.write
                              []
                                seq > @
                            xD.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__parameters__)) ((((xunsupported)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xException)))))
                              (((xunsupported)) ((xD)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xException)))))
                              (((xunsupported)) ((xD)) ((xAny)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xException)))))
                              (((xunsupported)) ((xD)) ((xT)))
                    xtest_new_with_args.write
                      [xself]
                        memory > xA
                        memory > xB
                        memory > xC
                        memory > xc
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                            xB.write
                              []
                                memory > x__new__
                                seq > @
                                  x__new__.write
                                    [xcls xarg]
                                      memory > xobj
                                      seq > @
                                        seq
                                          xobj.write ((((((xsuper))).x__new__)) ((xcls)))
                                          (((xunsupported)) (((xobj).xarg)) ((xarg)))
                                          (((xunsupported)) ((xobj)))
                            xC.write
                              []
                                seq > @
                            xc.write (((xC)) ("'foo'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).xarg)) ("'foo'"))
                    xtest_new_with_args2.write
                      [xself]
                        memory > xA
                        memory > xC
                        memory > xc
                        seq > @
                          seq
                            xA.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself xarg]
                                      seq > @
                                        seq
                                          (((xunsupported)) (((xself).xfrom_a)) ((xarg)))
                                          xbogusForceDataize.write ((((((xsuper))).x__init__)))
                            xC.write
                              []
                                memory > x__init__
                                seq > @
                                  x__init__.write
                                    [xself xarg]
                                      seq > @
                                        seq
                                          (((xunsupported)) (((xself).xfrom_c)) ((xarg)))
                                          xbogusForceDataize.write ((((((xsuper))).x__init__)) ((xarg)))
                            xc.write (((xC)) ("'foo'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).xfrom_a)) ("'foo'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).xfrom_c)) ("'foo'"))
                    xtest_new_no_args.write
                      [xself]
                        memory > xA
                        memory > xB
                        memory > xC
                        memory > xc
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xA)) ("'foo'"))
                            xB.write
                              []
                                memory > x__new__
                                seq > @
                                  x__new__.write
                                    [xcls]
                                      memory > xobj
                                      seq > @
                                        seq
                                          xobj.write ((((((xsuper))).x__new__)) ((xcls)))
                                          (((xunsupported)) (((xobj).xfrom_b)) ("'b'"))
                                          (((xunsupported)) ((xobj)))
                            xC.write
                              []
                                memory > x__new__
                                memory > x__init__
                                seq > @
                                  seq
                                    x__init__.write
                                      [xself xarg]
                                        seq > @
                                          (((xunsupported)) (((xself).xarg)) ((xarg)))
                                    x__new__.write
                                      [xcls xarg]
                                        memory > xobj
                                        seq > @
                                          seq
                                            xobj.write ((((((xsuper))).x__new__)) ((xcls)))
                                            (((xunsupported)) (((xobj).xfrom_c)) ("'c'"))
                                            (((xunsupported)) ((xobj)))
                            xc.write (((xC)) ("'foo'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).xarg)) ("'foo'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).xfrom_b)) ("'b'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xc).xfrom_c)) ("'c'"))
                    xtest_subclass_special_form.write
                      [xself]
                        memory > xFoo
                        seq > @
                          (((xunsupported)) ((xobj)) ((((xunsupported)) ((((xunsupported)) ((xClassVar)) ((xint)))) ((((xunsupported)) ((xFinal)) ((xint)))) ((((xunsupported)) ((xUnion)) ((xint)) ((xfloat)))) ((((xunsupported)) ((xOptional)) ((xint)))) ((((xunsupported)) ((xLiteral)) (1) (2))) ((((xunsupported)) ((xConcatenate)) ((xint)) ((((xParamSpec)) ("P"))))) ((((xunsupported)) ((xTypeGuard)) ((xint)))))))
                            (((xunsupported)) ((((xunsupported)) (((xself).xsubTest)) ((xobj)))))
                              (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)))))
                                xFoo.write
                                  []
                                    seq > @
            xClassVarTests.write
              []
                memory > xtest_cannot_init
                memory > xtest_repr
                memory > xtest_basics
                memory > xtest_cannot_subclass
                memory > xtest_no_isinstance
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xClassVar)) (1))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xClassVar)) ((xint)) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((((xunsupported)) ((xClassVar)) ((xint)))) ((xstr)))
                    xtest_repr.write
                      [xself]
                        memory > xcv
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xClassVar)))) ("'typing.ClassVar'"))
                            xcv.write (((xunsupported)) ((xClassVar)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) ("'typing.ClassVar[int]'"))
                            xcv.write (((xunsupported)) ((xClassVar)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) (("'typing.ClassVar[%s.Employee]'".mod (x__name__))))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                    xtest_cannot_init.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xClassVar)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xClassVar)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((((xunsupported)) ((xClassVar)) ((((xunsupported)) ((xOptional)) ((xint)))))))))
                    xtest_no_isinstance.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (1) ((((xunsupported)) ((xClassVar)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xClassVar)))
            xFinalTests.write
              []
                memory > xtest_cannot_init
                memory > xtest_repr
                memory > xtest_cannot_subclass
                memory > xtest_no_isinstance
                memory > xtest_basics
                memory > xtest_final_unmodified
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((xFinal)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xFinal)) (1))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xFinal)) ((xint)) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((((xunsupported)) ((xFinal)) ((xint)))) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xOptional)) ((((xunsupported)) ((xFinal)) ((xint)))))
                    xtest_repr.write
                      [xself]
                        memory > xcv
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xFinal)))) ("'typing.Final'"))
                            xcv.write (((xunsupported)) ((xFinal)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) ("'typing.Final[int]'"))
                            xcv.write (((xunsupported)) ((xFinal)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) (("'typing.Final[%s.Employee]'".mod (x__name__))))
                            xcv.write (((xunsupported)) ((xFinal)) ((((xunsupported)) ((xtuple)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) ("'typing.Final[tuple[int]]'"))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                    xtest_cannot_init.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xFinal)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xFinal)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((((xunsupported)) ((xFinal)) ((((xunsupported)) ((xOptional)) ((xint)))))))))
                    xtest_no_isinstance.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (1) ((((xunsupported)) ((xFinal)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xFinal)))
                    xtest_final_unmodified.write
                      [xself]
                        memory > xfunc
                        seq > @
                          seq
                            xfunc.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((xfunc)) ((((xfinal)) ((xfunc)))))
            xCastTests.write
              []
                memory > xtest_errors
                memory > xtest_basics
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcast)) ((xint)) (42))) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcast)) ((xfloat)) (42))) (42))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((xcast)) ((xfloat)) (42))))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcast)) ((xAny)) (42))) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcast)) ((xlist)) (42))) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcast)) ((((xunsupported)) ((xUnion)) ((xstr)) ((xfloat)))) (42))) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcast)) ((xAnyStr)) (42))) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xcast)) ("None: is there a None literal in the EO language?") (42))) (42))
                    xtest_errors.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write (((xcast)) (42) (42))
                            xbogusForceDataize.write (((xcast)) ("'hello'") (42))
            xForwardRefTests.write
              []
                memory > xtest_forwardref_subclass_type_error
                memory > xtest_forward_equality_namespace
                memory > xtest_forwardref_instance_type_error
                memory > xtest_forward_equality_hash
                memory > xtest_delayed_syntax_error
                memory > xtest_forward_recursion_actually
                memory > xtest_syntax_error
                memory > xtest_double_forward
                memory > xtest_forward_equality_gth
                memory > xtest_no_type_check
                memory > xtest_basics
                memory > xtest_no_type_check_no_bases
                memory > xtest_callable_forward
                memory > xtest_no_type_check_class
                memory > xtest_forward_equality
                memory > xtest_tuple_forward
                memory > xtest_union_forward_recursion
                memory > xtest_default_globals
                memory > xtest_forward_repr
                memory > xtest_nested_classvar_fails_forward_ref_check
                memory > xtest_or
                memory > xtest_no_type_check_forward_ref_as_string
                memory > xtest_union_forward
                memory > xtest_name_error
                memory > xtest_callable_with_ellipsis_forward
                memory > xtest_type_error
                memory > xtest_meta_no_type_check
                memory > xtest_final_forward_ref
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xNode
                        memory > xt
                        memory > xboth_hints
                        memory > xleft_hints
                        memory > xright_hints
                        seq > @
                          seq
                            xNode.write
                              []
                                memory > x__init__
                                memory > xadd_both
                                memory > xadd_right
                                memory > xadd_left
                                seq > @
                                  seq
                                    x__init__.write
                                      [xself xlabel]
                                        seq > @
                                          seq
                                            (((xunsupported)) (((xself).xlabel)) ((xlabel)))
                                            (((xunsupported)) (((xself).xleft)) (((xself).xright)) ("None: is there a None literal in the EO language?"))
                                    xadd_both.write
                                      [xself xleft xright xstuff xblah]
                                        seq > @
                                          (((xunsupported)))
                                            (((xunsupported)) (((xself).xleft)) ((xleft)))
                                            (((xunsupported)) (((xself).xright)) ((xright)))
                                    xadd_left.write
                                      [xself xnode]
                                        seq > @
                                          xbogusForceDataize.write ((((xself).xadd_both)) ((xnode)) ("None: is there a None literal in the EO language?"))
                                    xadd_right.write
                                      [xself xnode]
                                        seq > @
                                          (((xunsupported)))
                                            xbogusForceDataize.write ((((xself).xadd_both)) ("None: is there a None literal in the EO language?") ((xnode)))
                            xt.write (((xunsupported)) ((xNode)) ((xint)))
                            xboth_hints.write (((xget_type_hints)) (((xt).xadd_both)) ((((xglobals)))) ((((xlocals)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xboth_hints)) ("'left'"))) ((((xunsupported)) ((xOptional)) ((((xunsupported)) ((xNode)) ((xT)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xboth_hints)) ("'right'"))) ((((xunsupported)) ((xOptional)) ((((xunsupported)) ((xNode)) ((xT)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xboth_hints)) ("'left'"))) ((((xunsupported)) ((xboth_hints)) ("'right'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xboth_hints)) ("'stuff'"))) ((((xunsupported)) ((xOptional)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ("'blah'") ((xboth_hints)))
                            xleft_hints.write (((xget_type_hints)) (((xt).xadd_left)) ((((xglobals)))) ((((xlocals)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xleft_hints)) ("'node'"))) ((((xunsupported)) ((xOptional)) ((((xunsupported)) ((xNode)) ((xT)))))))
                            xright_hints.write (((xget_type_hints)) (((xt).xadd_right)) ((((xglobals)))) ((((xlocals)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xright_hints)) ("'node'"))) ((((xunsupported)) ((xOptional)) ((((xunsupported)) ((xNode)) ((xT)))))))
                    xtest_forwardref_instance_type_error.write
                      [xself]
                        memory > xfr
                        seq > @
                          seq
                            xfr.write ((((xtyping).xForwardRef)) ("'int'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (42) ((xfr)))
                    xtest_forwardref_subclass_type_error.write
                      [xself]
                        memory > xfr
                        seq > @
                          seq
                            xfr.write ((((xtyping).xForwardRef)) ("'int'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xfr)))
                    xtest_forward_equality.write
                      [xself]
                        memory > xfr
                        seq > @
                          seq
                            xfr.write ((((xtyping).xForwardRef)) ("'int'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xfr)) (((((xtyping).xForwardRef)) ("'int'"))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xList)) ("'int'"))) ((((xunsupported)) ((xList)) ((xint)))))
                    xtest_forward_equality_gth.write
                      [xself]
                        memory > xC
                        memory > xc2
                        memory > xc2_gth
                        memory > xc1_gth
                        memory > xfoo
                        memory > xc1
                        seq > @
                          seq
                            xc1.write ((((xtyping).xForwardRef)) ("'C'"))
                            xc1_gth.write ((((xtyping).xForwardRef)) ("'C'"))
                            xc2.write ((((xtyping).xForwardRef)) ("'C'"))
                            xc2_gth.write ((((xtyping).xForwardRef)) ("'C'"))
                            xC.write
                              []
                                seq > @
                            xfoo.write
                              [xa xb]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((xC)) ("'b'") ((xC)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xc1)) ((xc2)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xc1)) ((xc1_gth)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xc1_gth)) ((xc2_gth)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xList)) ((xc1)))) ((((xunsupported)) ((xList)) ((xc1_gth)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xList)) ((xc1)))) ((((xunsupported)) ((xList)) ((xC)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xList)) ((xc1_gth)))) ((((xunsupported)) ((xList)) ((xC)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xUnion)) ((xc1)) ((xc1_gth)))) ((((xunsupported)) ((xUnion)) ((xc1)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xUnion)) ((xc1)) ((xc1_gth)) ((xint)))) ((((xunsupported)) ((xUnion)) ((xc1)) ((xint)))))
                    xtest_forward_equality_hash.write
                      [xself]
                        memory > xc2
                        memory > xc2_gth
                        memory > xc1_gth
                        memory > xfoo
                        memory > xc1
                        seq > @
                          seq
                            xc1.write ((((xtyping).xForwardRef)) ("'int'"))
                            xc1_gth.write ((((xtyping).xForwardRef)) ("'int'"))
                            xc2.write ((((xtyping).xForwardRef)) ("'int'"))
                            xc2_gth.write ((((xtyping).xForwardRef)) ("'int'"))
                            xfoo.write
                              [xa xb]
                                seq > @
                            xbogusForceDataize.write (((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xc1)))) ((((xhash)) ((xc2)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xc1_gth)))) ((((xhash)) ((xc2_gth)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xhash)) ((xc1)))) ((((xhash)) ((xc1_gth)))))
                    xtest_forward_equality_namespace.write
                      [xself]
                        memory > xnamespace1
                        memory > xA
                        memory > xnamespace2
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                            xnamespace1.write
                              []
                                memory > xa
                                memory > xfun
                                seq > @
                                  seq
                                    xa.write ((((xtyping).xForwardRef)) ("'A'"))
                                    xfun.write
                                      [xx]
                                        seq > @
                                    xbogusForceDataize.write (((xget_type_hints)) ((xfun)) ((((xglobals)))) ((((xlocals)))))
                                    (((xunsupported)) ((xa)))
                            xnamespace2.write
                              []
                                memory > xfun
                                memory > xA
                                memory > xa
                                seq > @
                                  seq
                                    xa.write ((((xtyping).xForwardRef)) ("'A'"))
                                    xA.write
                                      []
                                        seq > @
                                    xfun.write
                                      [xx]
                                        seq > @
                                    xbogusForceDataize.write (((xget_type_hints)) ((xfun)) ((((xglobals)))) ((((xlocals)))))
                                    (((xunsupported)) ((xa)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xnamespace1)))) ((((xnamespace1)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xnamespace1)))) ((((xnamespace2)))))
                    xtest_forward_repr.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xList)) ("'int'"))))) ("typing.List[ForwardRef('int')]"))
                    xtest_union_forward.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xUnion)) ((xT)))))))
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") (((((xunsupported)) ((xtuple)) ((xT))).or (xint))))))
                    xtest_tuple_forward.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xTuple)) ((xT)))))))
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xtuple)) ((xT)))))))
                    xtest_double_forward.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xList)) ((xint)))))))
                    xtest_forward_recursion_actually.write
                      [xself]
                        memory > xr1
                        memory > xr2
                        memory > xnamespace2
                        memory > xcmp
                        memory > xnamespace1
                        seq > @
                          seq
                            xnamespace1.write
                              []
                                memory > xret
                                memory > xfun
                                memory > xA
                                memory > xa
                                seq > @
                                  seq
                                    xa.write ((((xtyping).xForwardRef)) ("'A'"))
                                    xA.write (xa)
                                    xfun.write
                                      [xx]
                                        seq > @
                                    xret.write (((xget_type_hints)) ((xfun)) ((((xglobals)))) ((((xlocals)))))
                                    (((xunsupported)) ((xa)))
                            xnamespace2.write
                              []
                                memory > xret
                                memory > xfun
                                memory > xA
                                memory > xa
                                seq > @
                                  seq
                                    xa.write ((((xtyping).xForwardRef)) ("'A'"))
                                    xA.write (xa)
                                    xfun.write
                                      [xx]
                                        seq > @
                                    xret.write (((xget_type_hints)) ((xfun)) ((((xglobals)))) ((((xlocals)))))
                                    (((xunsupported)) ((xa)))
                            xcmp.write
                              [xo1 xo2]
                                seq > @
                                  (((xunsupported)) (((xo1).eq (xo2))))
                            xr1.write (((xnamespace1)))
                            xr2.write (((xnamespace2)))
                            xbogusForceDataize.write ((((xself).xassertIsNot)) ((xr1)) ((xr2)))
                            xbogusForceDataize.write ((((xself).xassertRaises)) ((xRecursionError)) ((xcmp)) ((xr1)) ((xr2)))
                    xtest_union_forward_recursion.write
                      [xself]
                        memory > xD
                        memory > xC
                        memory > xValue
                        memory > xF
                        memory > xE
                        memory > xValueList
                        seq > @
                          seq
                            xValueList.write (((xunsupported)) ((xList)) ("'Value'"))
                            xValue.write (((xunsupported)) ((xUnion)) ((xstr)) ((xValueList)))
                            xC.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) ((xList)) ((xValue)))))
                            xD.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) ((xUnion)) ((xValue)) ((xValueList)))))
                            xE.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) ((xUnion)) ((((xunsupported)) ((xList)) ((xValue)))) ((xValueList)))))
                            xF.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) ((xUnion)) ((xValue)) ((((xunsupported)) ((xList)) ((xValue)))) ((xValueList)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xC)) ((((xglobals)))) ((((xlocals)))))) ((((xget_type_hints)) ((xC)) ((((xglobals)))) ((((xlocals)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xC)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'foo'") ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ("'Value'"))))))))))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xD)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'foo'") ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ("'Value'"))))))))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xE)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'foo'") ((((xunsupported)) ((xUnion)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ("'Value'"))))))))))) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ("'Value'"))))))))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xF)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'foo'") ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ("'Value'"))))))) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xUnion)) ((xstr)) ((((xunsupported)) ((xList)) ("'Value'"))))))))))))))))
                    xtest_callable_forward.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xT)))) ((xT)))))))
                    xtest_callable_with_ellipsis_forward.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoo)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xCallable)) ("") ((xT)))))))
                    xtest_syntax_error.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                            (((xunsupported)) ((xGeneric)) ("'/T'"))
                    xtest_delayed_syntax_error.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xSyntaxError)))))
                              xbogusForceDataize.write (((xget_type_hints)) ((xfoo)))
                    xtest_type_error.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xget_type_hints)) ((xfoo)))
                    xtest_name_error.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xNameError)))))
                              xbogusForceDataize.write (((xget_type_hints)) ((xfoo)) ((((xlocals)))))
                    xtest_no_type_check.write
                      [xself]
                        memory > xth
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              [xa]
                                seq > @
                                  (((xunsupported)))
                            xth.write (((xget_type_hints)) ((xfoo)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xth)) ((((xunsupported)))))
                    xtest_no_type_check_class.write
                      [xself]
                        memory > xith
                        memory > xC
                        memory > xcth
                        seq > @
                          seq
                            xC.write
                              []
                                memory > xfoo
                                seq > @
                                  (((xunsupported)))
                                    xfoo.write
                                      [xa]
                                        seq > @
                            xcth.write (((xget_type_hints)) (((xC).xfoo)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xcth)) ((((xunsupported)))))
                            xith.write (((xget_type_hints)) (((((xC))).xfoo)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xith)) ((((xunsupported)))))
                    xtest_no_type_check_no_bases.write
                      [xself]
                        memory > xC
                        memory > xD
                        seq > @
                          seq
                            xC.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xself xx]
                                      seq > @
                                        unsupported
                            xD.write
                              []
                                memory > xc
                                seq > @
                                  (((xunsupported)))
                                    xc.write (xC)
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) (((xC).xmeth)))) ((((xunsupported)) ("'x'") ((xint)))))
                    xtest_no_type_check_forward_ref_as_string.write
                      [xself]
                        memory > xD
                        memory > xC
                        memory > xF
                        memory > xexpected_result
                        memory > xE
                        seq > @
                          seq
                            xC.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) (((xtyping).xClassVar)) ((xint)))) (7))
                            xD.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) ((xClassVar)) ((xint)))) (7))
                            xE.write
                              []
                                seq > @
                                  (((xunsupported)) ("'typing.ClassVar[int]'") (7))
                            xF.write
                              []
                                seq > @
                                  (((xunsupported)) ("'ClassVar[int]'") (7))
                            xexpected_result.write (((xunsupported)) ("'foo'") ((((xunsupported)) (((xtyping).xClassVar)) ((xint)))))
                            (((xunsupported)) ((xclazz)) ((((xunsupported)) ((xC)) ((xD)) ((xE)) ((xF)))))
                              xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xclazz)))) ((xexpected_result)))
                    xtest_nested_classvar_fails_forward_ref_check.write
                      [xself]
                        memory > xE
                        memory > xF
                        seq > @
                          seq
                            xE.write
                              []
                                seq > @
                                  (((xunsupported)) ("'typing.ClassVar[typing.ClassVar[int]]'") (7))
                            xF.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) ((xClassVar)) ("'ClassVar[int]'"))) (7))
                            (((xunsupported)) ((xclazz)) ((((xunsupported)) ((xE)) ((xF)))))
                              (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                                xbogusForceDataize.write (((xget_type_hints)) ((xclazz)))
                    xtest_meta_no_type_check.write
                      [xself]
                        memory > xmagic_decorator
                        memory > xith
                        memory > xfoo
                        memory > xcth
                        memory > xC
                        memory > xth
                        seq > @
                          seq
                            xmagic_decorator.write
                              [xfunc]
                                seq > @
                                  (((xunsupported)))
                                    (((xunsupported)) ((xfunc)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xmagic_decorator).x__name__)) ("'magic_decorator'"))
                            xfoo.write
                              [xa]
                                seq > @
                                  (((xunsupported)))
                            xC.write
                              []
                                memory > xfoo
                                seq > @
                                  (((xunsupported)))
                                    xfoo.write
                                      [xa]
                                        seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xfoo).x__name__)) ("'foo'"))
                            xth.write (((xget_type_hints)) ((xfoo)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xth)) ((((xunsupported)))))
                            xcth.write (((xget_type_hints)) (((xC).xfoo)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xcth)) ((((xunsupported)))))
                            xith.write (((xget_type_hints)) (((((xC))).xfoo)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xith)) ((((xunsupported)))))
                    xtest_default_globals.write
                      [xself]
                        memory > xns
                        memory > xhints
                        memory > xcode
                        seq > @
                          seq
                            xcode.write "class C:\n    def foo(self, a: 'C') -> 'D': pass\nclass D:\n    def bar(self, b: 'D') -> C: pass\n"
                            xns.write (((xunsupported)))
                            xbogusForceDataize.write (((xexec)) ((xcode)) ((xns)))
                            xhints.write (((xget_type_hints)) (((((xunsupported)) ((xns)) ("'C'")).xfoo)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xhints)) ((((xunsupported)) ("'a'") ((((xunsupported)) ((xns)) ("'C'"))) ("'return'") ((((xunsupported)) ((xns)) ("'D'"))))))
                    xtest_final_forward_ref.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xgth)) ((xLoop)) ((((xglobals)))))) ("'attr'"))) ((((xunsupported)) ((xFinal)) ((xLoop)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((((xgth)) ((xLoop)) ((((xglobals)))))) ("'attr'"))) ((((xunsupported)) ((xFinal)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((((xgth)) ((xLoop)) ((((xglobals)))))) ("'attr'"))) ((xFinal)))
                    xtest_or.write
                      [xself]
                        memory > xX
                        seq > @
                          seq
                            xX.write (((xForwardRef)) ("'X'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xX).or "x")) ((((xunsupported)) ((xUnion)) ((xX)) ("x"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (("x".or (xX))) ((((xunsupported)) ((xUnion)) ("x") ((xX)))))
            xOverloadTests.write
              []
                memory > xtest_overload_succeeds
                memory > xtest_overload_fails
                seq > @
                  seq
                    xtest_overload_fails.write
                      [xself]
                        memory > xoverload
                        memory > xblah
                        seq > @
                          seq
                            (((xunsupported)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xRuntimeError)))))
                              seq
                                xblah.write
                                  []
                                    seq > @
                                      (((xunsupported)))
                                xbogusForceDataize.write (((xblah)))
                    xtest_overload_succeeds.write
                      [xself]
                        memory > xoverload
                        memory > xblah
                        seq > @
                          seq
                            (((xunsupported)))
                            xblah.write
                              []
                                seq > @
                                  (((xunsupported)))
                            xblah.write
                              []
                                seq > @
                            xbogusForceDataize.write (((xblah)))
            xASYNCIO_TESTS.write "
import asyncio

T_a = TypeVar('T_a')

class AwaitableWrapper(typing.Awaitable[T_a]):

    def __init__(self, value):
        self.value = value

    def __await__(self) -> typing.Iterator[T_a]:
        yield
        return self.value

class AsyncIteratorWrapper(typing.AsyncIterator[T_a]):

    def __init__(self, value: typing.Iterable[T_a]):
        self.value = value

    def __aiter__(self) -> typing.AsyncIterator[T_a]:
        return self

    async def __anext__(self) -> T_a:
        data = await self.value
        if data:
            return data
        else:
            raise StopAsyncIteration

class ACM:
    async def __aenter__(self) -> int:
        return 42
    async def __aexit__(self, etype, eval, tb):
        return None
"
            (((xunsupported)) ((xImportError)))
              xbogusForceDataize.write (((xexec)) ((xASYNCIO_TESTS)))
              xASYNCIO.write FALSE
              xASYNCIO.write TRUE
            seq
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
              (((xunsupported)))
            (((xunsupported)))
            xA.write
              []
                memory > xfloat
                seq > @
                  (((xunsupported)) ((xfloat)))
            xB.write
              []
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((((xunsupported)) ((xClassVar)) ((((xunsupported)) ((xOptional)) ("'B'"))))) ("None: is there a None literal in the EO language?"))
                    (((xunsupported)) ((xint)))
                    (((xunsupported)) ((xint)))
            xCSub.write
              []
                seq > @
                  (((xunsupported)) ((((xunsupported)) ((xClassVar)) ("'CSub'"))) ((((xB)))))
            xG.write
              []
                seq > @
                  (((xunsupported)) ((((xunsupported)) ((xClassVar)) ((((xunsupported)) ((xList)) ((xT)))))) ((((xunsupported)))))
            xLoop.write
              []
                seq > @
                  (((xunsupported)) ((((xunsupported)) ((xFinal)) ("'Loop'"))))
            xNoneAndForward.write
              []
                seq > @
                  seq
                    (((xunsupported)) ("'NoneAndForward'"))
                    (((xunsupported)) ("None: is there a None literal in the EO language?"))
            xCoolEmployee.write
              []
                memory > xstr
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xstr)))
                    (((xunsupported)) ((xint)))
            xCoolEmployeeWithDefault.write
              []
                memory > xstr
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xstr)))
                    (((xunsupported)) ((xint)) (0))
            xXMeth.write
              []
                memory > xdouble
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xint)))
                    xdouble.write
                      [xself]
                        seq > @
                          (((xunsupported)) ((2.mul ((xself).xx))))
            xXRepr.write
              []
                memory > x__str__
                memory > xint
                memory > x__add__
                seq > @
                  seq
                    (((xunsupported)) ((xint)))
                    (((xunsupported)) ((xint)) (1))
                    x__str__.write
                      [xself]
                        seq > @
                          (((xunsupported)) ("None: is there a None literal in the EO language?"))
                    x__add__.write
                      [xself xother]
                        seq > @
                          (((xunsupported)) (0))
            xLabel.write (((xTypedDict)) ("'Label'") ((((xunsupported)) ((((xunsupported)) ("'label'") ((xstr)))))))
            xPoint2D.write
              []
                memory > xint
                seq > @
                  seq
                    (((xunsupported)) ((xint)))
                    (((xunsupported)) ((xint)))
            xLabelPoint2D.write
              []
                seq > @
                  unsupported
            xHasForeignBaseClass.write
              []
                seq > @
                  seq
                    (((xunsupported)) ("'XRepr'"))
                    (((xunsupported)) ("'mod_generics_cache.A'"))
            (((xunsupported)) ((xStopIteration)))
              xbogusForceDataize.write ((((((xg_with)) ((((xACM))))).xsend)) ("None: is there a None literal in the EO language?"))
              (((xunsupported)) (((((xunsupported)) (((xe).xargs)) (0)).eq 42)))
            xgth.write (xget_type_hints)
            xForRefExample.write
              []
                memory > xfunc
                memory > xnested
                seq > @
                  seq
                    xfunc.write
                      [xself]
                        seq > @
                          (((xunsupported)))
                    xnested.write
                      [xself]
                        seq > @
                          (((xunsupported)))
            xGetTypeHintTests.write
              []
                memory > xtest_forward_ref_and_final
                memory > xtest_get_type_hints_classes_str_annotations
                memory > xtest_top_level_class_var
                memory > xtest_get_type_hints_bad_module
                memory > xtest_get_type_hints_from_various_objects
                memory > xtest_get_type_hints_annotated
                memory > xtest_get_type_hints_wrapped_decoratored_func
                memory > xtest_get_type_hints_ClassVar
                memory > xtest_get_type_hints_for_builtins
                memory > xtest_get_type_hints_classes
                memory > xtest_get_type_hints_for_object_with_annotations
                memory > xtest_get_type_hints_modules_forwardref
                memory > xtest_get_type_hints_annotated_refs
                memory > xtest_get_type_hints_modules
                memory > xtest_respect_no_type_check
                memory > xtest_previous_behavior
                memory > xtest_get_type_hints_annotated_bad_module
                seq > @
                  seq
                    xtest_get_type_hints_from_various_objects.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xgth)) (123))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xgth)) ("'abc'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xgth)) ("None: is there a None literal in the EO language?"))
                    xtest_get_type_hints_modules.write
                      [xself]
                        memory > xann_module_type_hints
                        seq > @
                          seq
                            xann_module_type_hints.write (((xunsupported)) (1) (2) ("'f'") ((((xunsupported)) ((xTuple)) ((xint)) ((xint)))) ("'x'") ((xint)) ("'y'") ((xstr)) ("'u'") (((xint).or (xfloat))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xann_module)))) ((xann_module_type_hints)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xann_module2)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xann_module3)))) ((((xunsupported)))))
                    xtest_get_type_hints_modules_forwardref.write
                      [xself]
                        memory > xmgc_hints
                        seq > @
                          (((xunsupported)))
                            xmgc_hints.write (((xunsupported)) ("'default_a'") ((((xunsupported)) ((xOptional)) (((xmod_generics_cache).xA)))) ("'default_b'") ((((xunsupported)) ((xOptional)) (((xmod_generics_cache).xB)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xmod_generics_cache)))) ((xmgc_hints)))
                    xtest_get_type_hints_classes.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module).xC)))) ((((xunsupported)) ("'y'") ((((xunsupported)) ((xOptional)) (((xann_module).xC)))))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xgth)) (((xann_module).xj_class)))) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module).xM)))) ((((xunsupported)) ("'123'") (123) ("'o'") ((xtype)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module).xD)))) ((((xunsupported)) ("'j'") ((xstr)) ("'k'") ((xstr)) ("'y'") ((((xunsupported)) ((xOptional)) (((xann_module).xC)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module).xY)))) ((((xunsupported)) ("'z'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module).xh_class)))) ((((xunsupported)) ("'y'") ((((xunsupported)) ((xOptional)) (((xann_module).xC)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module).xS)))) ((((xunsupported)) ("'x'") ((xstr)) ("'y'") ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module).xfoo)))) ((((xunsupported)) ("'x'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xNoneAndForward)))) ((((xunsupported)) ("'parent'") ((xNoneAndForward)) ("'meaning'") ((((xtype)) ("None: is there a None literal in the EO language?"))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xHasForeignBaseClass)))) ((((xunsupported)) ("'some_xrepr'") ((xXRepr)) ("'other_a'") (((xmod_generics_cache).xA)) ("'some_b'") (((xmod_generics_cache).xB)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xXRepr).x__new__)))) ((((xunsupported)) ("'x'") ((xint)) ("'y'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xmod_generics_cache).xB)))) ((((xunsupported)) ("'my_inner_a1'") ((((xmod_generics_cache).xB).xA)) ("'my_inner_a2'") ((((xmod_generics_cache).xB).xA)) ("'my_outer_a'") (((xmod_generics_cache).xA)))))
                    xtest_respect_no_type_check.write
                      [xself]
                        memory > xDer
                        memory > xNoTpCheck
                        memory > xABase
                        seq > @
                          seq
                            xNoTpCheck.write
                              []
                                memory > xInn
                                seq > @
                                  (((xunsupported)))
                                    xInn.write
                                      []
                                        memory > x__init__
                                        seq > @
                                          x__init__.write
                                            [xself xx]
                                              seq > @
                                                unsupported
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((xNoTpCheck).x__no_type_check__)))
                            xbogusForceDataize.write ((((xself).xassertTrue)) (((((xNoTpCheck).xInn).x__init__).x__no_type_check__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((((xann_module2).xNTC).xmeth)))) ((((xunsupported)))))
                            xABase.write
                              []
                                memory > xmeth
                                seq > @
                                  xmeth.write
                                    [xx]
                                      seq > @
                                        unsupported
                            xDer.write
                              []
                                seq > @
                                  (((xunsupported)))
                                    unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xABase).xmeth)))) ((((xunsupported)) ("'x'") ((xint)))))
                    xtest_get_type_hints_for_builtins.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xint)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xtype)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xdir)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xlen)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xobject).x__str__)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((((xobject))).x__str__)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xstr).xjoin)))) ((((xunsupported)))))
                    xtest_previous_behavior.write
                      [xself]
                        memory > xtestf
                        memory > xtestg
                        seq > @
                          seq
                            xtestf.write
                              [xx xy]
                                seq > @
                                  unsupported
                            (((xunsupported)) ((((xunsupported)) (((xtestf).x__annotations__)) ("'x'"))) ("'int'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xtestf)))) ((((xunsupported)) ("'x'") ((xint)))))
                            xtestg.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xtestg)))) ((((xunsupported)) ("'x'") ((((xtype)) ("None: is there a None literal in the EO language?"))))))
                    xtest_get_type_hints_for_object_with_annotations.write
                      [xself]
                        memory > xA
                        memory > xb
                        memory > xB
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                                  unsupported
                            xB.write
                              []
                                seq > @
                                  unsupported
                            xb.write (((xB)))
                            (((xunsupported)) (((xb).x__annotations__)) ((((xunsupported)) ("'x'") ("'A'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xb)) ((((xlocals)))))) ((((xunsupported)) ("'x'") ((xA)))))
                    xtest_get_type_hints_ClassVar.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xann_module2).xCV)) (((xann_module2).x__dict__)))) ((((xunsupported)) ("'var'") ((((xunsupported)) (((xtyping).xClassVar)) (((xann_module2).xCV)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xB)) ((((xglobals)))))) ((((xunsupported)) ("'y'") ((xint)) ("'x'") ((((xunsupported)) ((xClassVar)) ((((xunsupported)) ((xOptional)) ((xB)))))) ("'b'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xCSub)) ((((xglobals)))))) ((((xunsupported)) ("'z'") ((((xunsupported)) ((xClassVar)) ((xCSub)))) ("'y'") ((xint)) ("'b'") ((xint)) ("'x'") ((((xunsupported)) ((xClassVar)) ((((xunsupported)) ((xOptional)) ((xB)))))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xG)))) ((((xunsupported)) ("'lst'") ((((xunsupported)) ((xClassVar)) ((((xunsupported)) ((xList)) ((xT)))))))))
                    xtest_get_type_hints_wrapped_decoratored_func.write
                      [xself]
                        memory > xexpects
                        seq > @
                          seq
                            xexpects.write (((xunsupported)) ("'self'") ((xForRefExample)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xForRefExample).xfunc)))) ((xexpects)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) (((xForRefExample).xnested)))) ((xexpects)))
                    xtest_get_type_hints_annotated.write
                      [xself]
                        memory > xbarfoo2
                        memory > xbarfoo4
                        memory > xBA3
                        memory > xBA2
                        memory > xBA
                        memory > xbarfoo
                        memory > xX
                        memory > xfoobar
                        memory > xbarfoo3
                        seq > @
                          seq
                            xfoobar.write
                              [xx]
                                seq > @
                                  unsupported
                            xX.write (((xunsupported)) ((xAnnotated)) ((xint)) ((((xunsupported)) (1) (10))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoobar)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'x'") ((((xunsupported)) ((xList)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xget_type_hints)) ((xfoobar)) ((((xglobals)))) ((((xlocals)))) (TRUE))) ((((xunsupported)) ("'x'") ((((xunsupported)) ((xList)) ((((xunsupported)) ((xAnnotated)) ((xint)) ((((xunsupported)) (1) (10))))))))))
                            xfoobar.write
                              [xx]
                                seq > @
                                  unsupported
                            xX.write (((xunsupported)) ((xAnnotated)) ((xint)) ((((xunsupported)) (1) (10))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xfoobar)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'x'") ((((xunsupported)) ((xlist)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xget_type_hints)) ((xfoobar)) ((((xglobals)))) ((((xlocals)))) (TRUE))) ((((xunsupported)) ("'x'") ((((xunsupported)) ((xlist)) ((((xunsupported)) ((xAnnotated)) ((xint)) ((((xunsupported)) (1) (10))))))))))
                            xBA.write (((xunsupported)) ((xTuple)) ((((xunsupported)) ((xAnnotated)) ((xT)) ((((xunsupported)) (1) (0))))) (""))
                            xbarfoo.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xget_type_hints)) ((xbarfoo)) ((((xglobals)))) ((((xlocals)))))) ("'x'"))) ((((xunsupported)) ((xTuple)) ((xT)) (""))))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xunsupported)) ((((xunsupported)) ((xget_type_hints)) ((xbarfoo)) ((((xglobals)))) ((((xlocals)))) (TRUE))) ("'x'"))) ((xBA)))
                            xBA.write (((xunsupported)) ((xtuple)) ((((xunsupported)) ((xAnnotated)) ((xT)) ((((xunsupported)) (1) (0))))) (""))
                            xbarfoo.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xget_type_hints)) ((xbarfoo)) ((((xglobals)))) ((((xlocals)))))) ("'x'"))) ((((xunsupported)) ((xtuple)) ((xT)) (""))))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xunsupported)) ((((xunsupported)) ((xget_type_hints)) ((xbarfoo)) ((((xglobals)))) ((((xlocals)))) (TRUE))) ("'x'"))) ((xBA)))
                            xbarfoo2.write
                              [xx xy]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xbarfoo2)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'x'") ((((xunsupported)) (((xtyping).xCallable)) ("") ((((xunsupported)) ((xList)) ((xT)))))) ("'y'") ((((xunsupported)) (((xtyping).xUnion)) ((xint)) ((xT)))))))
                            xBA2.write (((xunsupported)) (((xtyping).xCallable)) ("") ((((xunsupported)) ((xList)) ((xT)))))
                            xbarfoo3.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xunsupported)) ((((xunsupported)) ((xget_type_hints)) ((xbarfoo3)) ((((xglobals)))) ((((xlocals)))) (TRUE))) ("x"))) ((xBA2)))
                            xBA3.write (((xunsupported)) (((xtyping).xAnnotated)) (((xint).or (xfloat))) ("const"))
                            xbarfoo4.write
                              [xx]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xbarfoo4)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("x") (((xint).or (xfloat))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xget_type_hints)) ((xbarfoo4)) ((((xglobals)))) ((((xlocals)))) (TRUE))) ((((xunsupported)) ("x") ((((xunsupported)) (((xtyping).xAnnotated)) (((xint).or (xfloat))) ("const"))))))
                    xtest_get_type_hints_annotated_refs.write
                      [xself]
                        memory > xMySet
                        memory > xConst
                        seq > @
                          seq
                            xConst.write (((xunsupported)) ((xAnnotated)) ((xT)) ("Const"))
                            xMySet.write
                              []
                                memory > x__ior__
                                memory > x__iand__
                                seq > @
                                  seq
                                    x__ior__.write
                                      [xself xother]
                                        seq > @
                                          unsupported
                                    x__iand__.write
                                      [xself xother]
                                        seq > @
                                          unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) (((xMySet).x__iand__)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'other'") ((((xunsupported)) ((xMySet)) ((xT)))) ("'return'") ((((xunsupported)) ((xMySet)) ((xT)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xget_type_hints)) (((xMySet).x__iand__)) ((((xglobals)))) ((((xlocals)))) (TRUE))) ((((xunsupported)) ("'other'") ((((xunsupported)) ((xConst)) ((((xunsupported)) ((xMySet)) ((xT)))))) ("'return'") ((((xunsupported)) ((xMySet)) ((xT)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) (((xMySet).x__ior__)) ((((xglobals)))) ((((xlocals)))))) ((((xunsupported)) ("'other'") ((((xunsupported)) ((xMySet)) ((xT)))) ("'return'") ((((xunsupported)) ((xMySet)) ((xT)))))))
                    xtest_get_type_hints_classes_str_annotations.write
                      [xself]
                        memory > xFoo
                        seq > @
                          seq
                            xFoo.write
                              []
                                memory > xy
                                seq > @
                                  seq
                                    xy.write (xstr)
                                    (((xunsupported)) ("'y'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xFoo)))) ((((xunsupported)) ("'x'") ((xstr)))))
                    xtest_get_type_hints_bad_module.write
                      [xself]
                        memory > xBadModule
                        seq > @
                          seq
                            xBadModule.write
                              []
                                seq > @
                            (((xunsupported)) (((xBadModule).x__module__)) ("'bad'"))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ("'bad'") (((xsys).xmodules)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xBadModule)))) ((((xunsupported)))))
                    xtest_get_type_hints_annotated_bad_module.write
                      [xself]
                        memory > xBadType
                        memory > xBadBase
                        seq > @
                          seq
                            xBadBase.write
                              []
                                memory > xtuple
                                seq > @
                                  (((xunsupported)) ((xtuple)))
                            xBadType.write
                              []
                                memory > xlist
                                seq > @
                                  (((xunsupported)) ((xlist)))
                            (((xunsupported)) (((xBadType).x__module__)) (((xBadBase).x__module__)) ("'bad'"))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ("'bad'") (((xsys).xmodules)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xBadType)))) ((((xunsupported)) ("'foo'") ((xtuple)) ("'bar'") ((xlist)))))
                    xtest_forward_ref_and_final.write
                      [xself]
                        memory > xhints
                        seq > @
                          seq
                            xhints.write (((xget_type_hints)) ((xann_module5)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xhints)) ((((xunsupported)) ("'name'") ((((xunsupported)) ((xFinal)) ((xstr)))))))
                            xhints.write (((xget_type_hints)) (((xann_module5).xMyClass)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xhints)) ((((xunsupported)) ("'value'") ((xFinal)))))
                    xtest_top_level_class_var.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)))))
                            xbogusForceDataize.write (((xget_type_hints)) ((xann_module6)))
            xGetUtilitiesTestCase.write
              []
                memory > xtest_get_args
                memory > xtest_get_origin
                seq > @
                  seq
                    xtest_get_origin.write
                      [xself]
                        memory > xT
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xP.write (((xParamSpec)) ("'P'"))
                            xC.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xC)) ((xint)))))) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xC)) ((xT)))))) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((xint)))) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xClassVar)) ((xint)))))) ((xClassVar)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xUnion)) ((xint)) ((xstr)))))) ((xUnion)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xLiteral)) (42) (43))))) ((xLiteral)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xFinal)) ((((xunsupported)) ((xList)) ((xint)))))))) ((xFinal)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((xGeneric)))) ((xGeneric)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xGeneric)) ((xT)))))) ((xGeneric)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xTuple)) ((xT)) ((xT)))))) ((xint)))))) ((xlist)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xAnnotated)) ((xT)) ("'thing'"))))) ((xAnnotated)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((xList)))) ((xlist)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((xTuple)))) ((xtuple)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((xCallable)))) ((((xcollections).xabc).xCallable)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((((xunsupported)) ((xlist)) ((xint)))))) ((xlist)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) ((xlist)))) ("None: is there a None literal in the EO language?"))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) (((xlist).or (xstr))))) (((xtypes).xUnionType)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) (((xP).xargs)))) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xget_origin)) (((xP).xkwargs)))) ((xP)))
                    xtest_get_args.write
                      [xself]
                        memory > xT
                        memory > xP
                        memory > xC
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("'T'"))
                            xC.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xC)) ((xint)))))) ((((xunsupported)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xC)) ((xT)))))) ((((xunsupported)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((xint)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xClassVar)) ((xint)))))) ((((xunsupported)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xUnion)) ((xint)) ((xstr)))))) ((((xunsupported)) ((xint)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xLiteral)) (42) (43))))) ((((xunsupported)) (42) (43))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xFinal)) ((((xunsupported)) ((xList)) ((xint)))))))) ((((xunsupported)) ((((xunsupported)) ((xList)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((((xunsupported)) ((xUnion)) ((xint)) ((((xunsupported)) ((xTuple)) ((xT)) ((xint)))))) ((xstr)))))) ((((xunsupported)) ((xint)) ((((xunsupported)) ((xTuple)) ((xstr)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((((xunsupported)) (((xtyping).xDict)) ((xint)) ((((xunsupported)) ((xTuple)) ((xT)) ((xT)))))) ((((xunsupported)) ((xOptional)) ((xint)))))))) ((((xunsupported)) ((xint)) ((((xunsupported)) ((xTuple)) ((((xunsupported)) ((xOptional)) ((xint)))) ((((xunsupported)) ((xOptional)) ((xint)))))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((((xunsupported)) ((xCallable)) ((((xunsupported)))) ((xT)))) ((xint)))))) ((((xunsupported)) ((((xunsupported)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xCallable)) ("") ((xint)))))) ((((xunsupported)) ("") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xUnion)) ((xint)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((((xunsupported)) ((xTuple)) ((xT)) (""))))) ((xstr)))))))) ((((xunsupported)) ((xint)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((((xunsupported)) ((xTuple)) ((xT)) (""))))) ((xstr)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xTuple)) ((xint)) (""))))) ((((xunsupported)) ((xint)) (""))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xTuple)) ((((xunsupported)))))))) ((((xunsupported)) ((((xunsupported)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xAnnotated)) ((xT)) ("'one'") (2) ((((xunsupported)) ("'three'"))))))) ((((xunsupported)) ((xT)) ("'one'") (2) ((((xunsupported)) ("'three'"))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((xList)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((xTuple)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((xCallable)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xlist)) ((xint)))))) ((((xunsupported)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((xlist)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((((xcollections).xabc).xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))))) ((((xunsupported)) ((((xunsupported)) ((xint)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((((xcollections).xabc).xCallable)) ("") ((xstr)))))) ((((xunsupported)) ("") ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((((xcollections).xabc).xCallable)) ((((xunsupported)))) ((xstr)))))) ((((xunsupported)) ((((xunsupported)))) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((((xcollections).xabc).xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))))) ((((xget_args)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xint)))) ((xstr)))))))
                            xP.write (((xParamSpec)) ("'P'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xCallable)) ((xP)) ((xint)))))) ((((xunsupported)) ((xP)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) ((((xunsupported)) ((xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP)))) ((xint)))))) ((((xunsupported)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_args)) (((xlist).or (xstr))))) ((((xunsupported)) ((xlist)) ((xstr)))))
            xCollectionsAbcTests.write
              []
                memory > xtest_frozenset
                memory > xtest_collections_as_base
                memory > xtest_subclassing
                memory > xtest_set_subclass_instantiation
                memory > xtest_no_tuple_instantiation
                memory > xtest_mutablesequence
                memory > xtest_async_generator
                memory > xtest_dict_subscribe
                memory > xtest_async_iterator
                memory > xtest_iterable
                memory > xtest_no_frozenset_instantiation
                memory > xtest_subclassing_subclasshook
                memory > xtest_abstractset
                memory > xtest_subclassing_register
                memory > xtest_counter_subclass_instantiation
                memory > xtest_coroutine
                memory > xtest_defaultdict_subclass
                memory > xtest_hashable
                memory > xtest_deque
                memory > xtest_ordereddict_instantiation
                memory > xtest_no_generator_instantiation
                memory > xtest_chainmap_subclass
                memory > xtest_frozenset_subclass_instantiation
                memory > xtest_generator
                memory > xtest_awaitable
                memory > xtest_no_async_generator_instantiation
                memory > xtest_counter
                memory > xtest_mutablemapping
                memory > xtest_deque_instantiation
                memory > xtest_collection
                memory > xtest_ordereddict_subclass
                memory > xtest_bytestring
                memory > xtest_no_set_instantiation
                memory > xtest_container
                memory > xtest_mutableset
                memory > xtest_list_subclass
                memory > xtest_dict_subclass
                memory > xtest_iterator
                memory > xtest_mapping
                memory > xtest_no_dict_instantiation
                memory > xtest_no_list_instantiation
                memory > xtest_dict
                memory > xtest_counter_instantiation
                memory > xtest_sized
                memory > xtest_async_iterable
                memory > xtest_defaultdict_instantiation
                memory > xtest_sequence
                memory > xtest_chainmap_instantiation
                memory > xtest_set
                memory > xtest_list
                memory > xtest_subclassing_async_generator
                seq > @
                  seq
                    xtest_hashable.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (42) (((xtyping).xHashable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xunsupported)))) (((xtyping).xHashable)))
                    xtest_iterable.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xlist)) (((xtyping).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xlist)) (((xtyping).xIterable)))
                    xtest_iterator.write
                      [xself]
                        memory > xit
                        seq > @
                          seq
                            xit.write (((xiter)) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xit)) (((xtyping).xIterator)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xIterator)))
                    xtest_awaitable.write
                      [xself]
                        memory > xns
                        memory > xg
                        memory > xfoo
                        seq > @
                          (((xunsupported)))
                            xns.write (((xunsupported)))
                            xbogusForceDataize.write (((xexec)) ("async def foo() -> typing.Awaitable[int]:\n    return await AwaitableWrapper(42)\n") ((((xglobals)))) ((xns)))
                            xfoo.write (((xunsupported)) ((xns)) ("'foo'"))
                            xg.write (((xfoo)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xg)) (((xtyping).xAwaitable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xfoo)) (((xtyping).xAwaitable)))
                            xbogusForceDataize.write ((((xg).xsend)) ("None: is there a None literal in the EO language?"))
                    xtest_coroutine.write
                      [xself]
                        memory > xns
                        memory > xg
                        memory > xfoo
                        seq > @
                          (((xunsupported)))
                            xns.write (((xunsupported)))
                            xbogusForceDataize.write (((xexec)) ("async def foo():\n    return\n") ((((xglobals)))) ((xns)))
                            xfoo.write (((xunsupported)) ((xns)) ("'foo'"))
                            xg.write (((xfoo)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xg)) (((xtyping).xCoroutine)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((xg)) ((((xunsupported)) (((xtyping).xCoroutine)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xfoo)) (((xtyping).xCoroutine)))
                            (((xunsupported)) ((xStopIteration)))
                              xbogusForceDataize.write ((((xg).xsend)) ("None: is there a None literal in the EO language?"))
                    xtest_async_iterable.write
                      [xself]
                        memory > xbase_it
                        memory > xit
                        seq > @
                          (((xunsupported)))
                            xbase_it.write (((xrange)) (10))
                            xit.write (((xAsyncIteratorWrapper)) ((xbase_it)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xit)) (((xtyping).xAsyncIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xit)) (((xtyping).xAsyncIterable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xAsyncIterable)))
                    xtest_async_iterator.write
                      [xself]
                        memory > xbase_it
                        memory > xit
                        seq > @
                          (((xunsupported)))
                            xbase_it.write (((xrange)) (10))
                            xit.write (((xAsyncIteratorWrapper)) ((xbase_it)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xit)) (((xtyping).xAsyncIterator)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xAsyncIterator)))
                    xtest_sized.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xSized)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xSized)))
                    xtest_container.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xContainer)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xContainer)))
                    xtest_collection.write
                      [xself]
                        seq > @
                          (((xhasattr)) ((xtyping)) ("'Collection'")).if
                            seq
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xtuple)))) (((xtyping).xCollection)))
                              xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xfrozenset)))) (((xtyping).xCollection)))
                              xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xdict)) (((xtyping).xCollection)))
                              xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xCollection)))
                    xtest_abstractset.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xset)))) (((xtyping).xAbstractSet)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xAbstractSet)))
                    xtest_mutableset.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xset)))) (((xtyping).xMutableSet)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xfrozenset)))) (((xtyping).xMutableSet)))
                    xtest_mapping.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xMapping)))
                    xtest_mutablemapping.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xMutableMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xMutableMapping)))
                    xtest_sequence.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xSequence)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xSequence)))
                    xtest_mutablesequence.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xunsupported)))) (((xtyping).xMutableSequence)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xunsupported)))) (((xtyping).xMutableSequence)))
                    xtest_bytestring.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (((xtyping).xByteString)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (((xtyping).xByteString)))
                    xtest_list.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xlist)) (((xtyping).xList)))
                    xtest_deque.write
                      [xself]
                        memory > xMyDeque
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) (((xcollections).xdeque)) (((xtyping).xDeque)))
                            xMyDeque.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xMyDeque)))) (((xcollections).xdeque)))
                    xtest_counter.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertIsSubclass)) (((xcollections).xCounter)) (((xtyping).xCounter)))
                    xtest_set.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xset)) (((xtyping).xSet)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xfrozenset)) (((xtyping).xSet)))
                    xtest_frozenset.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xfrozenset)) (((xtyping).xFrozenSet)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xset)) (((xtyping).xFrozenSet)))
                    xtest_dict.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xdict)) (((xtyping).xDict)))
                    xtest_dict_subscribe.write
                      [xself]
                        memory > xV
                        memory > xK
                        seq > @
                          seq
                            xK.write (((xTypeVar)) ("'K'"))
                            xV.write (((xTypeVar)) ("'V'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xDict)) ((xK)) ((xV)))) ((xstr)) ((xint)))) ((((xunsupported)) ((xDict)) ((xstr)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xDict)) ((xK)) ((xint)))) ((xstr)))) ((((xunsupported)) ((xDict)) ((xstr)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xDict)) ((xstr)) ((xV)))) ((xint)))) ((((xunsupported)) ((xDict)) ((xstr)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xDict)) ((xK)) ((((xunsupported)) ((xList)) ((xV)))))) ((xstr)) ((xint)))) ((((xunsupported)) ((xDict)) ((xstr)) ((((xunsupported)) ((xList)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xDict)) ((xK)) ((((xunsupported)) ((xList)) ((xint)))))) ((xstr)))) ((((xunsupported)) ((xDict)) ((xstr)) ((((xunsupported)) ((xList)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xDict)) ((xK)) ((((xunsupported)) ((xlist)) ((xV)))))) ((xstr)) ((xint)))) ((((xunsupported)) ((xDict)) ((xstr)) ((((xunsupported)) ((xlist)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xDict)) ((xK)) ((((xunsupported)) ((xlist)) ((xint)))))) ((xstr)))) ((((xunsupported)) ((xDict)) ((xstr)) ((((xunsupported)) ((xlist)) ((xint)))))))
                    xtest_no_list_instantiation.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xtyping).xList)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xList)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xList)) ((xint)))))
                    xtest_list_subclass.write
                      [xself]
                        memory > xa
                        memory > xMyList
                        seq > @
                          seq
                            xMyList.write
                              []
                                seq > @
                            xa.write (((xMyList)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xa)) ((xMyList)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xa)) (((xtyping).xSequence)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMyList)) ((xlist)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xlist)) ((xMyList)))
                    xtest_no_dict_instantiation.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xtyping).xDict)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xDict)) ((xKT)) ((xVT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xDict)) ((xstr)) ((xint)))))
                    xtest_dict_subclass.write
                      [xself]
                        memory > xMyDict
                        memory > xd
                        seq > @
                          seq
                            xMyDict.write
                              []
                                seq > @
                            xd.write (((xMyDict)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) ((xMyDict)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) (((xtyping).xMutableMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMyDict)) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xdict)) ((xMyDict)))
                    xtest_defaultdict_instantiation.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (((((xtyping).xDefaultDict)))))) (((xcollections).xdefaultdict)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xDefaultDict)) ((xKT)) ((xVT)))))))) (((xcollections).xdefaultdict)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xDefaultDict)) ((xstr)) ((xint)))))))) (((xcollections).xdefaultdict)))
                    xtest_defaultdict_subclass.write
                      [xself]
                        memory > xMyDefDict
                        memory > xdd
                        seq > @
                          seq
                            xMyDefDict.write
                              []
                                seq > @
                            xdd.write (((xMyDefDict)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xdd)) ((xMyDefDict)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMyDefDict)) (((xcollections).xdefaultdict)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) (((xcollections).xdefaultdict)) ((xMyDefDict)))
                    xtest_ordereddict_instantiation.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (((((xtyping).xOrderedDict)))))) (((xcollections).xOrderedDict)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xOrderedDict)) ((xKT)) ((xVT)))))))) (((xcollections).xOrderedDict)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xOrderedDict)) ((xstr)) ((xint)))))))) (((xcollections).xOrderedDict)))
                    xtest_ordereddict_subclass.write
                      [xself]
                        memory > xod
                        memory > xMyOrdDict
                        seq > @
                          seq
                            xMyOrdDict.write
                              []
                                seq > @
                            xod.write (((xMyOrdDict)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xod)) ((xMyOrdDict)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMyOrdDict)) (((xcollections).xOrderedDict)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) (((xcollections).xOrderedDict)) ((xMyOrdDict)))
                    xtest_chainmap_instantiation.write
                      [xself]
                        memory > xCM
                        seq > @
                          (((xunsupported)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (((((xtyping).xChainMap)))))) (((xcollections).xChainMap)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xChainMap)) ((xKT)) ((xVT)))))))) (((xcollections).xChainMap)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xChainMap)) ((xstr)) ((xint)))))))) (((xcollections).xChainMap)))
                            xCM.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) ((xCM)) ((xint)) ((xstr)))))))) ((xCM)))
                    xtest_chainmap_subclass.write
                      [xself]
                        memory > xcm
                        memory > xMyChainMap
                        seq > @
                          (((xunsupported)))
                            xMyChainMap.write
                              []
                                seq > @
                            xcm.write (((xMyChainMap)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xcm)) ((xMyChainMap)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMyChainMap)) (((xcollections).xChainMap)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) (((xcollections).xChainMap)) ((xMyChainMap)))
                    xtest_deque_instantiation.write
                      [xself]
                        memory > xD
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (((((xtyping).xDeque)))))) (((xcollections).xdeque)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xDeque)) ((xT)))))))) (((xcollections).xdeque)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xDeque)) ((xint)))))))) (((xcollections).xdeque)))
                            xD.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) ((xD)) ((xint)))))))) ((xD)))
                    xtest_counter_instantiation.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) (((((xtyping).xCounter)))))) (((xcollections).xCounter)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xCounter)) ((xT)))))))) (((xcollections).xCounter)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) (((xtyping).xCounter)) ((xint)))))))) (((xcollections).xCounter)))
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((((((xunsupported)) ((xC)) ((xint)))))))) ((xC)))
                    xtest_counter_subclass_instantiation.write
                      [xself]
                        memory > xMyCounter
                        memory > xd
                        seq > @
                          seq
                            xMyCounter.write
                              []
                                seq > @
                            xd.write (((xMyCounter)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) ((xMyCounter)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) (((xtyping).xCounter)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) (((xcollections).xCounter)))
                    xtest_no_set_instantiation.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xtyping).xSet)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xSet)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xSet)) ((xint)))))
                    xtest_set_subclass_instantiation.write
                      [xself]
                        memory > xMySet
                        memory > xd
                        seq > @
                          seq
                            xMySet.write
                              []
                                seq > @
                            xd.write (((xMySet)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) ((xMySet)))
                    xtest_no_frozenset_instantiation.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xtyping).xFrozenSet)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xFrozenSet)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xFrozenSet)) ((xint)))))
                    xtest_frozenset_subclass_instantiation.write
                      [xself]
                        memory > xMyFrozenSet
                        memory > xd
                        seq > @
                          seq
                            xMyFrozenSet.write
                              []
                                seq > @
                            xd.write (((xMyFrozenSet)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xd)) ((xMyFrozenSet)))
                    xtest_no_tuple_instantiation.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xTuple)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xTuple)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) ((xTuple)) ((xint)))))
                    xtest_generator.write
                      [xself]
                        memory > xg
                        memory > xfoo
                        seq > @
                          seq
                            xfoo.write
                              []
                                seq > @
                                  (((xunsupported)) (42))
                            xg.write (((xfoo)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((((xtype)) ((xg)))) (((xtyping).xGenerator)))
                    xtest_no_generator_instantiation.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xtyping).xGenerator)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xGenerator)) ((xT)) ((xT)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xGenerator)) ((xint)) ((xint)) ((xint)))))
                    xtest_async_generator.write
                      [xself]
                        memory > xns
                        memory > xg
                        seq > @
                          seq
                            xns.write (((xunsupported)))
                            xbogusForceDataize.write (((xexec)) ("async def f():\n    yield 42\n") ((((xglobals)))) ((xns)))
                            xg.write (((((xunsupported)) ((xns)) ("'f'"))))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((((xtype)) ((xg)))) (((xtyping).xAsyncGenerator)))
                    xtest_no_async_generator_instantiation.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xtyping).xAsyncGenerator)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xAsyncGenerator)) ((xT)) ((xT)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xunsupported)) (((xtyping).xAsyncGenerator)) ((xint)) ((xint)))))
                    xtest_subclassing.write
                      [xself]
                        memory > xg
                        memory > xG
                        memory > xI
                        memory > xMMC
                        memory > xMMB
                        memory > xMMA
                        seq > @
                          seq
                            xMMA.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xMMA)))
                            xMMC.write
                              []
                                memory > x__iter__
                                memory > x__getitem__
                                memory > x__delitem__
                                memory > x__setitem__
                                memory > x__len__
                                seq > @
                                  seq
                                    x__getitem__.write
                                      [xself xk]
                                        seq > @
                                          (((xunsupported)) ("None: is there a None literal in the EO language?"))
                                    x__setitem__.write
                                      [xself xk xv]
                                        seq > @
                                    x__delitem__.write
                                      [xself xk]
                                        seq > @
                                    x__iter__.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) ((((xiter)) ((((xunsupported)))))))
                                    x__len__.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) (0))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xMMC)))))) (0))
                            (((xunsupported)) ((((xcallable)) (((xMMC).xupdate)))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xMMC)))) (((xtyping).xMapping)))
                            xMMB.write
                              []
                                memory > x__iter__
                                memory > x__getitem__
                                memory > x__delitem__
                                memory > x__setitem__
                                memory > x__len__
                                seq > @
                                  seq
                                    x__getitem__.write
                                      [xself xk]
                                        seq > @
                                          (((xunsupported)) ("None: is there a None literal in the EO language?"))
                                    x__setitem__.write
                                      [xself xk xv]
                                        seq > @
                                    x__delitem__.write
                                      [xself xk]
                                        seq > @
                                    x__iter__.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) ((((xiter)) ((((xunsupported)))))))
                                    x__len__.write
                                      [xself]
                                        seq > @
                                          (((xunsupported)) (0))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xMMB)))))) (0))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((((xunsupported)) ((xMMB)) ((xstr)) ((xstr)))))))) (0))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((((xunsupported)) ((xMMB)) ((xKT)) ((xVT)))))))) (0))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xdict)) ((xMMA)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xdict)) ((xMMB)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMMA)) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMMB)) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMMC)) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((((xunsupported)) ((xMMB)) ((xKT)) ((xVT)))))) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((((xunsupported)) ((xMMB)) ((xKT)) ((xVT)))))) ((((xcollections).xabc).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMMA)) ((((xcollections).xabc).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMMB)) ((((xcollections).xabc).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMMC)) ((((xcollections).xabc).xMapping)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xunsupported)) ((xMMB)) ((xstr)) ((xstr)))) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xMMC)) ((xMMA)))
                            xI.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xlist)) ((xI)))
                            xG.write
                              []
                                seq > @
                                  unsupported
                            xg.write
                              []
                                seq > @
                                  (((xunsupported)) (0))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) (((xtyping).xGenerator)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) (((xtyping).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) ((((xcollections).xabc).xGenerator)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) ((((xcollections).xabc).xIterable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((((xtype)) ((xg)))) ((xG)))
                    xtest_subclassing_async_generator.write
                      [xself]
                        memory > xns
                        memory > xinstance
                        memory > xG
                        memory > xg
                        seq > @
                          seq
                            xG.write
                              []
                                memory > xasend
                                memory > xathrow
                                seq > @
                                  seq
                                    xasend.write
                                      [xself xvalue]
                                        seq > @
                                    xathrow.write
                                      [xself xtyp xval xtb]
                                        seq > @
                                          (((xunsupported)))
                            xns.write (((xunsupported)))
                            xbogusForceDataize.write (((xexec)) ("'async def g(): yield 0'") ((((xglobals)))) ((xns)))
                            xg.write (((xunsupported)) ((xns)) ("'g'"))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) (((xtyping).xAsyncGenerator)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) (((xtyping).xAsyncIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) ((((xcollections).xabc).xAsyncGenerator)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xG)) ((((xcollections).xabc).xAsyncIterable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((((xtype)) ((xg)))) ((xG)))
                            xinstance.write (((xG)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xinstance)) (((xtyping).xAsyncGenerator)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xinstance)) (((xtyping).xAsyncIterable)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xinstance)) ((((xcollections).xabc).xAsyncGenerator)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xinstance)) ((((xcollections).xabc).xAsyncIterable)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xtype)) ((xg)))) ((xG)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xg)) ((xG)))
                    xtest_subclassing_subclasshook.write
                      [xself]
                        memory > xBase
                        memory > xBar
                        memory > xFoo
                        memory > xC
                        seq > @
                          seq
                            xBase.write
                              []
                                memory > x__subclasshook__
                                seq > @
                                  x__subclasshook__.write
                                    [xcls xother]
                                      seq > @
                                        (((xunsupported)))
                                          (((xother).x__name__).eq "'Foo'").if
                                            (((xunsupported)) (TRUE))
                                            (((xunsupported)) (FALSE))
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xFoo.write
                              []
                                seq > @
                                  unsupported
                            xBar.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xFoo)) ((xBase)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xFoo)) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xBar)) ((xC)))
                    xtest_subclassing_register.write
                      [xself]
                        memory > xD
                        memory > xC
                        memory > xB
                        memory > xM
                        memory > xA
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                                  unsupported
                            xB.write
                              []
                                seq > @
                                  unsupported
                            xC.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xA).xregister)) ((xC)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xC)) ((xA)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xC)) ((xB)))
                            xD.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xB).xregister)) ((xD)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xD)) ((xA)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xD)) ((xB)))
                            xM.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((((xcollections).xabc).xMutableMapping).xregister)) ((xM)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xM)) (((xtyping).xMapping)))
                    xtest_collections_as_base.write
                      [xself]
                        memory > xM
                        memory > xI
                        memory > xB
                        memory > xS
                        seq > @
                          seq
                            xM.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xM)) (((xtyping).xMapping)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xM)) (((xtyping).xIterable)))
                            xS.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xS)) (((xtyping).xMutableSequence)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xS)) (((xtyping).xIterable)))
                            xI.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xI)) (((xtyping).xIterable)))
                            xB.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xA).xregister)) ((xB)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xB)) (((xtyping).xMapping)))
            xOtherABCTests.write
              []
                memory > xtest_contextmanager
                memory > xtest_async_contextmanager
                seq > @
                  seq
                    xtest_contextmanager.write
                      [xself]
                        memory > xmanager
                        memory > xcm
                        seq > @
                          seq
                            xmanager.write
                              []
                                seq > @
                                  (((xunsupported)))
                                    (((xunsupported)) (42))
                            xcm.write (((xmanager)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xcm)) (((xtyping).xContextManager)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) (42) (((xtyping).xContextManager)))
                    xtest_async_contextmanager.write
                      [xself]
                        memory > xNotACM
                        memory > xmanager
                        memory > xcm
                        seq > @
                          (((xunsupported)))
                            xNotACM.write
                              []
                                seq > @
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xACM)))) (((xtyping).xAsyncContextManager)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((((xNotACM)))) (((xtyping).xAsyncContextManager)))
                            xmanager.write
                              []
                                seq > @
                                  (((xunsupported)))
                                    (((xunsupported)) (42))
                            xcm.write (((xmanager)))
                            xbogusForceDataize.write ((((xself).xassertNotIsInstance)) ((xcm)) (((xtyping).xAsyncContextManager)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) (((xtyping).xAsyncContextManager)) ((xint))).x__args__)) ((((xunsupported)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (42) ((((xunsupported)) (((xtyping).xAsyncContextManager)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) (((xtyping).xAsyncContextManager)) ((xint)) ((xstr)))
            xTypeTests.write
              []
                memory > xtest_type_optional
                memory > xtest_type_typevar
                memory > xtest_type_basic
                seq > @
                  seq
                    xtest_type_basic.write
                      [xself]
                        memory > xBasicUser
                        memory > xnew_user
                        memory > xProUser
                        memory > xUser
                        seq > @
                          seq
                            xUser.write
                              []
                                seq > @
                            xBasicUser.write
                              []
                                seq > @
                            xProUser.write
                              []
                                seq > @
                            xnew_user.write
                              [xuser_class]
                                seq > @
                                  (((xunsupported)) ((((xuser_class)))))
                            xbogusForceDataize.write (((xnew_user)) ((xBasicUser)))
                    xtest_type_typevar.write
                      [xself]
                        memory > xU
                        memory > xnew_user
                        memory > xBasicUser
                        memory > xUser
                        memory > xProUser
                        seq > @
                          seq
                            xUser.write
                              []
                                seq > @
                            xBasicUser.write
                              []
                                seq > @
                            xProUser.write
                              []
                                seq > @
                            xU.write (((xunsupported)) ((xTypeVar)) ("'U'") ((xUser)))
                            xnew_user.write
                              [xuser_class]
                                seq > @
                                  (((xunsupported)) ((((xuser_class)))))
                            xbogusForceDataize.write (((xnew_user)) ((xBasicUser)))
                    xtest_type_optional.write
                      [xself]
                        memory > xA
                        memory > xfoo
                        seq > @
                          seq
                            xA.write (((xunsupported)) ((xOptional)) ((((xunsupported)) ((xType)) ((xBaseException)))))
                            xfoo.write
                              [xa]
                                seq > @
                                  (((xunsupported)) ((xa)) ("None: is there a None literal in the EO language?")).if
                                    (((xunsupported)) ("None: is there a None literal in the EO language?"))
                                    (((xunsupported)) ((((xa)))))
                            (((xunsupported)) ((((xisinstance)) ((((xfoo)) ((xKeyboardInterrupt)))) ((xKeyboardInterrupt)))))
                            (((xunsupported)) ((((xunsupported)) ((((xfoo)) ("None: is there a None literal in the EO language?"))) ("None: is there a None literal in the EO language?"))))
            xTestModules.write
              []
                memory > xtest_c_functions
                memory > xfunc_names
                memory > xtest_py_functions
                seq > @
                  seq
                    xfunc_names.write (((xunsupported)) ("'_idfunc'"))
                    xtest_py_functions.write
                      [xself]
                        seq > @
                          (((xunsupported)) ((xfname)) (((xself).xfunc_names)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xgetattr)) ((xpy_typing)) ((xfname))).x__module__)) ("'typing'"))
                    xtest_c_functions.write
                      [xself]
                        seq > @
                          (((xunsupported)))
                            (((xunsupported)) ((xfname)) (((xself).xfunc_names)))
                              xbogusForceDataize.write ((((xself).xassertEqual)) (((((xgetattr)) ((xc_typing)) ((xfname))).x__module__)) ("'_typing'"))
            xNewTypeTests.write
              []
                memory > xtest_pickle
                memory > xtest_missing__name__
                memory > xtest_repr
                memory > xtearDownClass
                memory > xsetUpClass
                memory > xtest_errors
                memory > xcleanup
                memory > xtest_special_attrs
                memory > xtearDown
                memory > xtest_or
                memory > xtest_basic
                seq > @
                  seq
                    xcleanup.write
                      [xself]
                        seq > @
                          (((xunsupported)) ((xf)) ((((xself).xmodule).x_cleanups)))
                            xbogusForceDataize.write (((xf)))
                    xsetUpClass.write
                      [xcls]
                        memory > xUserId
                        seq > @
                          (((xunsupported)))
                            (((xunsupported)) ((((xunsupported)) (((xsys).xmodules)) ("'typing'"))) (((xcls).xmodule)))
                            (((xunsupported)))
                            xUserId.write (((((xcls).xmodule).xNewType)) ("'UserId'") ((xint)))
                            (((xunsupported)) (((xcls).xUserName)) ((((((xcls).xmodule).xNewType)) ((((xcls).x__qualname__).add "'.UserName'")) ((xstr)))))
                    xtearDownClass.write
                      [xcls]
                        seq > @
                          (((xunsupported)))
                            (((xunsupported)))
                            (((xunsupported)) ((xUserId)))
                            (((xunsupported)) (((xcls).xUserName)))
                            (((xunsupported)) ((((xunsupported)) (((xsys).xmodules)) ("'typing'"))) ((xtyping)))
                    xtearDown.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xcleanup)))
                    xtest_basic.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xUserId)) (5))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (((((xself).xUserName)) ("'Joe'"))) ((xstr)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xUserId)) (5)).add 1)) (6))
                    xtest_errors.write
                      [xself]
                        memory > xD
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xUserId)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xD.write
                                []
                                  seq > @
                    xtest_or.write
                      [xself]
                        seq > @
                          (((xunsupported)) ((xcls)) ((((xunsupported)) ((xint)) (((xself).xUserName)))))
                            (((xunsupported)) ((((xunsupported)) (((xself).xsubTest)) ((xcls)))))
                              seq
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserId).or (xcls))) ((((xunsupported)) ((((xself).xmodule).xUnion)) ((xUserId)) ((xcls)))))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xcls).or (xUserId))) ((((xunsupported)) ((((xself).xmodule).xUnion)) ((xcls)) ((xUserId)))))
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xmodule).xget_args)) (((xUserId).or (xcls))))) ((((xunsupported)) ((xUserId)) ((xcls)))))
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((((((xself).xmodule).xget_args)) (((xcls).or (xUserId))))) ((((xunsupported)) ((xcls)) ((xUserId)))))
                    xtest_special_attrs.write
                      [xself]
                        memory > xUserName
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserId).x__name__)) ("'UserId'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserId).x__qualname__)) ("'UserId'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserId).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserId).x__supertype__)) ((xint)))
                            xUserName.write ((xself).xUserName)
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserName).x__name__)) ("'UserName'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserName).x__qualname__)) (((((xself).x__class__).x__qualname__).add "'.UserName'")))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserName).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xUserName).x__supertype__)) ((xstr)))
                    xtest_repr.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xUserId)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((xself).xUserName)))))
                    xtest_pickle.write
                      [xself]
                        memory > xloaded
                        memory > xUserAge
                        memory > xpickled
                        seq > @
                          seq
                            xUserAge.write (((((xself).xmodule).xNewType)) ("'UserAge'") ((xfloat)))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              (((xunsupported)) ((((xunsupported)) (((xself).xsubTest)) ((xproto)))))
                                seq
                                  xpickled.write ((((xpickle).xdumps)) ((xUserId)) ((xproto)))
                                  xloaded.write ((((xpickle).xloads)) ((xpickled)))
                                  xbogusForceDataize.write ((((xself).xassertIs)) ((xloaded)) ((xUserId)))
                                  xpickled.write ((((xpickle).xdumps)) (((xself).xUserName)) ((xproto)))
                                  xloaded.write ((((xpickle).xloads)) ((xpickled)))
                                  xbogusForceDataize.write ((((xself).xassertIs)) ((xloaded)) (((xself).xUserName)))
                                  (((xunsupported)) (((((xself).xassertRaises)) (((xpickle).xPicklingError)))))
                                    xbogusForceDataize.write ((((xpickle).xdumps)) ((xUserAge)) ((xproto)))
                    xtest_missing__name__.write
                      [xself]
                        memory > xcode
                        seq > @
                          seq
                            xcode.write "import typing\nNT = typing.NewType('NT', int)\n"
                            xbogusForceDataize.write (((xexec)) ((xcode)) ((((xunsupported)))))
            xNewTypePythonTests.write
              []
                memory > xmodule
                seq > @
                  xmodule.write (xpy_typing)
            xNewTypeCTests.write
              []
                memory > xmodule
                seq > @
                  (((xunsupported)))
                    xmodule.write (xc_typing)
            xNamedTupleTests.write
              []
                memory > xtest_empty_namedtuple
                memory > xNestedEmployee
                memory > xtest_namedtuple_keyword_usage
                memory > xtest_annotation_usage_with_default
                memory > xtest_namedtuple_pyversion
                memory > xtest_annotation_usage
                memory > xtest_basics
                memory > xtest_copy_and_pickle
                memory > xtest_namedtuple_special_keyword_names
                memory > xtest_multiple_inheritance
                memory > xtest_namedtuple_errors
                memory > xtest_annotation_usage_with_methods
                seq > @
                  seq
                    xNestedEmployee.write
                      []
                        memory > xstr
                        memory > xint
                        seq > @
                          seq
                            (((xunsupported)) ((xstr)))
                            (((xunsupported)) ((xint)))
                    xtest_basics.write
                      [xself]
                        memory > xjim
                        memory > xEmp
                        memory > xjoe
                        seq > @
                          seq
                            xEmp.write (((xNamedTuple)) ("'Emp'") ((((xunsupported)) ((((xunsupported)) ("'name'") ((xstr)))) ((((xunsupported)) ("'id'") ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xEmp)) ((xtuple)))
                            xjoe.write (((xEmp)) ("'Joe'") (42))
                            xjim.write (((xunsupported)) ((xEmp)) ("'Jim'") (1))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xjoe)) ((xEmp)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xjoe)) ((xtuple)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xjoe).xname)) ("'Joe'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xjoe).xid)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xjim).xname)) ("'Jim'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xjim).xid)) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__name__)) ("'Emp'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x_fields)) ((((xunsupported)) ("'name'") ("'id'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__annotations__)) (((((xcollections).xOrderedDict)) ((((xunsupported)) ((((xunsupported)) ("'name'") ((xstr)))) ((((xunsupported)) ("'id'") ((xint)))))))))
                    xtest_namedtuple_pyversion.write
                      [xself]
                        memory > xNotYet
                        seq > @
                          ((((xunsupported)) (((xsys).xversion_info)) ((((xunsupported)) (2)))).less (((xunsupported)) (3) (6))).if
                            seq
                              (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                                (((xunsupported)) ((xNamedTuple)) ("'Name'") ((xint)) ((xstr)))
                              (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                                xNotYet.write
                                  []
                                    memory > xwhatever
                                    seq > @
                                      xwhatever.write 0
                    xtest_annotation_usage.write
                      [xself]
                        memory > xtim
                        seq > @
                          seq
                            xtim.write (((xCoolEmployee)) ("'Tim'") (9000))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xtim)) ((xCoolEmployee)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xtim)) ((xtuple)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xtim).xname)) ("'Tim'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xtim).xcool)) (9000))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xCoolEmployee).x__name__)) ("'CoolEmployee'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xCoolEmployee).x_fields)) ((((xunsupported)) ("'name'") ("'cool'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xCoolEmployee).x__annotations__)) ((((xunsupported)) (((xcollections).xOrderedDict)) ((xstr)) ((xint)))))
                    xtest_annotation_usage_with_default.write
                      [xself]
                        memory > xNonDefaultAfterDefault
                        memory > xcooler_employee
                        memory > xjelle
                        seq > @
                          seq
                            xjelle.write (((xCoolEmployeeWithDefault)) ("'Jelle'"))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xjelle)) ((xCoolEmployeeWithDefault)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xjelle)) ((xtuple)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xjelle).xname)) ("'Jelle'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xjelle).xcool)) (0))
                            xcooler_employee.write (((xCoolEmployeeWithDefault)) ("'Sjoerd'") (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xcooler_employee).xcool)) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xCoolEmployeeWithDefault).x__name__)) ("'CoolEmployeeWithDefault'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xCoolEmployeeWithDefault).x_fields)) ((((xunsupported)) ("'name'") ("'cool'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xCoolEmployeeWithDefault).x__annotations__)) ((((xunsupported)) ((xdict)) ((xstr)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xCoolEmployeeWithDefault).x_field_defaults)) ((((xunsupported)) ((xdict)) (0))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xNonDefaultAfterDefault.write
                                []
                                  memory > xint
                                  seq > @
                                    seq
                                      (((xunsupported)) ((xint)) (3))
                                      (((xunsupported)) ((xint)))
                    xtest_annotation_usage_with_methods.write
                      [xself]
                        memory > xXMethBad2
                        memory > xXMethBad
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((((xXMeth)) (1)).xdouble)))) (2))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xXMeth)) (42)).xx)) ((((xunsupported)) ((((xXMeth)) (42))) (0))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) ((((xXRepr)) (42))))) ("'42 -> 1'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xXRepr)) (1) (2)).add (((xXRepr)) (3)))) (0))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              xXMethBad.write
                                []
                                  memory > x_fields
                                  memory > xint
                                  seq > @
                                    seq
                                      (((xunsupported)) ((xint)))
                                      x_fields.write
                                        [xself]
                                          seq > @
                                            (((xunsupported)) ("'no chance for this'"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                              xXMethBad2.write
                                []
                                  memory > x_source
                                  memory > xint
                                  seq > @
                                    seq
                                      (((xunsupported)) ((xint)))
                                      x_source.write
                                        [xself]
                                          seq > @
                                            (((xunsupported)) ("'no chance for this as well'"))
                    xtest_multiple_inheritance.write
                      [xself]
                        memory > xX
                        memory > xA
                        seq > @
                          seq
                            xA.write
                              []
                                seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xX.write
                                []
                                  memory > xint
                                  seq > @
                                    (((xunsupported)) ((xint)))
                    xtest_namedtuple_keyword_usage.write
                      [xself]
                        memory > xnick
                        memory > xLocalEmployee
                        seq > @
                          seq
                            xLocalEmployee.write (((xunsupported)) ((xNamedTuple)) ("LocalEmployee") ((xstr)) ((xint)))
                            xnick.write (((xLocalEmployee)) ("'Nick'") (25))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xnick)) ((xtuple)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xnick).xname)) ("'Nick'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLocalEmployee).x__name__)) ("'LocalEmployee'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLocalEmployee).x_fields)) ((((xunsupported)) ("'name'") ("'age'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLocalEmployee).x__annotations__)) ((((xunsupported)) ((xdict)) ((xstr)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xNamedTuple)) ("'Name'") ((((xunsupported)) ((((xunsupported)) ("'x'") ((xint)))))) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xNamedTuple)) ("'Name'") (1) ("'a'"))
                    xtest_namedtuple_special_keyword_names.write
                      [xself]
                        memory > xa
                        memory > xNT
                        seq > @
                          seq
                            xNT.write (((xunsupported)) ((xNamedTuple)) ("NT") ((xtype)) ((xobject)) ((xstr)) ((xlist)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xNT).x__name__)) ("'NT'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xNT).x_fields)) ((((xunsupported)) ("'cls'") ("'self'") ("'typename'") ("'fields'"))))
                            xa.write (((xunsupported)) ((xNT)) ((xstr)) (42) ("'foo'") ((((xunsupported)) ((((xunsupported)) ("'bar'") ((xtuple)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).xcls)) ((xstr)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).xself)) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).xtypename)) ("'foo'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).xfields)) ((((xunsupported)) ((((xunsupported)) ("'bar'") ((xtuple)))))))
                    xtest_empty_namedtuple.write
                      [xself]
                        memory > xCNT
                        memory > xNT
                        seq > @
                          seq
                            xNT.write (((xNamedTuple)) ("'NT'"))
                            xCNT.write
                              []
                                seq > @
                            (((xunsupported)) ((xstruct)) ((((xunsupported)) ((xNT)) ((xCNT)))))
                              (((xunsupported)) ((((xunsupported)) (((xself).xsubTest)) ((xstruct)))))
                                seq
                                  xbogusForceDataize.write ((((xself).xassertEqual)) (((xstruct).x_fields)) ((((xunsupported)))))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) (((xstruct).x_field_defaults)) ((((xunsupported)))))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) (((xstruct).x__annotations__)) ((((xunsupported)))))
                                  xbogusForceDataize.write ((((xself).xassertIsInstance)) ((((xstruct)))) ((xstruct)))
                    xtest_namedtuple_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xNamedTuple).x__new__)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xNamedTuple)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xNamedTuple)) ("'Emp'") ((((xunsupported)) ((((xunsupported)) ("'name'") ((xstr)))))) ("None: is there a None literal in the EO language?"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xValueError)))))
                              xbogusForceDataize.write (((xNamedTuple)) ("'Emp'") ((((xunsupported)) ((((xunsupported)) ("'_name'") ((xstr)))))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xNamedTuple)) ("'Emp'") ((xstr)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xNamedTuple)) ("'Emp'") ((((xunsupported)) ((((xunsupported)) ("'name'") ((xstr)))) ((((xunsupported)) ("'id'") ((xint)))))))
                    xtest_copy_and_pickle.write
                      [xself]
                        memory > xjane2
                        memory > xEmp
                        memory > xjane
                        memory > xz
                        seq > @
                          seq
                            (((xunsupported)))
                            xEmp.write (((xNamedTuple)) ("'Emp'") ((((xunsupported)) ((((xunsupported)) ("'name'") ((xstr)))) ((((xunsupported)) ("'cool'") ((xint)))))))
                            (((xunsupported)) ((xcls)) ((((xunsupported)) ((xEmp)) ((xCoolEmployee)) (((xself).xNestedEmployee)))))
                              (((xunsupported)) ((((xunsupported)) (((xself).xsubTest)) ((xcls)))))
                                seq
                                  xjane.write (((xcls)) ("'jane'") (37))
                                  (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                    seq
                                      xz.write ((((xpickle).xdumps)) ((xjane)) ((xproto)))
                                      xjane2.write ((((xpickle).xloads)) ((xz)))
                                      xbogusForceDataize.write ((((xself).xassertEqual)) ((xjane2)) ((xjane)))
                                      xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xjane2)) ((xcls)))
                                  xjane2.write (((xcopy)) ((xjane)))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) ((xjane2)) ((xjane)))
                                  xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xjane2)) ((xcls)))
                                  xjane2.write (((xdeepcopy)) ((xjane)))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) ((xjane2)) ((xjane)))
                                  xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xjane2)) ((xcls)))
            xTypedDictTests.write
              []
                memory > xtest_typeddict_create_errors
                memory > xtest_typeddict_special_keyword_names
                memory > xtest_keys_inheritance
                memory > xtest_optional
                memory > xtest_basics_functional_syntax
                memory > xtest_is_typeddict
                memory > xtest_typeddict_errors
                memory > xtest_total
                memory > xtest_basics_keywords_syntax
                memory > xtest_get_type_hints
                memory > xtest_pickle
                memory > xtest_py36_class_syntax_usage
                seq > @
                  seq
                    xtest_basics_functional_syntax.write
                      [xself]
                        memory > xjim
                        memory > xEmp
                        seq > @
                          seq
                            xEmp.write (((xTypedDict)) ("'Emp'") ((((xunsupported)) ("'name'") ((xstr)) ("'id'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xEmp)) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xEmp)) (((xtyping).xMutableMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xEmp)) ((((xcollections).xabc).xSequence)))
                            xjim.write (((xunsupported)) ((xEmp)) ("'Jim'") (1))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xjim)))) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xjim)) ("'name'"))) ("'Jim'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xjim)) ("'id'"))) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__name__)) ("'Emp'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__bases__)) ((((xunsupported)) ((xdict)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__annotations__)) ((((xunsupported)) ("'name'") ((xstr)) ("'id'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__total__)) (TRUE))
                    xtest_basics_keywords_syntax.write
                      [xself]
                        memory > xjim
                        memory > xEmp
                        seq > @
                          seq
                            xEmp.write (((xunsupported)) ((xTypedDict)) ("'Emp'") ((xstr)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xEmp)) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((xEmp)) (((xtyping).xMutableMapping)))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xEmp)) ((((xcollections).xabc).xSequence)))
                            xjim.write (((xunsupported)) ((xEmp)) ("'Jim'") (1))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xtype)) ((xjim)))) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xjim)) ("'name'"))) ("'Jim'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xjim)) ("'id'"))) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__name__)) ("'Emp'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__bases__)) ((((xunsupported)) ((xdict)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__annotations__)) ((((xunsupported)) ("'name'") ((xstr)) ("'id'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xEmp).x__total__)) (TRUE))
                    xtest_typeddict_special_keyword_names.write
                      [xself]
                        memory > xa
                        memory > xTD
                        seq > @
                          seq
                            xTD.write (((xunsupported)) ((xTypedDict)) ("TD") ((xtype)) ((xobject)) ((xstr)) ((xint)) ((xlist)) ((xdict)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xTD).x__name__)) ("'TD'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xTD).x__annotations__)) ((((xunsupported)) ("'cls'") ((xtype)) ("'self'") ((xobject)) ("'typename'") ((xstr)) ("'_typename'") ((xint)) ("'fields'") ((xlist)) ("'_fields'") ((xdict)))))
                            xa.write (((xunsupported)) ((xTD)) ((xstr)) (42) ("'foo'") (53) ((((xunsupported)) ((((xunsupported)) ("'bar'") ((xtuple)))))) ((((xunsupported)) ("'baz'") ((xset)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xa)) ("'cls'"))) ((xstr)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xa)) ("'self'"))) (42))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xa)) ("'typename'"))) ("'foo'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xa)) ("'_typename'"))) (53))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xa)) ("'fields'"))) ((((xunsupported)) ((((xunsupported)) ("'bar'") ((xtuple)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xa)) ("'_fields'"))) ((((xunsupported)) ("'baz'") ((xset)))))
                    xtest_typeddict_create_errors.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write ((((xTypedDict).x__new__)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xTypedDict)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xTypedDict)) ("'Emp'") ((((xunsupported)) ((((xunsupported)) ("'name'") ((xstr)))))) ("None: is there a None literal in the EO language?"))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypedDict)) ("'Emp'") ((xstr)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypedDict)) ("'Emp'") ((((xunsupported)) ("'name'") ((xstr)) ("'id'") ((xint)))))
                    xtest_typeddict_errors.write
                      [xself]
                        memory > xjim
                        memory > xEmp
                        seq > @
                          seq
                            xEmp.write (((xTypedDict)) ("'Emp'") ((((xunsupported)) ("'name'") ((xstr)) ("'id'") ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xTypedDict).x__module__)) ("'typing'"))
                            xjim.write (((xunsupported)) ((xEmp)) ("'Jim'") (1))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((((xunsupported)))) ((xEmp)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) ((xjim)) ((xEmp)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xdict)) ((xEmp)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypedDict)) ("'Hi'") (1))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xTypedDict)) ("'Hi'") ((((xunsupported)) ((((xunsupported)) ("'x'") ((xint)))) ((((xunsupported)) ("'y'") (1))))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xTypedDict)) ("'Hi'") ((((xunsupported)) ((((xunsupported)) ("'x'") ((xint)))))) ((xint)))
                    xtest_py36_class_syntax_usage.write
                      [xself]
                        memory > xnot_origin
                        memory > xother
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLabelPoint2D).x__name__)) ("'LabelPoint2D'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLabelPoint2D).x__module__)) ((x__name__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLabelPoint2D).x__annotations__)) ((((xunsupported)) ("'x'") ((xint)) ("'y'") ((xint)) ("'label'") ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLabelPoint2D).x__bases__)) ((((xunsupported)) ((xdict)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xLabelPoint2D).x__total__)) (TRUE))
                            xbogusForceDataize.write ((((xself).xassertNotIsSubclass)) ((xLabelPoint2D)) (((xtyping).xSequence)))
                            xnot_origin.write (((xunsupported)) ((xPoint2D)) (0) (1))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xnot_origin)) ("'x'"))) (0))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xnot_origin)) ("'y'"))) (1))
                            xother.write (((xunsupported)) ((xLabelPoint2D)) (0) (1) ("'hi'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xother)) ("'label'"))) ("'hi'"))
                    xtest_pickle.write
                      [xself]
                        memory > xjane
                        memory > xz
                        memory > xjane2
                        memory > xZZ
                        memory > xEmpD
                        memory > xEmpDnew
                        seq > @
                          seq
                            (((xunsupported)))
                            xEmpD.write (((xunsupported)) ((xTypedDict)) ("'EmpD'") ((xstr)) ((xint)))
                            xjane.write (((xEmpD)) ((((xunsupported)) ("'name'") ("'jane'") ("'id'") (37))))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xz.write ((((xpickle).xdumps)) ((xjane)) ((xproto)))
                                xjane2.write ((((xpickle).xloads)) ((xz)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((xjane2)) ((xjane)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((xjane2)) ((((xunsupported)) ("'name'") ("'jane'") ("'id'") (37))))
                                xZZ.write ((((xpickle).xdumps)) ((xEmpD)) ((xproto)))
                                xEmpDnew.write ((((xpickle).xloads)) ((xZZ)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) ((((xEmpDnew)) ((((xunsupported)) ("'name'") ("'jane'") ("'id'") (37))))) ((xjane)))
                    xtest_optional.write
                      [xself]
                        memory > xEmpD
                        seq > @
                          seq
                            xEmpD.write (((xunsupported)) ((xTypedDict)) ("'EmpD'") ((xstr)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) (((xtyping).xOptional)) ((xEmpD)))) ((((xunsupported)) (((xtyping).xUnion)) ("None: is there a None literal in the EO language?") ((xEmpD)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) (((xtyping).xList)) ((xEmpD)))) ((((xunsupported)) (((xtyping).xTuple)) ((xEmpD)))))
                    xtest_total.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xD)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xD)) (1))) ((((xunsupported)) ("'x'") (1))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__total__)) (FALSE))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__required_keys__)) ((((xfrozenset)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xD).x__optional_keys__)) ((((xunsupported)) ("'x'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xOptions)))) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xOptions)) (2))) ((((xunsupported)) ("'log_level'") (2))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xOptions).x__total__)) (FALSE))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xOptions).x__required_keys__)) ((((xfrozenset)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xOptions).x__optional_keys__)) ((((xunsupported)) ("'log_level'") ("'log_path'"))))
                            (((xunsupported)) ((((xPoint2Dor3D).x__required_keys__).eq (((xfrozenset)) ((((xunsupported)) ("'x'") ("'y'")))))))
                            (((xunsupported)) ((((xPoint2Dor3D).x__optional_keys__).eq (((xfrozenset)) ((((xunsupported)) ("'z'")))))))
                    xtest_keys_inheritance.write
                      [xself]
                        memory > xCat
                        memory > xBaseAnimal
                        seq > @
                          seq
                            xBaseAnimal.write
                              []
                                memory > xstr
                                seq > @
                                  (((xunsupported)) ((xstr)))
                            xCat.write
                              []
                                memory > xstr
                                seq > @
                                  (((xunsupported)) ((xstr)))
                            (((xunsupported)) ((((xBaseAnimal).x__required_keys__).eq (((xfrozenset)) ((((xunsupported)) ("'name'")))))))
                            (((xunsupported)) ((((xBaseAnimal).x__optional_keys__).eq (((xfrozenset)) ((((xunsupported))))))))
                            (((xunsupported)) ((((xBaseAnimal).x__annotations__).eq (((xunsupported)) ("'name'") ((xstr))))))
                            (((xunsupported)) ((((xAnimal).x__required_keys__).eq (((xfrozenset)) ((((xunsupported)) ("'name'")))))))
                            (((xunsupported)) ((((xAnimal).x__optional_keys__).eq (((xfrozenset)) ((((xunsupported)) ("'tail'") ("'voice'")))))))
                            (((xunsupported)) ((((xAnimal).x__annotations__).eq (((xunsupported)) ("'name'") ((xstr)) ("'tail'") ((xbool)) ("'voice'") ((xstr))))))
                            (((xunsupported)) ((((xCat).x__required_keys__).eq (((xfrozenset)) ((((xunsupported)) ("'name'") ("'fur_color'")))))))
                            (((xunsupported)) ((((xCat).x__optional_keys__).eq (((xfrozenset)) ((((xunsupported)) ("'tail'") ("'voice'")))))))
                            (((xunsupported)) ((((xCat).x__annotations__).eq (((xunsupported)) ("'fur_color'") ((xstr)) ("'name'") ((xstr)) ("'tail'") ((xbool)) ("'voice'") ((xstr))))))
                    xtest_is_typeddict.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) ((((xunsupported)) ((((xis_typeddict)) ((xPoint2D)))) (TRUE))))
                            (((xunsupported)) ((((xunsupported)) ((((xis_typeddict)) ((((xunsupported)) ((xUnion)) ((xstr)) ((xint)))))) (FALSE))))
                            (((xunsupported)) ((((xunsupported)) ((((xis_typeddict)) ((((xPoint2D)))))) (FALSE))))
                    xtest_get_type_hints.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertEqual)) ((((xget_type_hints)) ((xBar)))) ((((xunsupported)) ("'a'") ((((xunsupported)) (((xtyping).xOptional)) ((xint)))) ("'b'") ((xint)))))
            xIOTests.write
              []
                memory > xtest_binaryio
                memory > xtest_io_submodule
                memory > xtest_io
                memory > xtest_textio
                seq > @
                  seq
                    xtest_io.write
                      [xself]
                        memory > xa
                        memory > xstuff
                        seq > @
                          seq
                            xstuff.write
                              [xa]
                                seq > @
                                  (((xunsupported)) (((((xa).xreadline)))))
                            xa.write (((xunsupported)) (((xstuff).x__annotations__)) ("'a'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).x__parameters__)) ((((xunsupported)) ((xAnyStr)))))
                    xtest_textio.write
                      [xself]
                        memory > xa
                        memory > xstuff
                        seq > @
                          seq
                            xstuff.write
                              [xa]
                                seq > @
                                  (((xunsupported)) (((((xa).xreadline)))))
                            xa.write (((xunsupported)) (((xstuff).x__annotations__)) ("'a'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).x__parameters__)) ((((xunsupported)))))
                    xtest_binaryio.write
                      [xself]
                        memory > xa
                        memory > xstuff
                        seq > @
                          seq
                            xstuff.write
                              [xa]
                                seq > @
                                  (((xunsupported)) (((((xa).xreadline)))))
                            xa.write (((xunsupported)) (((xstuff).x__annotations__)) ("'a'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).x__parameters__)) ((((xunsupported)))))
                    xtest_io_submodule.write
                      [xself]
                        memory > xIO
                        memory > xBinaryIO
                        memory > xTextIO
                        memory > x__all__
                        memory > x__name__
                        seq > @
                          (((xunsupported)) ((((xunsupported)) (((xwarnings).xcatch_warnings)) (TRUE))) ((xw)))
                            seq
                              (((xunsupported)) (((xwarnings).xfilterwarnings)) ("default") ((xDeprecationWarning)))
                              seq
                                (((xunsupported)))
                                (((xunsupported)))
                                (((xunsupported)))
                                (((xunsupported)))
                                (((xunsupported)))
                              xbogusForceDataize.write ((((xself).xassertIs)) ((xIO)) (((xtyping).xIO)))
                              xbogusForceDataize.write ((((xself).xassertIs)) ((xTextIO)) (((xtyping).xTextIO)))
                              xbogusForceDataize.write ((((xself).xassertIs)) ((xBinaryIO)) (((xtyping).xBinaryIO)))
                              xbogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((x__all__)))) ((((xset)) ((((xunsupported)) ("'IO'") ("'TextIO'") ("'BinaryIO'"))))))
                              xbogusForceDataize.write ((((xself).xassertEqual)) ((x__name__)) ("'typing.io'"))
                              xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xw)))) (1))
            xRETests.write
              []
                memory > xtest_cannot_subclass
                memory > xtest_repr
                memory > xtest_re_submodule
                memory > xtest_alias_equality
                memory > xtest_basics
                memory > xtest_errors
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xmat
                        memory > xpat
                        seq > @
                          seq
                            xpat.write ((((xre).xcompile)) ("'[a-z]+'") (((xre).xI)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) (((xpat).x__class__)) ((xPattern)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((((xtype)) ((xpat)))) ((xPattern)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xpat)) ((xPattern)))
                            xmat.write ((((xpat).xsearch)) ("'12345abcde.....'"))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) (((xmat).x__class__)) ((xMatch)))
                            xbogusForceDataize.write ((((xself).xassertIsSubclass)) ((((xtype)) ((xmat)))) ((xMatch)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xmat)) ((xMatch)))
                            (((xunsupported)) ((xPattern)) ((((xunsupported)) ((xUnion)) ((xstr)) ((xbytes)))))
                            (((xunsupported)) ((xMatch)) ((((xunsupported)) ((xUnion)) ((xbytes)) ((xstr)))))
                    xtest_alias_equality.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xPattern)) ((xstr)))) ((((xunsupported)) ((xPattern)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xPattern)) ((xstr)))) ((((xunsupported)) ((xPattern)) ((xbytes)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xPattern)) ((xstr)))) ((((xunsupported)) ((xMatch)) ((xstr)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xPattern)) ((xstr)))) ((xstr)))
                    xtest_errors.write
                      [xself]
                        memory > xm
                        seq > @
                          seq
                            xm.write (((xunsupported)) ((xMatch)) ((((xunsupported)) ((xUnion)) ((xstr)) ((xbytes)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xm)) ((xstr)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (42) ((((xunsupported)) ((xPattern)) ((xstr)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((((xunsupported)) ((xPattern)) ((xbytes)))) ((((xunsupported)) ((xPattern)) ((xstr)))))
                    xtest_repr.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xPattern)))) ("'typing.Pattern'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xPattern)) ((xstr)))))) ("'typing.Pattern[str]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xPattern)) ((xbytes)))))) ("'typing.Pattern[bytes]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xMatch)))) ("'typing.Match'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xMatch)) ((xstr)))))) ("'typing.Match[str]'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xMatch)) ((xbytes)))))) ("'typing.Match[bytes]'"))
                    xtest_re_submodule.write
                      [xself]
                        memory > xPattern
                        memory > x__all__
                        memory > x__name__
                        memory > xMatch
                        seq > @
                          (((xunsupported)) ((((xunsupported)) (((xwarnings).xcatch_warnings)) (TRUE))) ((xw)))
                            seq
                              (((xunsupported)) (((xwarnings).xfilterwarnings)) ("default") ((xDeprecationWarning)))
                              seq
                                (((xunsupported)))
                                (((xunsupported)))
                                (((xunsupported)))
                                (((xunsupported)))
                              xbogusForceDataize.write ((((xself).xassertIs)) ((xMatch)) (((xtyping).xMatch)))
                              xbogusForceDataize.write ((((xself).xassertIs)) ((xPattern)) (((xtyping).xPattern)))
                              xbogusForceDataize.write ((((xself).xassertEqual)) ((((xset)) ((x__all__)))) ((((xset)) ((((xunsupported)) ("'Match'") ("'Pattern'"))))))
                              xbogusForceDataize.write ((((xself).xassertEqual)) ((x__name__)) ("'typing.re'"))
                              xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((xw)))) (1))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xex)))
                              xA.write
                                []
                                  seq > @
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xstr)) (((xex).xexception)))) ("type 're.Match' is not an acceptable base type"))
            xAnnotatedTests.write
              []
                memory > xtest_cannot_subclass
                memory > xtest_pickle
                memory > xtest_annotated_in_other_types
                memory > xtest_annotated_mro
                memory > xtest_cannot_instantiate_forward
                memory > xtest_instantiate_generic
                memory > xtest_flatten
                memory > xtest_specialize
                memory > xtest_cannot_getattr_typevar
                memory > xtest_repr
                memory > xtest_cannot_check_instance
                memory > xtest_cannot_check_subclass
                memory > xtest_instantiate
                memory > xtest_subst
                memory > xtest_attr_passthrough
                memory > xtest_hash_eq
                memory > xtest_cannot_instantiate_type_var
                seq > @
                  seq
                    xtest_repr.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))))) ("typing.Annotated[int, 4, 5]"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xList)) ((xint)))) (4) (5))))) ("typing.Annotated[typing.List[int], 4, 5]"))
                    xtest_flatten.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            xA.write (((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4))) (5))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xA)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__metadata__)) ((((xunsupported)) (4) (5))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xA).x__origin__)) ((xint)))
                    xtest_specialize.write
                      [xself]
                        memory > xL
                        memory > xLI
                        seq > @
                          seq
                            xL.write (((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xList)) ((xT)))) ("my decoration"))
                            xLI.write (((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xList)) ((xint)))) ("my decoration"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xL)) ((xint)))) ((((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xList)) ((xint)))) ("my decoration"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xL)) ((xint))).x__metadata__)) ((((xunsupported)) ("my decoration"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((((xunsupported)) ((xL)) ((xint))).x__origin__)) ((((xunsupported)) ((xList)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xLI)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xL)) ((xint)) ((xfloat)))
                    xtest_hash_eq.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xunsupported)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))))))) (1))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xint)) (5) (4))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xstr)) (4) (5))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4))) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (4))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xT)) (4) (5))))) ((((xunsupported)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xT)) (4) (5))))))
                    xtest_instantiate.write
                      [xself]
                        memory > xC
                        memory > xc
                        memory > xA
                        memory > xa
                        seq > @
                          seq
                            xC.write
                              []
                                memory > x__eq__
                                memory > x__init__
                                memory > xclassvar
                                seq > @
                                  seq
                                    xclassvar.write 4
                                    x__init__.write
                                      [xself xx]
                                        seq > @
                                          (((xunsupported)) (((xself).xx)) ((xx)))
                                    x__eq__.write
                                      [xself xother]
                                        seq > @
                                          seq
                                            ((((xisinstance)) ((xother)) ((xC))).not).if
                                              (((xunsupported)) ((xNotImplemented)))
                                            (((xunsupported)) ((((xother).xx).eq ((xself).xx))))
                            xA.write (((xunsupported)) ((xAnnotated)) ((xC)) ("a decoration"))
                            xa.write (((xA)) (5))
                            xc.write (((xC)) (5))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xa)) ((xc)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).xx)) (((xc).xx)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xa).xclassvar)) (((xc).xclassvar)))
                    xtest_instantiate_generic.write
                      [xself]
                        memory > xMyCount
                        seq > @
                          seq
                            xMyCount.write (((xunsupported)) ((xAnnotated)) ((((xunsupported)) (((xtyping).xCounter)) ((xT)))) ("my decoration"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xMyCount)) ((((xunsupported)) (4) (4) (5))))) ((((xunsupported)) (4) (2) (5) (1))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((((xunsupported)) ((xMyCount)) ((xint)))) ((((xunsupported)) (4) (4) (5))))) ((((xunsupported)) (4) (2) (5) (1))))
                    xtest_cannot_instantiate_forward.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            xA.write (((xunsupported)) ((xAnnotated)) ("int") ((((xunsupported)) (5) (6))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xA)) (5))
                    xtest_cannot_instantiate_type_var.write
                      [xself]
                        memory > xA
                        seq > @
                          seq
                            xA.write (((xunsupported)) ((xAnnotated)) ((xT)) ((((xunsupported)) (5) (6))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xA)) (5))
                    xtest_cannot_getattr_typevar.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xAttributeError)))))
                            unsupported
                    xtest_attr_passthrough.write
                      [xself]
                        memory > xA
                        memory > xC
                        seq > @
                          seq
                            xC.write
                              []
                                memory > xclassvar
                                seq > @
                                  xclassvar.write 4
                            xA.write (((xunsupported)) ((xAnnotated)) ((xC)) ("a decoration"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xA).xclassvar)) (4))
                            (((xunsupported)) (((xA).xx)) (5))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC).xx)) (5))
                    xtest_hash_eq.write
                      [xself]
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xlen)) ((((xunsupported)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))))))) (1))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xint)) (5) (4))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xstr)) (4) (5))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4))) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (4))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xT)) (4) (5))))) ((((xunsupported)) ((((xunsupported)) ((xAnnotated)) ((xint)) (4) (5))) ((((xunsupported)) ((xAnnotated)) ((xT)) (4) (5))))))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xC
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("Cannot subclass .*Annotated"))))
                            xC.write
                              []
                                seq > @
                    xtest_cannot_check_instance.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xisinstance)) (5) ((((xunsupported)) ((xAnnotated)) ((xint)) ("positive"))))
                    xtest_cannot_check_subclass.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xissubclass)) ((xint)) ((((xunsupported)) ((xAnnotated)) ((xint)) ("positive"))))
                    xtest_pickle.write
                      [xself]
                        memory > xsamples
                        memory > xz
                        memory > x_Annotated_test_G
                        memory > xG
                        memory > xrestored
                        memory > xx
                        memory > xpickled
                        seq > @
                          seq
                            xsamples.write (((xunsupported)) (((xtyping).xAny)) ((((xunsupported)) (((xtyping).xUnion)) ((xint)) ((xstr)))) ((((xunsupported)) (((xtyping).xOptional)) ((xstr)))) ((((xunsupported)) ((xTuple)) ((xint)) (""))) ((((xunsupported)) (((xtyping).xCallable)) ((((xunsupported)) ((xstr)))) ((xbytes)))))
                            (((xunsupported)) ((xt)) ((xsamples)))
                              seq
                                xx.write (((xunsupported)) ((xAnnotated)) ((xt)) ("a"))
                                (((xunsupported)) ((xprot)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                  (((xunsupported)) ((((xunsupported)) (((xself).xsubTest)) ((xprot)) ((xt)))))
                                    seq
                                      xpickled.write ((((xpickle).xdumps)) ((xx)) ((xprot)))
                                      xrestored.write ((((xpickle).xloads)) ((xpickled)))
                                      xbogusForceDataize.write ((((xself).xassertEqual)) ((xx)) ((xrestored)))
                            (((xunsupported)))
                            x_Annotated_test_G.write
                              []
                                memory > xx
                                seq > @
                                  xx.write 1
                            xG.write (((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((x_Annotated_test_G)) ((xint)))) ("A decoration"))
                            (((xunsupported)) (((xG).xfoo)) (42))
                            (((xunsupported)) (((xG).xbar)) ("'abc'"))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xz.write ((((xpickle).xdumps)) ((xG)) ((xproto)))
                                xx.write ((((xpickle).xloads)) ((xz)))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xfoo)) (42))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xbar)) ("'abc'"))
                                xbogusForceDataize.write ((((xself).xassertEqual)) (((xx).xx)) (1))
                    xtest_subst.write
                      [xself]
                        memory > xD
                        memory > xdec
                        memory > xL
                        memory > xLI
                        memory > xS
                        memory > xIt
                        memory > xdec2
                        seq > @
                          seq
                            xdec.write "a decoration"
                            xdec2.write "another decoration"
                            xS.write (((xunsupported)) ((xAnnotated)) ((xT)) ((xdec2)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xS)) ((xint)))) ((((xunsupported)) ((xAnnotated)) ((xint)) ((xdec2)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xS)) ((((xunsupported)) ((xAnnotated)) ((xint)) ((xdec)))))) ((((xunsupported)) ((xAnnotated)) ((xint)) ((xdec)) ((xdec2)))))
                            xL.write (((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xList)) ((xT)))) ((xdec)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xL)) ((xint)))) ((((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xList)) ((xint)))) ((xdec)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xL)) ((xint)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xS)) ((((xunsupported)) ((xL)) ((xint)))))) ((((xunsupported)) ((xAnnotated)) ((((xunsupported)) ((xList)) ((xint)))) ((xdec)) ((xdec2)))))
                            xD.write (((xunsupported)) ((xAnnotated)) ((((xunsupported)) (((xtyping).xDict)) ((xKT)) ((xVT)))) ((xdec)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xD)) ((xstr)) ((xint)))) ((((xunsupported)) ((xAnnotated)) ((((xunsupported)) (((xtyping).xDict)) ((xstr)) ((xint)))) ((xdec)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xD)) ((xint)))
                            xIt.write (((xunsupported)) ((xAnnotated)) ((xint)) ((xdec)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xIt)) ("None: is there a None literal in the EO language?"))
                            xLI.write (((xunsupported)) ((xL)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              (((xunsupported)) ((xLI)) ("None: is there a None literal in the EO language?"))
                    xtest_annotated_in_other_types.write
                      [xself]
                        memory > xX
                        seq > @
                          seq
                            xX.write (((xunsupported)) ((xList)) ((((xunsupported)) ((xAnnotated)) ((xT)) (5))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xunsupported)) ((xX)) ((xint)))) ((((xunsupported)) ((xList)) ((((xunsupported)) ((xAnnotated)) ((xint)) (5))))))
                    xtest_annotated_mro.write
                      [xself]
                        memory > xX
                        seq > @
                          seq
                            xX.write
                              []
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xX).x__mro__)) ((((xunsupported)) ((xX)) ((xint)) ((xobject)))) ("Annotated should be transparent."))
            xTypeAliasTests.write
              []
                memory > xtest_repr
                memory > xtest_cannot_instantiate
                memory > xtest_canonical_usage_with_variable_annotation
                memory > xtest_cannot_subscript
                memory > xtest_canonical_usage_with_type_comment
                memory > xtest_no_issubclass
                memory > xtest_cannot_subclass
                memory > xtest_no_isinstance
                seq > @
                  seq
                    xtest_canonical_usage_with_variable_annotation.write
                      [xself]
                        memory > xTypeAlias
                        seq > @
                          (((xunsupported)) ((xTypeAlias)) ((xEmployee)))
                    xtest_canonical_usage_with_type_comment.write
                      [xself]
                        memory > xAlias
                        seq > @
                          xAlias.write (xEmployee)
                    xtest_cannot_instantiate.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xTypeAlias)))
                    xtest_no_isinstance.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            xbogusForceDataize.write (((xisinstance)) (42) ((xTypeAlias)))
                    xtest_no_issubclass.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xEmployee)) ((xTypeAlias)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xTypeAlias)) ((xEmployee)))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                    xtest_repr.write
                      [xself]
                        seq > @
                          xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xTypeAlias)))) ("'typing.TypeAlias'"))
                    xtest_cannot_subscript.write
                      [xself]
                        seq > @
                          (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                            (((xunsupported)) ((xTypeAlias)) ((xint)))
            xParamSpecTests.write
              []
                memory > xtest_basic_plain
                memory > xtest_valid_uses
                memory > xtest_user_generics
                memory > xtest_no_paramspec_in__parameters__
                memory > xtest_args_kwargs
                memory > xtest_paramspec_in_nested_generics
                memory > xtest_multiple_paramspecs_in_user_generics
                seq > @
                  seq
                    xtest_basic_plain.write
                      [xself]
                        memory > xP
                        seq > @
                          seq
                            xP.write (((xParamSpec)) ("'P'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xP)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) ((xP)) ((xParamSpec)))
                    xtest_valid_uses.write
                      [xself]
                        memory > xC3
                        memory > xC4
                        memory > xT
                        memory > xP
                        memory > xC1
                        memory > xC2
                        seq > @
                          seq
                            xP.write (((xParamSpec)) ("'P'"))
                            xT.write (((xTypeVar)) ("'T'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((xP)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC1).x__args__)) ((((xunsupported)) ((xP)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC1).x__parameters__)) ((((xunsupported)) ((xP)))))
                            xC2.write (((xunsupported)) ((xCallable)) ((xP)) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC2).x__args__)) ((((xunsupported)) ((xP)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC2).x__parameters__)) ((((xunsupported)) ((xP)) ((xT)))))
                            xC3.write (((xunsupported)) ((((xcollections).xabc).xCallable)) ((xP)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC3).x__args__)) ((((xunsupported)) ((xP)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC3).x__parameters__)) ((((xunsupported)) ((xP)))))
                            xC4.write (((xunsupported)) ((((xcollections).xabc).xCallable)) ((xP)) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC4).x__args__)) ((((xunsupported)) ((xP)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC4).x__parameters__)) ((((xunsupported)) ((xP)) ((xT)))))
                    xtest_args_kwargs.write
                      [xself]
                        memory > xP
                        seq > @
                          seq
                            xP.write (((xParamSpec)) ("'P'"))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'args'") ((((xdir)) ((xP)))))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'kwargs'") ((((xdir)) ((xP)))))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (((xP).xargs)) ((xParamSpecArgs)))
                            xbogusForceDataize.write ((((xself).xassertIsInstance)) (((xP).xkwargs)) ((xParamSpecKwargs)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xP).xargs).x__origin__)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertIs)) ((((xP).xkwargs).x__origin__)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((xP).xargs)))) ("P.args"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) (((xP).xkwargs)))) ("P.kwargs"))
                    xtest_user_generics.write
                      [xself]
                        memory > xG6
                        memory > xG2
                        memory > xZ
                        memory > xT
                        memory > xG5
                        memory > xP
                        memory > xG1
                        memory > xG7
                        memory > xX
                        memory > xG4
                        memory > xG3
                        memory > xP_2
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("T"))
                            xP.write (((xParamSpec)) ("P"))
                            xP_2.write (((xParamSpec)) ("P_2"))
                            xX.write
                              []
                                memory > xT
                                seq > @
                                  seq
                                    (((xunsupported)) ((((xunsupported)) ((xCallable)) ((xP)) ((xint)))))
                                    (((xunsupported)) ((xT)))
                            xG1.write (((xunsupported)) ((xX)) ((xint)) ((xP_2)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG1).x__args__)) ((((xunsupported)) ((xint)) ((xP_2)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG1).x__parameters__)) ((((xunsupported)) ((xP_2)))))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("few arguments for"))))
                              (((xunsupported)) ((xX)) ((xint)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("many arguments for"))))
                              (((xunsupported)) ((xX)) ((xint)) ((xP_2)) ((xstr)))
                            xG2.write (((xunsupported)) ((xX)) ((xint)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP_2)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG2).x__args__)) ((((xunsupported)) ((xint)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP_2)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG2).x__parameters__)) ((((xunsupported)) ((xP_2)))))
                            xG3.write (((xunsupported)) ((xX)) ((xint)) ((((xunsupported)) ((xint)) ((xbool)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG3).x__args__)) ((((xunsupported)) ((xint)) ((((xunsupported)) ((xint)) ((xbool)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG3).x__parameters__)) ((((xunsupported)))))
                            xG4.write (((xunsupported)) ((xX)) ((xint)) (""))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG4).x__args__)) ((((xunsupported)) ((xint)) ((xEllipsis)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG4).x__parameters__)) ((((xunsupported)))))
                            xZ.write
                              []
                                seq > @
                                  (((xunsupported)) ((((xunsupported)) ((xCallable)) ((xP)) ((xint)))))
                            xG5.write (((xunsupported)) ((xZ)) ((((xunsupported)) ((xint)) ((xstr)) ((xbool)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG5).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xint)) ((xstr)) ((xbool)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG5).x__parameters__)) ((((xunsupported)))))
                            xG6.write (((xunsupported)) ((xZ)) ((xint)) ((xstr)) ((xbool)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG6).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xint)) ((xstr)) ((xbool)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG6).x__parameters__)) ((((xunsupported)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG5).x__args__)) (((xG6).x__args__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG5).x__origin__)) (((xG6).x__origin__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG5).x__parameters__)) (((xG6).x__parameters__)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((xG5)) ((xG6)))
                            xG7.write (((xunsupported)) ((xZ)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG7).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xint)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG7).x__parameters__)) ((((xunsupported)))))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("many arguments for"))))
                              (((xunsupported)) ((xZ)) ((((xunsupported)) ((xint)) ((xstr)))) ((xbool)))
                            (((xunsupported)) (((((xself).xassertRaisesRegex)) ((xTypeError)) ("many arguments for"))))
                              (((xunsupported)) ((xZ)) ((xP_2)) ((xbool)))
                    xtest_multiple_paramspecs_in_user_generics.write
                      [xself]
                        memory > xG2
                        memory > xP
                        memory > xG1
                        memory > xX
                        memory > xP2
                        seq > @
                          seq
                            xP.write (((xParamSpec)) ("P"))
                            xP2.write (((xParamSpec)) ("P2"))
                            xX.write
                              []
                                seq > @
                                  seq
                                    (((xunsupported)) ((((xunsupported)) ((xCallable)) ((xP)) ((xint)))))
                                    (((xunsupported)) ((((xunsupported)) ((xCallable)) ((xP2)) ((xstr)))))
                            xG1.write (((xunsupported)) ((xX)) ((((xunsupported)) ((xint)) ((xstr)))) ((((xunsupported)) ((xbytes)))))
                            xG2.write (((xunsupported)) ((xX)) ((((xunsupported)) ((xint)))) ((((xunsupported)) ((xstr)) ((xbytes)))))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xG1)) ((xG2)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG1).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xint)) ((xstr)))) ((((xunsupported)) ((xbytes)))))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG2).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xint)))) ((((xunsupported)) ((xstr)) ((xbytes)))))))
                    xtest_no_paramspec_in__parameters__.write
                      [xself]
                        memory > xT
                        memory > xP
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("T"))
                            xP.write (((xParamSpec)) ("P"))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ((xP)) (((((xunsupported)) ((xList)) ((xP))).x__parameters__)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xT)) (((((xunsupported)) ((xTuple)) ((xT)) ((xP))).x__parameters__)))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ((xP)) (((((xunsupported)) ((xlist)) ((xP))).x__parameters__)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xT)) (((((xunsupported)) ((xtuple)) ((xT)) ((xP))).x__parameters__)))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ((xP)) ((((((xunsupported)) ((xlist)) ((xP))).or (xint)).x__parameters__)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ((xT)) ((((((xunsupported)) ((xtuple)) ((xT)) ((xP))).or (xint)).x__parameters__)))
                    xtest_paramspec_in_nested_generics.write
                      [xself]
                        memory > xG2
                        memory > xT
                        memory > xP
                        memory > xG1
                        memory > xC1
                        memory > xG3
                        seq > @
                          seq
                            xT.write (((xTypeVar)) ("T"))
                            xP.write (((xParamSpec)) ("P"))
                            xC1.write (((xunsupported)) ((xCallable)) ((xP)) ((xT)))
                            xG1.write (((xunsupported)) ((xList)) ((xC1)))
                            xG2.write (((xunsupported)) ((xlist)) ((xC1)))
                            xG3.write ((((xunsupported)) ((xlist)) ((xC1))).or (xint))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG1).x__parameters__)) ((((xunsupported)) ((xP)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG2).x__parameters__)) ((((xunsupported)) ((xP)) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xG3).x__parameters__)) ((((xunsupported)) ((xP)) ((xT)))))
            xConcatenateTests.write
              []
                memory > xtest_valid_uses
                memory > xtest_basics
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xMyClass
                        memory > xP
                        memory > xc
                        seq > @
                          seq
                            xP.write (((xParamSpec)) ("'P'"))
                            xMyClass.write
                              []
                                seq > @
                                  unsupported
                            xc.write (((xunsupported)) ((xConcatenate)) ((xMyClass)) ((xP)))
                            xbogusForceDataize.write ((((xself).xassertNotEqual)) ((xc)) ((xConcatenate)))
                    xtest_valid_uses.write
                      [xself]
                        memory > xC3
                        memory > xC4
                        memory > xT
                        memory > xP
                        memory > xC1
                        memory > xC2
                        seq > @
                          seq
                            xP.write (((xParamSpec)) ("'P'"))
                            xT.write (((xTypeVar)) ("'T'"))
                            xC1.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC1).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC1).x__parameters__)) ((((xunsupported)) ((xP)))))
                            xC2.write (((xunsupported)) ((xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xT)) ((xP)))) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC2).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xT)) ((xP)))) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC2).x__parameters__)) ((((xunsupported)) ((xT)) ((xP)))))
                            xC3.write (((xunsupported)) ((((xcollections).xabc).xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP)))) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC3).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xP)))) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC3).x__parameters__)) ((((xunsupported)) ((xP)))))
                            xC4.write (((xunsupported)) ((((xcollections).xabc).xCallable)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xT)) ((xP)))) ((xT)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC4).x__args__)) ((((xunsupported)) ((((xunsupported)) ((xConcatenate)) ((xint)) ((xT)) ((xP)))) ((xT)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xC4).x__parameters__)) ((((xunsupported)) ((xT)) ((xP)))))
            xTypeGuardTests.write
              []
                memory > xtest_cannot_init
                memory > xtest_repr
                memory > xtest_basics
                memory > xtest_cannot_subclass
                memory > xtest_no_isinstance
                seq > @
                  seq
                    xtest_basics.write
                      [xself]
                        memory > xfoo
                        seq > @
                          seq
                            (((xunsupported)) ((xTypeGuard)) ((xint)))
                            xfoo.write
                              [xarg]
                                seq > @
                                  unsupported
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xgth)) ((xfoo)))) ((((xunsupported)) ("'return'") ((((xunsupported)) ((xTypeGuard)) ((xint)))))))
                    xtest_repr.write
                      [xself]
                        memory > xcv
                        seq > @
                          seq
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xTypeGuard)))) ("'typing.TypeGuard'"))
                            xcv.write (((xunsupported)) ((xTypeGuard)) ((xint)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) ("'typing.TypeGuard[int]'"))
                            xcv.write (((xunsupported)) ((xTypeGuard)) ((xEmployee)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) (("'typing.TypeGuard[%s.Employee]'".mod (x__name__))))
                            xcv.write (((xunsupported)) ((xTypeGuard)) ((((xunsupported)) ((xtuple)) ((xint)))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xrepr)) ((xcv)))) ("'typing.TypeGuard[tuple[int]]'"))
                    xtest_cannot_subclass.write
                      [xself]
                        memory > xC
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xC.write
                                []
                                  seq > @
                    xtest_cannot_init.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xTypeGuard)))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((xTypeGuard)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((((xtype)) ((((xunsupported)) ((xTypeGuard)) ((((xunsupported)) ((xOptional)) ((xint)))))))))
                    xtest_no_isinstance.write
                      [xself]
                        seq > @
                          seq
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xisinstance)) (1) ((((xunsupported)) ((xTypeGuard)) ((xint)))))
                            (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))))
                              xbogusForceDataize.write (((xissubclass)) ((xint)) ((xTypeGuard)))
            xSpecialAttrsP.write ((((xtyping).xParamSpec)) ("'SpecialAttrsP'"))
            xSpecialAttrsT.write ((((xtyping).xTypeVar)) ("'SpecialAttrsT'") ((xint)) ((xfloat)) ((xcomplex)))
            xSpecialAttrsTests.write
              []
                memory > xtest_special_attrs
                memory > xTypeName
                memory > xtest_special_attrs2
                seq > @
                  seq
                    xtest_special_attrs.write
                      [xself]
                        memory > xs
                        memory > xcls_to_check
                        memory > xloaded
                        seq > @
                          seq
                            xcls_to_check.write (((xunsupported)) (((xtyping).xAbstractSet)) ("'AbstractSet'") (((xtyping).xAsyncContextManager)) ("'AsyncContextManager'") (((xtyping).xAsyncGenerator)) ("'AsyncGenerator'") (((xtyping).xAsyncIterable)) ("'AsyncIterable'") (((xtyping).xAsyncIterator)) ("'AsyncIterator'") (((xtyping).xAwaitable)) ("'Awaitable'") (((xtyping).xByteString)) ("'ByteString'") (((xtyping).xCallable)) ("'Callable'") (((xtyping).xChainMap)) ("'ChainMap'") (((xtyping).xCollection)) ("'Collection'") (((xtyping).xContainer)) ("'Container'") (((xtyping).xContextManager)) ("'ContextManager'") (((xtyping).xCoroutine)) ("'Coroutine'") (((xtyping).xCounter)) ("'Counter'") (((xtyping).xDefaultDict)) ("'DefaultDict'") (((xtyping).xDeque)) ("'Deque'") (((xtyping).xDict)) ("'Dict'") (((xtyping).xFrozenSet)) ("'FrozenSet'") (((xtyping).xGenerator)) ("'Generator'") (((xtyping).xHashable)) ("'Hashable'") (((xtyping).xItemsView)) ("'ItemsView'") (((xtyping).xIterable)) ("'Iterable'") (((xtyping).xIterator)) ("'Iterator'") (((xtyping).xKeysView)) ("'KeysView'") (((xtyping).xList)) ("'List'") (((xtyping).xMapping)) ("'Mapping'") (((xtyping).xMappingView)) ("'MappingView'") (((xtyping).xMutableMapping)) ("'MutableMapping'") (((xtyping).xMutableSequence)) ("'MutableSequence'") (((xtyping).xMutableSet)) ("'MutableSet'") (((xtyping).xOrderedDict)) ("'OrderedDict'") (((xtyping).xReversible)) ("'Reversible'") (((xtyping).xSequence)) ("'Sequence'") (((xtyping).xSet)) ("'Set'") (((xtyping).xSized)) ("'Sized'") (((xtyping).xTuple)) ("'Tuple'") (((xtyping).xType)) ("'Type'") (((xtyping).xValuesView)) ("'ValuesView'") ((((xunsupported)) (((xtyping).xAbstractSet)) ((xAny)))) ("'AbstractSet'") ((((xunsupported)) (((xtyping).xAsyncContextManager)) ((xAny)))) ("'AsyncContextManager'") ((((xunsupported)) (((xtyping).xAsyncGenerator)) ((xAny)) ((xAny)))) ("'AsyncGenerator'") ((((xunsupported)) (((xtyping).xAsyncIterable)) ((xAny)))) ("'AsyncIterable'") ((((xunsupported)) (((xtyping).xAsyncIterator)) ((xAny)))) ("'AsyncIterator'") ((((xunsupported)) (((xtyping).xAwaitable)) ((xAny)))) ("'Awaitable'") ((((xunsupported)) (((xtyping).xCallable)) ((((xunsupported)))) ((xAny)))) ("'Callable'") ((((xunsupported)) (((xtyping).xCallable)) ("") ((xAny)))) ("'Callable'") ((((xunsupported)) (((xtyping).xChainMap)) ((xAny)) ((xAny)))) ("'ChainMap'") ((((xunsupported)) (((xtyping).xCollection)) ((xAny)))) ("'Collection'") ((((xunsupported)) (((xtyping).xContainer)) ((xAny)))) ("'Container'") ((((xunsupported)) (((xtyping).xContextManager)) ((xAny)))) ("'ContextManager'") ((((xunsupported)) (((xtyping).xCoroutine)) ((xAny)) ((xAny)) ((xAny)))) ("'Coroutine'") ((((xunsupported)) (((xtyping).xCounter)) ((xAny)))) ("'Counter'") ((((xunsupported)) (((xtyping).xDefaultDict)) ((xAny)) ((xAny)))) ("'DefaultDict'") ((((xunsupported)) (((xtyping).xDeque)) ((xAny)))) ("'Deque'") ((((xunsupported)) (((xtyping).xDict)) ((xAny)) ((xAny)))) ("'Dict'") ((((xunsupported)) (((xtyping).xFrozenSet)) ((xAny)))) ("'FrozenSet'") ((((xunsupported)) (((xtyping).xGenerator)) ((xAny)) ((xAny)) ((xAny)))) ("'Generator'") ((((xunsupported)) (((xtyping).xItemsView)) ((xAny)) ((xAny)))) ("'ItemsView'") ((((xunsupported)) (((xtyping).xIterable)) ((xAny)))) ("'Iterable'") ((((xunsupported)) (((xtyping).xIterator)) ((xAny)))) ("'Iterator'") ((((xunsupported)) (((xtyping).xKeysView)) ((xAny)))) ("'KeysView'") ((((xunsupported)) (((xtyping).xList)) ((xAny)))) ("'List'") ((((xunsupported)) (((xtyping).xMapping)) ((xAny)) ((xAny)))) ("'Mapping'") ((((xunsupported)) (((xtyping).xMappingView)) ((xAny)))) ("'MappingView'") ((((xunsupported)) (((xtyping).xMutableMapping)) ((xAny)) ((xAny)))) ("'MutableMapping'") ((((xunsupported)) (((xtyping).xMutableSequence)) ((xAny)))) ("'MutableSequence'") ((((xunsupported)) (((xtyping).xMutableSet)) ((xAny)))) ("'MutableSet'") ((((xunsupported)) (((xtyping).xOrderedDict)) ((xAny)) ((xAny)))) ("'OrderedDict'") ((((xunsupported)) (((xtyping).xReversible)) ((xAny)))) ("'Reversible'") ((((xunsupported)) (((xtyping).xSequence)) ((xAny)))) ("'Sequence'") ((((xunsupported)) (((xtyping).xSet)) ((xAny)))) ("'Set'") ((((xunsupported)) (((xtyping).xTuple)) ((xAny)))) ("'Tuple'") ((((xunsupported)) (((xtyping).xTuple)) ((xAny)) (""))) ("'Tuple'") ((((xunsupported)) (((xtyping).xType)) ((xAny)))) ("'Type'") ((((xunsupported)) (((xtyping).xValuesView)) ((xAny)))) ("'ValuesView'") (((xtyping).xAnnotated)) ("'Annotated'") (((xtyping).xAny)) ("'Any'") (((xtyping).xClassVar)) ("'ClassVar'") (((xtyping).xConcatenate)) ("'Concatenate'") (((xtyping).xFinal)) ("'Final'") (((xtyping).xForwardRef)) ("'ForwardRef'") (((xtyping).xLiteral)) ("'Literal'") (((xtyping).xNewType)) ("'NewType'") (((xtyping).xNoReturn)) ("'NoReturn'") (((xtyping).xOptional)) ("'Optional'") (((xtyping).xTypeAlias)) ("'TypeAlias'") (((xtyping).xTypeGuard)) ("'TypeGuard'") (((xtyping).xTypeVar)) ("'TypeVar'") (((xtyping).xUnion)) ("'Union'") ((((xunsupported)) (((xtyping).xAnnotated)) ((xAny)) ("Annotation"))) ("'Annotated'") ((((xunsupported)) (((xtyping).xClassVar)) ((xAny)))) ("'ClassVar'") ((((xunsupported)) (((xtyping).xConcatenate)) ((xAny)) ((xSpecialAttrsP)))) ("'Concatenate'") ((((xunsupported)) (((xtyping).xFinal)) ((xAny)))) ("'Final'") ((((xunsupported)) (((xtyping).xLiteral)) ((xAny)))) ("'Literal'") ((((xunsupported)) (((xtyping).xLiteral)) (1) (2))) ("'Literal'") ((((xunsupported)) (((xtyping).xLiteral)) (TRUE) (2))) ("'Literal'") ((((xunsupported)) (((xtyping).xOptional)) ((xAny)))) ("'Optional'") ((((xunsupported)) (((xtyping).xTypeGuard)) ((xAny)))) ("'TypeGuard'") ((((xunsupported)) (((xtyping).xUnion)) ((xAny)))) ("'Any'") ((((xunsupported)) (((xtyping).xUnion)) ((xint)) ((xfloat)))) ("'Union'"))
                            (((xunsupported)) ((((xunsupported)) ((xcls)) ((xname)))) (((((xcls_to_check).xitems)))))
                              (((xunsupported)) ((((xunsupported)) (((xself).xsubTest)) ((xcls)))))
                                seq
                                  xbogusForceDataize.write ((((xself).xassertEqual)) (((xcls).x__name__)) ((xname)) ((((xstr)) ((xcls)))))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) (((xcls).x__qualname__)) ((xname)) ((((xstr)) ((xcls)))))
                                  xbogusForceDataize.write ((((xself).xassertEqual)) (((xcls).x__module__)) ("'typing'") ((((xstr)) ((xcls)))))
                                  (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                                    seq
                                      xs.write ((((xpickle).xdumps)) ((xcls)) ((xproto)))
                                      xloaded.write ((((xpickle).xloads)) ((xs)))
                                      xbogusForceDataize.write ((((xself).xassertIs)) ((xcls)) ((xloaded)))
                    xTypeName.write ((((xtyping).xNewType)) ("'SpecialAttrsTests.TypeName'") ((xAny)))
                    xtest_special_attrs2.write
                      [xself]
                        memory > xs
                        memory > xfr
                        memory > xloaded
                        seq > @
                          seq
                            xfr.write ((((xtyping).xForwardRef)) ("'set[Any]'"))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xfr)) ("'__name__'"))))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xfr)) ("'__qualname__'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xfr).x__module__)) ("'typing'"))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              (((xunsupported)) (((((xself).xassertRaises)) ((xTypeError)))) ((xexc)))
                                xbogusForceDataize.write ((((xpickle).xdumps)) ((xfr)) ((xproto)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xSpecialAttrsTests).xTypeName).x__name__)) ("'TypeName'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xSpecialAttrsTests).xTypeName).x__qualname__)) ("'SpecialAttrsTests.TypeName'"))
                            xbogusForceDataize.write ((((xself).xassertEqual)) ((((xSpecialAttrsTests).xTypeName).x__module__)) ("'test.test_typing'"))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xs.write ((((xpickle).xdumps)) (((xSpecialAttrsTests).xTypeName)) ((xproto)))
                                xloaded.write ((((xpickle).xloads)) ((xs)))
                                xbogusForceDataize.write ((((xself).xassertIs)) (((xSpecialAttrsTests).xTypeName)) ((xloaded)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xSpecialAttrsT).x__name__)) ("'SpecialAttrsT'"))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xSpecialAttrsT)) ("'__qualname__'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xSpecialAttrsT).x__module__)) ("'test.test_typing'"))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xs.write ((((xpickle).xdumps)) ((xSpecialAttrsT)) ((xproto)))
                                xloaded.write ((((xpickle).xloads)) ((xs)))
                                xbogusForceDataize.write ((((xself).xassertIs)) ((xSpecialAttrsT)) ((xloaded)))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xSpecialAttrsP).x__name__)) ("'SpecialAttrsP'"))
                            xbogusForceDataize.write ((((xself).xassertFalse)) ((((xhasattr)) ((xSpecialAttrsP)) ("'__qualname__'"))))
                            xbogusForceDataize.write ((((xself).xassertEqual)) (((xSpecialAttrsP).x__module__)) ("'test.test_typing'"))
                            (((xunsupported)) ((xproto)) ((((xrange)) ((((xpickle).xHIGHEST_PROTOCOL).add 1)))))
                              seq
                                xs.write ((((xpickle).xdumps)) ((xSpecialAttrsP)) ((xproto)))
                                xloaded.write ((((xpickle).xloads)) ((xs)))
                                xbogusForceDataize.write ((((xself).xassertIs)) ((xSpecialAttrsP)) ((xloaded)))
            xAllTests.write
              []
                memory > xtest_all_exported_names
                memory > xtest_all
                seq > @
                  seq
                    unsupported
                    xtest_all.write
                      [xself]
                        memory > xa
                        seq > @
                          seq
                            (((xunsupported)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'AbstractSet'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'ValuesView'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'cast'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'overload'") ((xa)))
                            (((xhasattr)) ((xcontextlib)) ("'AbstractContextManager'")).if
                              xbogusForceDataize.write ((((xself).xassertIn)) ("'ContextManager'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ("'io'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ("'re'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ("'os'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertNotIn)) ("'sys'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'Text'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'SupportsBytes'") ((xa)))
                            xbogusForceDataize.write ((((xself).xassertIn)) ("'SupportsComplex'") ((xa)))
                    xtest_all_exported_names.write
                      [xself]
                        memory > xactual_all
                        memory > xcomputed_all
                        memory > xtyping
                        seq > @
                          seq
                            (((xunsupported)))
                            xactual_all.write (((xset)) (((xtyping).x__all__)))
                            xcomputed_all.write (((xunsupported)) ((xk)) ((((xunsupported)) ((xk)) ((xv)))) (((((((xvars)) ((xtyping))).xitems)))) (((((xunsupported)) ((xk)) ((xactual_all))).if TRUE ((((((xk).xstartswith)) ("'_'")).not).if ((((xunsupported)) ((xk)) ((((xunsupported)) ("'io'") ("'re'")))).if ((((((xk).xendswith)) ((((xunsupported)) ("'Meta'") ("'_contra'") ("'_co'")))).not).if (((((((xk).xupper))).eq (xk)).not).if ((((xgetattr)) ((xv)) ("'__module__'") ("None: is there a None literal in the EO language?")).eq ((xtyping).x__name__)) FALSE) FALSE) FALSE) FALSE))))
                            xbogusForceDataize.write ((((xself).xassertSetEqual)) ((xcomputed_all)) ((xactual_all)))
            ((x__name__).eq "'__main__'").if
              xbogusForceDataize.write (((xmain)))
