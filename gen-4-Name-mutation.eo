+package org.eolang
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit
pyint 0 > dummy-int-usage
pystring 0 > dummy-string-usage
pyfloat 0 > dummy-float-usage
pybool TRUE > dummy-bool-usage
memory 0 > xStopIteration
memory 0 > xnum
memory 0 > xy
memory 0 > xmyArray
memory 0 > xrange
memory 0 > xx
memory 0 > xsum
[] > ygen4
  [args...] > unsupported
  [args...] > xunsupported
  memory 0 > bogusForceDataize
  memory 0 > xbogusForceDataize
  memory 0 > xhack
  seq > @
    xhack.write
      []
        memory 0 > xtest
        seq > @
          xtest.write
            []
              memory 0 > xsquare
              memory 0 > xfibonacci_numbers
              seq > @
                seq
                  xfibonacci_numbers.write
                    [xnums]
                      memory 0 > xinn0
                      memory 0 > x_
                      memory 0 > xit0
                      seq > @
                        seq
                          (((unsupported)).apply ((((xmyArray)).apply ((((unsupported)).apply ((xx)) ((xy)))))) ((((xmyArray)).apply ((((unsupported)).apply ((pyint 0)) ((pyint 1)))))))
                          seq
                            xinn0.write (((xrange)).apply ((xnums)))
                            xit0.write ((((xinn0).x__iter__)).apply)
                            (((unsupported)).apply ((xStopIteration)))
                              while.
                                (pybool TRUE)
                                [unused]
                                  seq > @
                                    seq
                                      x_.write ((((xit0).x__next__)).apply)
                                      seq
                                        (((unsupported)).apply ((((xmyArray)).apply ((((unsupported)).apply ((xx)) ((xy)))))) ((((xmyArray)).apply ((((unsupported)).apply ((xy)) (((xx).add (xy))))))))
                                        (((unsupported)).apply ((xx)))
                  xsquare.write
                    [xnums]
                      memory 0 > xnum2
                      memory 0 > xinn1
                      memory 0 > xit1
                      seq > @
                        seq
                          xinn1.write (xnums)
                          xit1.write ((((xinn1).x__iter__)).apply)
                          (((unsupported)).apply ((xStopIteration)))
                            while.
                              (pybool TRUE)
                              [unused]
                                seq > @
                                  seq
                                    xnum2.write ((((xit1).x__next__)).apply)
                                    (((unsupported)).apply (((xnum).pow (pyint 2))))
                  (((unsupported)).apply (((((xsum)).apply ((((xsquare)).apply ((((xfibonacci_numbers)).apply ((pyint 10))))))).eq (pyint 4895))))