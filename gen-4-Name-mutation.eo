+package org.eolang
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+junit
pyint 0 > dummy-int-usage
pystring 0 > dummy-string-usage
pyfloat 0 > dummy-float-usage
pybool TRUE > dummy-bool-usage
memory 0 > range
memory 0 > sum
memory 0 > x
memory 0 > StopIteration
memory 0 > y
memory 0 > num
[] > ygen4
  [args...] > unsupported
  [args...] > xunsupported
  memory 0 > bogusForceDataize
  memory 0 > xbogusForceDataize
  memory 0 > xhack
  seq > @
    xhack.write
      []
        memory 0 > test
        seq > @
          test.write
            []
              memory 0 > fibonacci_numbers
              memory 0 > square
              seq > @
                seq
                  fibonacci_numbers.write
                    [nums]
                      memory 0 > it0
                      memory 0 > _
                      memory 0 > inn0
                      seq > @
                        seq
                          (((unsupported)).apply ((((unsupported)).apply ((x)) ((y)))) ((((unsupported)).apply ((pyint 0)) ((pyint 1)))))
                          seq
                            inn0.write (((range)).apply ((nums)))
                            it0.write ((((inn0).__iter__)).apply)
                            (((unsupported)).apply ((StopIteration)))
                              while.
                                (pybool TRUE)
                                [unused]
                                  seq > @
                                    seq
                                      _.write ((((it0).__next__)).apply)
                                      seq
                                        (((unsupported)).apply ((((unsupported)).apply ((x)) ((y)))) ((((unsupported)).apply ((y)) (((x).add (y))))))
                                        (((unsupported)).apply ((x)))
                  square.write
                    [nums]
                      memory 0 > it1
                      memory 0 > num2
                      memory 0 > inn1
                      seq > @
                        seq
                          inn1.write (nums)
                          it1.write ((((inn1).__iter__)).apply)
                          (((unsupported)).apply ((StopIteration)))
                            while.
                              (pybool TRUE)
                              [unused]
                                seq > @
                                  seq
                                    num2.write ((((it1).__next__)).apply)
                                    (((unsupported)).apply (((num).pow (pyint 2))))
                  (((unsupported)).apply (((((sum)).apply ((((square)).apply ((((fibonacci_numbers)).apply ((pyint 10))))))).eq (pyint 4895))))