+package org.eolang
+alias goto org.eolang.goto
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf
+alias cage org.eolang.cage
+alias pyint preface.pyint
+alias pyfloat preface.pyfloat
+alias pystring preface.pystring
+alias pybool preface.pybool
+alias pycomplex preface.pycomplex
+alias newUID preface.newUID
+alias fakeclasses preface.fakeclasses
+alias mkCopy preface.mkCopy
+alias raiseNothing preface.raiseNothing
+alias continue preface.continue
+alias break preface.break
+alias return preface.return
+alias raiseEmpty preface.raiseEmpty
+alias xmyArray preface.xmyArray
+alias xlen preface.xlen
+alias xiter preface.xiter
+alias xStopIteration preface.xStopIteration
+alias xTypeError preface.xTypeError
+alias xZeroDivisionError preface.xZeroDivisionError
+alias xrange preface.xrange
+junit

[unused] > for_try_continue_else_finally
  [] > apply
    [stackUp] > @
      [id] > is-exception
        id.greater (pyint 3) > @
      [id] > is-break-continue-return
        (id.greater (pyint 0)).and (id.less (pyint 4)) > @
      [] > xbool
        [x] > apply
          [stackUp] > @
            seq > @
              stackUp.forward (return x)
              123
      cage 0 > xcurrent-exception
      cage 0 > xexcinexc
      cage FALSE > xcaught
      pyint 0 > dummy-int-usage
      pyfloat 0 > dummy-float-usage
      pybool TRUE > dummy-bool-usage
      pycomplex 0 0 > dummy-pycomplex
      pystring (sprintf "") > dummy-bool-string
      newUID > dummy-newUID
      fakeclasses.pyIntClass > xint
      fakeclasses.pyFloatClass > xfloat
      fakeclasses.pyComplexClass > xcomplex
      raiseNothing > dummy-rn
      continue > dummy-continue
      break > dummy-break
      return > dummy-return
      raiseEmpty > dummy-raiseEmpty
      xmyArray > dummy-xmyArray
      mkCopy > dummy-mkCopy
      xlen > dummy-xlen
      xStopIteration > dummy-stop-iteration
      xZeroDivisionError > dummy-xZeroDivisionError
      xTypeError > dummy-xTypeError
      xiter > dummy-xiter
      xrange > dummy-xrange
      cage 0 > tmp
      cage 0 > toReturn
      cage 0 > assertMe
      cage 0 > xfor_try_continue_else_finally
      seq > @
        stdout "for_try_continue_else_finally\n"
        write.
          xfor_try_continue_else_finally
          []
            [] > apply
              [stackUp] > @
                cage 0 > tmp
                cage 0 > toReturn
                cage 0 > lhs18
                cage 0 > e12
                cage 0 > e23
                cage 0 > e1
                cage 0 > xinn0
                cage 0 > lhs10
                cage 0 > lhs13
                cage 0 > e10
                cage 0 > e25
                cage 0 > e9
                cage 0 > e15
                cage 0 > lhs15
                cage 0 > e22
                cage 0 > e19
                cage 0 > e6
                cage 0 > e18
                cage 0 > lhs0
                cage 0 > lhs4
                cage 0 > e5
                cage 0 > e7
                cage 0 > xnum
                cage 0 > lhs17
                cage 0 > e17
                cage 0 > e0
                cage 0 > e20
                cage 0 > lhs5
                cage 0 > e4
                cage 0 > xresult
                cage 0 > e24
                cage 0 > e13
                cage 0 > e8
                cage 0 > e16
                cage 0 > lhs2
                cage 0 > lhs22
                cage 0 > xres
                cage 0 > e27
                cage 0 > e3
                cage 0 > e21
                cage 0 > lhs9
                cage 0 > e14
                cage 0 > xit0
                cage 0 > lhs12
                cage 0 > xcaught
                cage 0 > e2
                cage 0 > e26
                cage 0 > e11
                seq > @
                  stdout "xfor_try_continue_else_finally\n"
                  tmp.write (goto ((((xmyArray)).apply ((*))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e0).write (tmp.result)
                  ((e0).<)
                  mkCopy (e0) > tmp1
                  (xres).write (tmp1.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* (pyint 1) (pyint 2) (pyint 3)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e1).write (tmp.result)
                  ((e1).<)
                  mkCopy (e1) > tmp2
                  (xinn0).write (tmp2.copy)
                  mkCopy (xinn0.x__iter__) > tmp3
                  (e2).write (tmp3.copy)
                  ((e2).<)
                  mkCopy (xinn0) > tmp4
                  (lhs0).write (tmp4.copy)
                  tmp.write (goto ((((e2)).apply ((lhs0))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e3).write (tmp.result)
                  ((e3).<)
                  mkCopy (e3) > tmp5
                  (xit0).write (tmp5.copy)
                  xcaught.write (pybool TRUE)
                  write.
                    xcurrent-exception
                    goto
                      [stackUp]
                        cage 0 > xcurrent-exception
                        cage 0 > xexcinexc
                        cage 0 > tmp
                        seq > @
                          write.
                            tmp
                            goto
                              [stackUp]
                                seq > @
                                  (pybool TRUE).while
                                    [unused]
                                      cage 0 > tmp
                                      seq > @
                                        write.
                                          tmp
                                          goto
                                            [stackUp]
                                              cage 0 > tmp
                                              seq > @
                                                mkCopy (xit0.x__next__) > tmp6
                                                (e4).write (tmp6.copy)
                                                ((e4).<)
                                                mkCopy (xit0) > tmp7
                                                (lhs2).write (tmp7.copy)
                                                tmp.write (goto ((((e4)).apply ((lhs2))).@))
                                                (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                (e5).write (tmp.result)
                                                ((e5).<)
                                                mkCopy (e5) > tmp8
                                                (xnum).write (tmp8.copy)
                                                xcaught.write (pybool TRUE)
                                                write.
                                                  xcurrent-exception
                                                  goto
                                                    [stackUp]
                                                      cage 0 > xcurrent-exception
                                                      cage 0 > xexcinexc
                                                      cage 0 > tmp
                                                      seq > @
                                                        tmp.write (((xnum).div (pyint 0)))
                                                        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                        (e6).write (tmp.result)
                                                        ((e6).<)
                                                        mkCopy (e6) > tmp9
                                                        (xresult).write (tmp9.copy)
                                                        stackUp.forward raiseNothing
                                                seq
                                                  write.
                                                    xexcinexc
                                                    goto
                                                      [stackUp]
                                                        if. > @
                                                          is-exception (xcurrent-exception.x__class__.x__id__)
                                                          seq
                                                            mkCopy (xcurrent-exception.x__class__) > tmp10
                                                            (e10).write (tmp10.copy)
                                                            ((e10).<)
                                                            mkCopy (e10.x__id__) > tmp11
                                                            (e11).write (tmp11.copy)
                                                            ((e11).<)
                                                            mkCopy (xZeroDivisionError.x__id__) > tmp12
                                                            (e12).write (tmp12.copy)
                                                            ((e12).<)
                                                            (e13).write (((e11).eq (e12)))
                                                            (e13).force
                                                            ((e13).<)
                                                            (e13).if
                                                              seq
                                                                stdout (sprintf "%s\n" ((pystring "Sorry ! You are dividing by zero ").as-string))
                                                                ((e7).<)
                                                                mkCopy (xres.xappend) > tmp13
                                                                (e8).write (tmp13.copy)
                                                                ((e8).<)
                                                                mkCopy (xres) > tmp14
                                                                (lhs4).write (tmp14.copy)
                                                                (lhs5).write ((pyint 10))
                                                                (lhs5).force
                                                                tmp.write (goto ((((e8)).apply ((lhs4)) ((lhs5))).@))
                                                                (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                                (e9).write (tmp.result)
                                                                ((e9).<)
                                                                stackUp.forward continue
                                                                (xcaught).write ((pybool TRUE))
                                                                (xcaught).force
                                                                (pybool TRUE)
                                                              seq
                                                                (pybool TRUE)
                                                            xcaught.if (stackUp.forward raiseNothing) (stackUp.forward xcurrent-exception)
                                                            0
                                                          seq
                                                            (stackUp.forward xcurrent-exception)
                                                            0
                                                  xexcinexc.x__class__.x__id__
                                                  if.
                                                    xcurrent-exception.x__class__.x__id__.eq (raiseNothing.x__class__.x__id__)
                                                    seq
                                                      mkCopy (xres.xappend) > tmp15
                                                      (e14).write (tmp15.copy)
                                                      ((e14).<)
                                                      mkCopy (xres) > tmp16
                                                      (lhs9).write (tmp16.copy)
                                                      (lhs10).write ((pyint 11))
                                                      (lhs10).force
                                                      tmp.write (goto ((((e14)).apply ((lhs9)) ((lhs10))).@))
                                                      (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                      (e15).write (tmp.result)
                                                      ((e15).<)
                                                      0
                                                    0
                                                  mkCopy (xres.xappend) > tmp17
                                                  (e16).write (tmp17.copy)
                                                  ((e16).<)
                                                  mkCopy (xres) > tmp18
                                                  (lhs12).write (tmp18.copy)
                                                  mkCopy (xnum) > tmp19
                                                  (lhs13).write (tmp19.copy)
                                                  tmp.write (goto ((((e16)).apply ((lhs12)) ((lhs13))).@))
                                                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                  (e17).write (tmp.result)
                                                  ((e17).<)
                                                  tmp.write (goto ((((xlen)).apply ((xres))).@))
                                                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                  (e18).write (tmp.result)
                                                  ((e18).<)
                                                  (lhs15).write ((pyint 2))
                                                  (lhs15).force
                                                  (e19).write (((e18).eq (lhs15)))
                                                  (e19).force
                                                  ((e19).<)
                                                  (e19).if
                                                    seq
                                                      stackUp.forward break
                                                      (pybool TRUE)
                                                    seq
                                                      (pybool TRUE)
                                                  mkCopy (xres.xappend) > tmp20
                                                  (e20).write (tmp20.copy)
                                                  ((e20).<)
                                                  mkCopy (xres) > tmp21
                                                  (lhs17).write (tmp21.copy)
                                                  (lhs18).write ((pyint 13))
                                                  (lhs18).force
                                                  tmp.write (goto ((((e20)).apply ((lhs17)) ((lhs18))).@))
                                                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                                  (e21).write (tmp.result)
                                                  ((e21).<)
                                                  ((is-break-continue-return (xcurrent-exception.x__class__.x__id__)).or ((is-exception (xcurrent-exception.x__class__.x__id__)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                                                  ((is-break-continue-return (xexcinexc.x__class__.x__id__)).or ((is-exception (xexcinexc.x__class__.x__id__)))).if (stackUp.forward xexcinexc) 0
                                                stackUp.forward continue
                                                123
                                        (tmp.x__class__.x__id__.neq (continue.x__class__.x__id__)).if (stackUp.forward tmp) 0
                                        0
                                  stackUp.forward raiseNothing
                          if.
                            tmp.x__class__.x__id__.neq (break.x__class__.x__id__)
                            stackUp.forward tmp
                            0
                          stackUp.forward raiseNothing
                  seq
                    write.
                      xexcinexc
                      goto
                        [stackUp]
                          if. > @
                            is-exception (xcurrent-exception.x__class__.x__id__)
                            seq
                              mkCopy (xcurrent-exception.x__class__) > tmp22
                              (e22).write (tmp22.copy)
                              ((e22).<)
                              mkCopy (e22.x__id__) > tmp23
                              (e23).write (tmp23.copy)
                              ((e23).<)
                              mkCopy (xStopIteration.x__id__) > tmp24
                              (e24).write (tmp24.copy)
                              ((e24).<)
                              (e25).write (((e23).eq (e24)))
                              (e25).force
                              ((e25).<)
                              (e25).if
                                seq
                                  (xcaught).write ((pybool TRUE))
                                  (xcaught).force
                                  (pybool TRUE)
                                seq
                                  (pybool TRUE)
                              xcaught.if (stackUp.forward raiseNothing) (stackUp.forward xcurrent-exception)
                              0
                            seq
                              (stackUp.forward xcurrent-exception)
                              0
                    xexcinexc.x__class__.x__id__
                    if.
                      xcurrent-exception.x__class__.x__id__.eq (raiseNothing.x__class__.x__id__)
                      seq
                        0
                      0
                    ((is-break-continue-return (xcurrent-exception.x__class__.x__id__)).or ((is-exception (xcurrent-exception.x__class__.x__id__)).and (xcaught.not))).if (stackUp.forward xcurrent-exception) 0
                    ((is-break-continue-return (xexcinexc.x__class__.x__id__)).or ((is-exception (xexcinexc.x__class__.x__id__)))).if (stackUp.forward xexcinexc) 0
                  mkCopy (xres) > tmp25
                  (lhs22).write (tmp25.copy)
                  tmp.write (goto ((((xmyArray)).apply ((* (pyint 10) (pyint 1)))).@))
                  (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
                  (e26).write (tmp.result)
                  ((e26).<)
                  (e27).write (((lhs22).eq (e26)))
                  (e27).force
                  ((e27).<)
                  toReturn.write ((e27))
                  stackUp.forward (return toReturn)
                  123
        tmp.write (goto ((((xfor_try_continue_else_finally)).apply).@))
        (tmp.x__class__.x__id__.neq (return.x__class__.x__id__)).if (stackUp.forward tmp) 0
        (assertMe).write (tmp.result)
        toReturn.write ((assertMe))
        stackUp.forward (return toReturn)
  (goto (apply.@)).result > @